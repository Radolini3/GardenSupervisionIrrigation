
GardenStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08007df8  08007df8  00017df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a4  080082a4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080082a4  080082a4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082a4  080082a4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a4  080082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080082ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000001f4  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  200003d8  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013db6  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d84  00000000  00000000  00033fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00036d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227a1  00000000  00000000  00037e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d6f  00000000  00000000  0005a5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5ae7  00000000  00000000  00071328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136e0f  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000f68  00000000  00000000  00136e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005658  00000000  00000000  00137dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007de0 	.word	0x08007de0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007de0 	.word	0x08007de0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
        * EXTI
     PC1   ------> ADCx_IN7
     PB0   ------> ADC1_IN11
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <MX_GPIO_Init+0x104>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a3a      	ldr	r2, [pc, #232]	; (8000cac <MX_GPIO_Init+0x104>)
 8000bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <MX_GPIO_Init+0x104>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <MX_GPIO_Init+0x104>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a34      	ldr	r2, [pc, #208]	; (8000cac <MX_GPIO_Init+0x104>)
 8000bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <MX_GPIO_Init+0x104>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <MX_GPIO_Init+0x104>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a2e      	ldr	r2, [pc, #184]	; (8000cac <MX_GPIO_Init+0x104>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <MX_GPIO_Init+0x104>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_GPIO_Init+0x104>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a28      	ldr	r2, [pc, #160]	; (8000cac <MX_GPIO_Init+0x104>)
 8000c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_GPIO_Init+0x104>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f001 fa63 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000c42:	f001 f8cb 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c46:	2302      	movs	r3, #2
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000c5a:	f001 f8bf 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c5e:	2320      	movs	r3, #32
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f001 f8b0 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c80:	2303      	movs	r3, #3
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <MX_GPIO_Init+0x10c>)
 8000c90:	f001 f8a4 	bl	8001ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2028      	movs	r0, #40	; 0x28
 8000c9a:	f001 f868 	bl	8001d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c9e:	2028      	movs	r0, #40	; 0x28
 8000ca0:	f001 f881 	bl	8001da6 <HAL_NVIC_EnableIRQ>

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000400 	.word	0x48000400

08000cb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	f001 fa2c 	bl	8002150 <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f000 faa8 	bl	8001252 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d06:	f001 fd2b 	bl	8002760 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f000 fa9f 	bl	8001252 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d18:	f001 fd6d 	bl	80027f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fa96 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000258 	.word	0x20000258
 8000d30:	40005400 	.word	0x40005400
 8000d34:	2000090e 	.word	0x2000090e

08000d38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <HAL_I2C_MspInit+0xb8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d145      	bne.n	8000de6 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_I2C_MspInit+0xbc>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <HAL_I2C_MspInit+0xbc>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_I2C_MspInit+0xbc>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_I2C_MspInit+0xbc>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <HAL_I2C_MspInit+0xbc>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_I2C_MspInit+0xbc>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f001 f817 	bl	8001ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db2:	2312      	movs	r3, #18
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <HAL_I2C_MspInit+0xc0>)
 8000dca:	f001 f807 	bl	8001ddc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_I2C_MspInit+0xbc>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_I2C_MspInit+0xbc>)
 8000dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_I2C_MspInit+0xbc>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400

08000dfc <lcd_init>:

#include "globalVars.h"
#include "stdio.h"
#include "string.h"

void lcd_init(struct lcd_disp * lcd){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl){
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <lcd_init+0x1a>
		xpin = BL_PIN;
 8000e12:	2308      	movs	r3, #8
 8000e14:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	delay_us(40000);
 8000e16:	f649 4040 	movw	r0, #40000	; 0x9c40
 8000e1a:	f000 fe25 	bl	8001a68 <delay_us>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	2130      	movs	r1, #48	; 0x30
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f82c 	bl	8000e84 <lcd_write>
	delay_us(5000);
 8000e2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e30:	f000 fe1a 	bl	8001a68 <delay_us>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	2130      	movs	r1, #48	; 0x30
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f821 	bl	8000e84 <lcd_write>
	delay_us(10000);
 8000e42:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e46:	f000 fe0f 	bl	8001a68 <delay_us>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	2130      	movs	r1, #48	; 0x30
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f816 	bl	8000e84 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	7bfa      	ldrb	r2, [r7, #15]
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f80f 	bl	8000e84 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	210c      	movs	r1, #12
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f808 	bl	8000e84 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 f8a0 	bl	8000fba <lcd_clear>

}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	4613      	mov	r3, r2
 8000e94:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	f023 030f 	bic.w	r3, r3, #15
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	797b      	ldrb	r3, [r7, #5]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000eac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eb0:	f023 030f 	bic.w	r3, r3, #15
 8000eb4:	b25a      	sxtb	r2, r3
 8000eb6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	797b      	ldrb	r3, [r7, #5]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	b299      	uxth	r1, r3
 8000eec:	f107 020c 	add.w	r2, r7, #12
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <lcd_write+0x88>)
 8000ef8:	f001 f9ba 	bl	8002270 <HAL_I2C_Master_Transmit>

	delay_us(750);
 8000efc:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000f00:	f000 fdb2 	bl	8001a68 <delay_us>
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000258 	.word	0x20000258

08000f10 <lcd_display>:

void lcd_display(struct lcd_disp * lcd){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <lcd_display+0x1e>
		xpin = BL_PIN;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f843 	bl	8000fba <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffa1 	bl	8000e84 <lcd_write>

	while(lcd->f_line[i]){
 8000f42:	e00f      	b.n	8000f64 <lcd_display+0x54>
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7818      	ldrb	r0, [r3, #0]
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	7859      	ldrb	r1, [r3, #1]
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f7ff ff93 	bl	8000e84 <lcd_write>
		i++;
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	3301      	adds	r3, #1
 8000f62:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i]){
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1e9      	bne.n	8000f44 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	21c0      	movs	r1, #192	; 0xc0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff81 	bl	8000e84 <lcd_write>

	while(lcd->s_line[i]){
 8000f82:	e00f      	b.n	8000fa4 <lcd_display+0x94>
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7818      	ldrb	r0, [r3, #0]
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	7c99      	ldrb	r1, [r3, #18]
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f7ff ff73 	bl	8000e84 <lcd_write>
		i++;
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i]){
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	7c9b      	ldrb	r3, [r3, #18]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1e9      	bne.n	8000f84 <lcd_display+0x74>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <lcd_clear+0x1a>
		xpin = BL_PIN;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff51 	bl	8000e84 <lcd_write>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <displayReadings>:
void displayReadings(int disp_No){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	switch(disp_No){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d879      	bhi.n	80010f0 <displayReadings+0x104>
 8000ffc:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <displayReadings+0x18>)
 8000ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001002:	bf00      	nop
 8001004:	08001019 	.word	0x08001019
 8001008:	08001047 	.word	0x08001047
 800100c:	08001075 	.word	0x08001075
 8001010:	080010a3 	.word	0x080010a3
 8001014:	080010d1 	.word	0x080010d1
	case 1:
	  sprintf((char *)disp.f_line, "HSens1: %2.f%%", moisture_percentage[0]);
 8001018:	4b39      	ldr	r3, [pc, #228]	; (8001100 <displayReadings+0x114>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa93 	bl	8000548 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4937      	ldr	r1, [pc, #220]	; (8001104 <displayReadings+0x118>)
 8001028:	4837      	ldr	r0, [pc, #220]	; (8001108 <displayReadings+0x11c>)
 800102a:	f004 fc61 	bl	80058f0 <siprintf>
	  sprintf((char *)disp.s_line, "HSens2: %2.f%%", moisture_percentage[1]);
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <displayReadings+0x114>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa88 	bl	8000548 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4933      	ldr	r1, [pc, #204]	; (800110c <displayReadings+0x120>)
 800103e:	4834      	ldr	r0, [pc, #208]	; (8001110 <displayReadings+0x124>)
 8001040:	f004 fc56 	bl	80058f0 <siprintf>
		break;
 8001044:	e055      	b.n	80010f2 <displayReadings+0x106>
	case 2:
	  sprintf((char *)disp.f_line, "HSens3: %2.f%%", moisture_percentage[2]);
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <displayReadings+0x114>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa7c 	bl	8000548 <__aeabi_f2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	492f      	ldr	r1, [pc, #188]	; (8001114 <displayReadings+0x128>)
 8001056:	482c      	ldr	r0, [pc, #176]	; (8001108 <displayReadings+0x11c>)
 8001058:	f004 fc4a 	bl	80058f0 <siprintf>
	  sprintf((char *)disp.s_line, "HSens4: %2.f%%", moisture_percentage[3]);
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <displayReadings+0x114>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa71 	bl	8000548 <__aeabi_f2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	492b      	ldr	r1, [pc, #172]	; (8001118 <displayReadings+0x12c>)
 800106c:	4828      	ldr	r0, [pc, #160]	; (8001110 <displayReadings+0x124>)
 800106e:	f004 fc3f 	bl	80058f0 <siprintf>
		break;
 8001072:	e03e      	b.n	80010f2 <displayReadings+0x106>
	case 3:
	  sprintf((char *)disp.f_line, "HSens5: %2.f%%", moisture_percentage[4]);
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <displayReadings+0x114>)
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa65 	bl	8000548 <__aeabi_f2d>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4926      	ldr	r1, [pc, #152]	; (800111c <displayReadings+0x130>)
 8001084:	4820      	ldr	r0, [pc, #128]	; (8001108 <displayReadings+0x11c>)
 8001086:	f004 fc33 	bl	80058f0 <siprintf>
	  sprintf((char *)disp.s_line, "HSens6: %2.f%%", moisture_percentage[5]);
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <displayReadings+0x114>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa5a 	bl	8000548 <__aeabi_f2d>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4921      	ldr	r1, [pc, #132]	; (8001120 <displayReadings+0x134>)
 800109a:	481d      	ldr	r0, [pc, #116]	; (8001110 <displayReadings+0x124>)
 800109c:	f004 fc28 	bl	80058f0 <siprintf>
		break;
 80010a0:	e027      	b.n	80010f2 <displayReadings+0x106>
	case 4:
	  sprintf((char *)disp.f_line, "AirT: %2.f degC", Temperature);
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <displayReadings+0x138>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa4e 	bl	8000548 <__aeabi_f2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	491d      	ldr	r1, [pc, #116]	; (8001128 <displayReadings+0x13c>)
 80010b2:	4815      	ldr	r0, [pc, #84]	; (8001108 <displayReadings+0x11c>)
 80010b4:	f004 fc1c 	bl	80058f0 <siprintf>
	  sprintf((char *)disp.s_line, "AirH: %2.f%% ", Humidity);
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <displayReadings+0x140>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa43 	bl	8000548 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	491a      	ldr	r1, [pc, #104]	; (8001130 <displayReadings+0x144>)
 80010c8:	4811      	ldr	r0, [pc, #68]	; (8001110 <displayReadings+0x124>)
 80010ca:	f004 fc11 	bl	80058f0 <siprintf>
		break;
 80010ce:	e010      	b.n	80010f2 <displayReadings+0x106>
	case 5:
	  sprintf((char *)disp.f_line, "LightInt: %2.f%%", lightIntensity);
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <displayReadings+0x148>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa37 	bl	8000548 <__aeabi_f2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4916      	ldr	r1, [pc, #88]	; (8001138 <displayReadings+0x14c>)
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <displayReadings+0x11c>)
 80010e2:	f004 fc05 	bl	80058f0 <siprintf>
	  sprintf((char *)disp.s_line, " ");
 80010e6:	4915      	ldr	r1, [pc, #84]	; (800113c <displayReadings+0x150>)
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <displayReadings+0x124>)
 80010ea:	f004 fc01 	bl	80058f0 <siprintf>
		break;
 80010ee:	e000      	b.n	80010f2 <displayReadings+0x106>
	default:
		break;
 80010f0:	bf00      	nop
	}
	lcd_display(&disp);
 80010f2:	4813      	ldr	r0, [pc, #76]	; (8001140 <displayReadings+0x154>)
 80010f4:	f7ff ff0c 	bl	8000f10 <lcd_display>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000200 	.word	0x20000200
 8001104:	08007df8 	.word	0x08007df8
 8001108:	20000231 	.word	0x20000231
 800110c:	08007e08 	.word	0x08007e08
 8001110:	20000242 	.word	0x20000242
 8001114:	08007e18 	.word	0x08007e18
 8001118:	08007e28 	.word	0x08007e28
 800111c:	08007e38 	.word	0x08007e38
 8001120:	08007e48 	.word	0x08007e48
 8001124:	20000228 	.word	0x20000228
 8001128:	08007e58 	.word	0x08007e58
 800112c:	2000022c 	.word	0x2000022c
 8001130:	08007e68 	.word	0x08007e68
 8001134:	20000218 	.word	0x20000218
 8001138:	08007e78 	.word	0x08007e78
 800113c:	08007e8c 	.word	0x08007e8c
 8001140:	20000230 	.word	0x20000230

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f000 fcd0 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f828 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f7ff fd2a 	bl	8000ba8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001154:	f000 fbb8 	bl	80018c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001158:	f7ff fdae 	bl	8000cb8 <MX_I2C1_Init>
  MX_TIM6_Init();
 800115c:	f000 fb3c 	bl	80017d8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001160:	f000 faec 	bl	800173c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	  HAL_TIM_Base_Start(&htim2); 	 // Start timer2 w trybie normalnym
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <main+0x4c>)
 8001166:	f002 ff95 	bl	8004094 <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start_IT(&htim6); // Start timera6 w trybie przerwania
 800116a:	480a      	ldr	r0, [pc, #40]	; (8001194 <main+0x50>)
 800116c:	f002 ffe6 	bl	800413c <HAL_TIM_Base_Start_IT>
	  disp.addr = (0x27 << 1);		 // Adres LCD'ka po I2C
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <main+0x54>)
 8001172:	224e      	movs	r2, #78	; 0x4e
 8001174:	701a      	strb	r2, [r3, #0]
	  disp.bl = true;				 // Włącz podświetlenie
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <main+0x54>)
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	  lcd_init(&disp);				 // Inicjalizuj LCD
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <main+0x54>)
 8001180:	f7ff fe3c 	bl	8000dfc <lcd_init>
	  displayReadings(disp_No);		 // Ekran startowy HSens1 i HSens2
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <main+0x58>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff2f 	bl	8000fec <displayReadings>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800118e:	e7fe      	b.n	800118e <main+0x4a>
 8001190:	200002a8 	.word	0x200002a8
 8001194:	200002f4 	.word	0x200002f4
 8001198:	20000230 	.word	0x20000230
 800119c:	20000000 	.word	0x20000000

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b096      	sub	sp, #88	; 0x58
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011aa:	2228      	movs	r2, #40	; 0x28
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 ff2c 	bl	800500c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d6:	2302      	movs	r3, #2
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011da:	2301      	movs	r3, #1
 80011dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011de:	2310      	movs	r3, #16
 80011e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e6:	2300      	movs	r3, #0
 80011e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fb4b 	bl	8002890 <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001200:	f000 f827 	bl	8001252 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001204:	230f      	movs	r3, #15
 8001206:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	2102      	movs	r1, #2
 8001220:	4618      	mov	r0, r3
 8001222:	f002 fb73 	bl	800390c <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800122c:	f000 f811 	bl	8001252 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001230:	2320      	movs	r3, #32
 8001232:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fd9c 	bl	8003d78 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001246:	f000 f804 	bl	8001252 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3758      	adds	r7, #88	; 0x58
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001256:	b672      	cpsid	i
}
 8001258:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125a:	e7fe      	b.n	800125a <Error_Handler+0x8>

0800125c <Set_Pin_Output>:

/*Zmienne do obsługi czujnika DTH11 */


	/*=============================Ustaw PA6 jako wyjście=============================*/
	void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fda6 	bl	8001ddc <HAL_GPIO_Init>
	}
 8001290:	bf00      	nop
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <Set_Pin_Input>:
	/*=============================Ustaw PA6 jako wejście=============================*/
	void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012bc:	2301      	movs	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fd88 	bl	8001ddc <HAL_GPIO_Init>
	}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <DHT11sensorInit>:


	/*=============================Inicjalizuj czujnik=============================*/
	void DHT11sensorInit(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
		Set_Pin_Output (PORT_A, DHT11_PIN); 		// Ustaw PIN jako wyjście
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f7ff ffbd 	bl	800125c <Set_Pin_Output>
		HAL_GPIO_WritePin (PORT_A, DHT11_PIN, 0);   // Stan niski na pinie
 80012e2:	2200      	movs	r2, #0
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f000 ff01 	bl	80020f0 <HAL_GPIO_WritePin>
		delay_us (18000);   						// Poczekaj 18ms
 80012ee:	f244 6050 	movw	r0, #18000	; 0x4650
 80012f2:	f000 fbb9 	bl	8001a68 <delay_us>
	    HAL_GPIO_WritePin (PORT_A, DHT11_PIN, 1);   // Stan wysoki na pinie
 80012f6:	2201      	movs	r2, #1
 80012f8:	2140      	movs	r1, #64	; 0x40
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 fef7 	bl	80020f0 <HAL_GPIO_WritePin>
		delay_us (20);   							// Poczekaj 20us
 8001302:	2014      	movs	r0, #20
 8001304:	f000 fbb0 	bl	8001a68 <delay_us>
		Set_Pin_Input(PORT_A, DHT11_PIN);   		// Ustaw jako wejście
 8001308:	2140      	movs	r1, #64	; 0x40
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f7ff ffc3 	bl	8001298 <Set_Pin_Input>
	}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <sensorResponse>:


	/*=============================Odpowiedź czujnika=============================*/
	uint8_t sensorResponse(void){
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
		uint8_t Response = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	71fb      	strb	r3, [r7, #7]
		delay_us (40); 												// Poczekaj 40us
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f000 fba1 	bl	8001a68 <delay_us>
		/*Sprawdź czy czujnik ma odpowiedź, w przeciwnym razie daj błąd*/
		if (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN))){
 8001326:	2140      	movs	r1, #64	; 0x40
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f000 fec8 	bl	80020c0 <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10f      	bne.n	8001356 <sensorResponse+0x40>
			delay_us (80); 											//Zaczekaj 80us
 8001336:	2050      	movs	r0, #80	; 0x50
 8001338:	f000 fb96 	bl	8001a68 <delay_us>
			if ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN))) Response = 1;
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f000 febd 	bl	80020c0 <HAL_GPIO_ReadPin>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <sensorResponse+0x3c>
 800134c:	2301      	movs	r3, #1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	e001      	b.n	8001356 <sensorResponse+0x40>
			else Response = -1; 									// 255
 8001352:	23ff      	movs	r3, #255	; 0xff
 8001354:	71fb      	strb	r3, [r7, #7]
		}
		while ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));     		// Poczekaj na pin aż przejdzie w stan niski
 8001356:	bf00      	nop
 8001358:	2140      	movs	r1, #64	; 0x40
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f000 feaf 	bl	80020c0 <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f7      	bne.n	8001358 <sensorResponse+0x42>

		return Response;
 8001368:	79fb      	ldrb	r3, [r7, #7]
	}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <sensorRead>:

	/*=============================Odczyt=============================*/
	uint8_t sensorRead(void){
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
		uint8_t i,j;
		for (j=0;j<8;j++)
 8001378:	2300      	movs	r3, #0
 800137a:	71bb      	strb	r3, [r7, #6]
 800137c:	e03a      	b.n	80013f4 <sensorRead+0x82>
		{
			while (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));   // Poczekaj na stan wysoki pinu
 800137e:	bf00      	nop
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001386:	f000 fe9b 	bl	80020c0 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f7      	beq.n	8001380 <sensorRead+0xe>
			delay_us (40);   								   // Poczekaj 40us
 8001390:	2028      	movs	r0, #40	; 0x28
 8001392:	f000 fb69 	bl	8001a68 <delay_us>
			if (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)))  	   // Jeśli pin jest wysoki
 8001396:	2140      	movs	r1, #64	; 0x40
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f000 fe90 	bl	80020c0 <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10e      	bne.n	80013c4 <sensorRead+0x52>
			{
				i&= ~(1<<(7-j));   							   // Zapisz 0 bitowo w rejestrze
 80013a6:	79bb      	ldrb	r3, [r7, #6]
 80013a8:	f1c3 0307 	rsb	r3, r3, #7
 80013ac:	2201      	movs	r2, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	b25a      	sxtb	r2, r3
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	4013      	ands	r3, r2
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	e00b      	b.n	80013dc <sensorRead+0x6a>
			}
			else i|= (1<<(7-j));  							   // Jeśli pin jest w stanie wysokim, zapisz 1
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2201      	movs	r2, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	b25a      	sxtb	r2, r3
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	71fb      	strb	r3, [r7, #7]
			while ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));    // Poczekaj na stan niski pinu
 80013dc:	bf00      	nop
 80013de:	2140      	movs	r1, #64	; 0x40
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f000 fe6c 	bl	80020c0 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f7      	bne.n	80013de <sensorRead+0x6c>
		for (j=0;j<8;j++)
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	3301      	adds	r3, #1
 80013f2:	71bb      	strb	r3, [r7, #6]
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	d9c1      	bls.n	800137e <sensorRead+0xc>
		}
		return i;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
	}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <DHT11_allData>:
	/*Odczyt z DHT11, inicjalizacja, odpowiedź*/
	void DHT11_allData(){
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
		  DHT11sensorInit();
 8001408:	f7ff ff64 	bl	80012d4 <DHT11sensorInit>
		  Presence = sensorResponse();
 800140c:	f7ff ff83 	bl	8001316 <sensorResponse>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <DHT11_allData+0x8c>)
 8001416:	701a      	strb	r2, [r3, #0]
		  Rh_byte1 = sensorRead ();
 8001418:	f7ff ffab 	bl	8001372 <sensorRead>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <DHT11_allData+0x90>)
 8001422:	701a      	strb	r2, [r3, #0]
		  Rh_byte2 = sensorRead ();
 8001424:	f7ff ffa5 	bl	8001372 <sensorRead>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <DHT11_allData+0x94>)
 800142e:	701a      	strb	r2, [r3, #0]
		  Temp_byte1 = sensorRead ();
 8001430:	f7ff ff9f 	bl	8001372 <sensorRead>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <DHT11_allData+0x98>)
 800143a:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = sensorRead ();
 800143c:	f7ff ff99 	bl	8001372 <sensorRead>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <DHT11_allData+0x9c>)
 8001446:	701a      	strb	r2, [r3, #0]
		  SUM = sensorRead();
 8001448:	f7ff ff93 	bl	8001372 <sensorRead>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <DHT11_allData+0xa0>)
 8001452:	801a      	strh	r2, [r3, #0]
		  TEMP = Temp_byte1;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <DHT11_allData+0x98>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <DHT11_allData+0xa4>)
 800145c:	801a      	strh	r2, [r3, #0]
		  RH = Rh_byte1;
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <DHT11_allData+0x90>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <DHT11_allData+0xa8>)
 8001466:	801a      	strh	r2, [r3, #0]
		  Temperature = (float) TEMP;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <DHT11_allData+0xa4>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <DHT11_allData+0xac>)
 8001476:	edc3 7a00 	vstr	s15, [r3]
		  Humidity = (float) RH;
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <DHT11_allData+0xa8>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <DHT11_allData+0xb0>)
 8001488:	edc3 7a00 	vstr	s15, [r3]
	}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000226 	.word	0x20000226
 8001494:	2000021c 	.word	0x2000021c
 8001498:	2000021d 	.word	0x2000021d
 800149c:	2000021e 	.word	0x2000021e
 80014a0:	2000021f 	.word	0x2000021f
 80014a4:	20000220 	.word	0x20000220
 80014a8:	20000224 	.word	0x20000224
 80014ac:	20000222 	.word	0x20000222
 80014b0:	20000228 	.word	0x20000228
 80014b4:	2000022c 	.word	0x2000022c

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x44>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x44>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x44>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x44>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x44>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ee:	2007      	movs	r0, #7
 80014f0:	f000 fc32 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f000 fb14 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM2_IRQHandler+0x10>)
 800155a:	f002 fe4b 	bl	80041f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200002a8 	.word	0x200002a8

08001568 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800156c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001570:	f000 fdd6 	bl	8002120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM6_DAC1_IRQHandler+0x10>)
 800157e:	f002 fe39 	bl	80041f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200002f4 	.word	0x200002f4

0800158c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	return 1;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_kill>:

int _kill(int pid, int sig)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015a6:	f003 fd07 	bl	8004fb8 <__errno>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2216      	movs	r2, #22
 80015ae:	601a      	str	r2, [r3, #0]
	return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_exit>:

void _exit (int status)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ffe7 	bl	800159c <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ce:	e7fe      	b.n	80015ce <_exit+0x12>

080015d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e00a      	b.n	80015f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015e2:	f3af 8000 	nop.w
 80015e6:	4601      	mov	r1, r0
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	b2ca      	uxtb	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf0      	blt.n	80015e2 <_read+0x12>
	}

return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e009      	b.n	8001630 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbf1      	blt.n	800161c <_write+0x12>
	}
	return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_close>:

int _close(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
	return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166a:	605a      	str	r2, [r3, #4]
	return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_isatty>:

int _isatty(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	return 1;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
	return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f003 fc6c 	bl	8004fb8 <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	220c      	movs	r2, #12
 80016e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20003000 	.word	0x20003000
 800170c:	00000400 	.word	0x00000400
 8001710:	200002a4 	.word	0x200002a4
 8001714:	200003d8 	.word	0x200003d8

08001718 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <SystemInit+0x20>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <SystemInit+0x20>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_TIM2_Init+0x98>)
 800175c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001760:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_TIM2_Init+0x98>)
 8001764:	2247      	movs	r2, #71	; 0x47
 8001766:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_TIM2_Init+0x98>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967294;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_TIM2_Init+0x98>)
 8001770:	f06f 0201 	mvn.w	r2, #1
 8001774:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_TIM2_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_TIM2_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001782:	4814      	ldr	r0, [pc, #80]	; (80017d4 <MX_TIM2_Init+0x98>)
 8001784:	f002 fc2e 	bl	8003fe4 <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800178e:	f7ff fd60 	bl	8001252 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4619      	mov	r1, r3
 800179e:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MX_TIM2_Init+0x98>)
 80017a0:	f002 fe47 	bl	8004432 <HAL_TIM_ConfigClockSource>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017aa:	f7ff fd52 	bl	8001252 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <MX_TIM2_Init+0x98>)
 80017bc:	f003 f83c 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017c6:	f7ff fd44 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200002a8 	.word	0x200002a8

080017d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_TIM6_Init+0x68>)
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <MX_TIM6_Init+0x6c>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_TIM6_Init+0x68>)
 80017f0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80017f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_TIM6_Init+0x68>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_TIM6_Init+0x68>)
 80017fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001802:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_TIM6_Init+0x68>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <MX_TIM6_Init+0x68>)
 800180c:	f002 fbea 	bl	8003fe4 <HAL_TIM_Base_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001816:	f7ff fd1c 	bl	8001252 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	; (8001840 <MX_TIM6_Init+0x68>)
 8001828:	f003 f806 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001832:	f7ff fd0e 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002f4 	.word	0x200002f4
 8001844:	40001000 	.word	0x40001000

08001848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001858:	d114      	bne.n	8001884 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_TIM_Base_MspInit+0x78>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <HAL_TIM_Base_MspInit+0x78>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_TIM_Base_MspInit+0x78>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	201c      	movs	r0, #28
 8001878:	f000 fa79 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800187c:	201c      	movs	r0, #28
 800187e:	f000 fa92 	bl	8001da6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001882:	e018      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_TIM_Base_MspInit+0x7c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d113      	bne.n	80018b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_TIM_Base_MspInit+0x78>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_TIM_Base_MspInit+0x78>)
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	61d3      	str	r3, [r2, #28]
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_TIM_Base_MspInit+0x78>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2036      	movs	r0, #54	; 0x36
 80018ac:	f000 fa5f 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80018b0:	2036      	movs	r0, #54	; 0x36
 80018b2:	f000 fa78 	bl	8001da6 <HAL_NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40001000 	.word	0x40001000

080018c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018ce:	4a15      	ldr	r2, [pc, #84]	; (8001924 <MX_USART2_UART_Init+0x5c>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80018d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART2_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART2_UART_Init+0x58>)
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART2_UART_Init+0x58>)
 800190c:	f003 f820 	bl	8004950 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001916:	f7ff fc9c 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000340 	.word	0x20000340
 8001924:	40004400 	.word	0x40004400

08001928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_UART_MspInit+0x7c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d128      	bne.n	800199c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_UART_MspInit+0x80>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_UART_MspInit+0x80>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_UART_MspInit+0x80>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_UART_MspInit+0x80>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_UART_MspInit+0x80>)
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_UART_MspInit+0x80>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800197a:	230c      	movs	r3, #12
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f000 fa20 	bl	8001ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_TIM_PeriodElapsedCallback>:
	#include "lcd_i2c.h"


/*==========================================================================================*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	/*Przerwanie po upłynięciu tim6 równego 10000 cykli (po sekundzie) - zebranie danych z czujników*/
		if ((count == sensorRead_freq) || (count == 0)){
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80019b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d003      	beq.n	80019cc <HAL_TIM_PeriodElapsedCallback+0x20>
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d106      	bne.n	80019da <HAL_TIM_PeriodElapsedCallback+0x2e>
		//analogDeviceReadDMA();
		DHT11_allData();
 80019cc:	f7ff fd1a 	bl	8001404 <DHT11_allData>
		displayReadings(disp_No);
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fb09 	bl	8000fec <displayReadings>
		}
		count++; //Dodawaj jeden co sekundę do tego countera
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019e2:	6013      	str	r3, [r2, #0]
		if (count >= sensorRead_freq) count = 1; // Jeśli ilość sekund count jest większa od sensor_read_freq to zresetuj count do 1
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80019e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dc02      	bgt.n	80019fa <HAL_TIM_PeriodElapsedCallback+0x4e>
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
	}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000004 	.word	0x20000004
 8001a08:	20000254 	.word	0x20000254
 8001a0c:	20000000 	.word	0x20000000

08001a10 <HAL_GPIO_EXTI_Callback>:

/*Przerwanie na liniach 10-15, w tym przypadku to jest button na płytce Nucleo*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
		if(!(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))){
 8001a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1e:	480f      	ldr	r0, [pc, #60]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a20:	f000 fb4e 	bl	80020c0 <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d114      	bne.n	8001a54 <HAL_GPIO_EXTI_Callback+0x44>
		disp_No++;
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a32:	6013      	str	r3, [r2, #0]
		if (disp_No == numberOfDisplays) disp_No = 1;
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d102      	bne.n	8001a4a <HAL_GPIO_EXTI_Callback+0x3a>
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
		displayReadings(disp_No);
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff facc 	bl	8000fec <displayReadings>
//			lcd_display(&disp);
//			// delay_us(500000);
//			// displayReadings(disp_No);
//
//		}
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	48000800 	.word	0x48000800
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000006 	.word	0x20000006

08001a68 <delay_us>:



/*Milisekundowy delay na timerze, tim2 prescaler 72-1, brak przerwań przez tim2*/
void delay_us(uint32_t time){
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <delay_us+0x2c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8001a78:	bf00      	nop
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <delay_us+0x2c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d8f9      	bhi.n	8001a7a <delay_us+0x12>
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	200002a8 	.word	0x200002a8

08001a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9e:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <LoopForever+0xe>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab4:	4c0b      	ldr	r4, [pc, #44]	; (8001ae4 <LoopForever+0x16>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ac2:	f7ff fe29 	bl	8001718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f003 fa7d 	bl	8004fc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aca:	f7ff fb3b 	bl	8001144 <main>

08001ace <LoopForever>:

LoopForever:
    b LoopForever
 8001ace:	e7fe      	b.n	8001ace <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ad0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001adc:	080082ac 	.word	0x080082ac
  ldr r2, =_sbss
 8001ae0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ae4:	200003d8 	.word	0x200003d8

08001ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_2_IRQHandler>
	...

08001aec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_Init+0x28>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_Init+0x28>)
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 f92b 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f000 f808 	bl	8001b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b08:	f7ff fcd6 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000

08001b18 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x54>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x58>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f943 	bl	8001dc2 <HAL_SYSTICK_Config>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00e      	b.n	8001b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b0f      	cmp	r3, #15
 8001b4a:	d80a      	bhi.n	8001b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f000 f90b 	bl	8001d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b58:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <HAL_InitTick+0x5c>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000010 	.word	0x20000010
 8001b74:	2000000c 	.word	0x2000000c

08001b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000010 	.word	0x20000010
 8001b9c:	200003c4 	.word	0x200003c4

08001ba0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	200003c4 	.word	0x200003c4

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	; (8001c54 <__NVIC_EnableIRQ+0x38>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d24:	d301      	bcc.n	8001d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <SysTick_Config+0x40>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d32:	210f      	movs	r1, #15
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f7ff ff8e 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SysTick_Config+0x40>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SysTick_Config+0x40>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff29 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d80:	f7ff ff3e 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7ff ff8e 	bl	8001cac <NVIC_EncodePriority>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff5d 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff31 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffa2 	bl	8001d14 <SysTick_Config>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dea:	e14e      	b.n	800208a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8140 	beq.w	8002084 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d005      	beq.n	8001e1c <HAL_GPIO_Init+0x40>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d130      	bne.n	8001e7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e52:	2201      	movs	r2, #1
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	f003 0201 	and.w	r2, r3, #1
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d017      	beq.n	8001eba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d123      	bne.n	8001f0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	08da      	lsrs	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3208      	adds	r2, #8
 8001ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0203 	and.w	r2, r3, #3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 809a 	beq.w	8002084 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f50:	4b55      	ldr	r3, [pc, #340]	; (80020a8 <HAL_GPIO_Init+0x2cc>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a54      	ldr	r2, [pc, #336]	; (80020a8 <HAL_GPIO_Init+0x2cc>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b52      	ldr	r3, [pc, #328]	; (80020a8 <HAL_GPIO_Init+0x2cc>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f68:	4a50      	ldr	r2, [pc, #320]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f92:	d013      	beq.n	8001fbc <HAL_GPIO_Init+0x1e0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a46      	ldr	r2, [pc, #280]	; (80020b0 <HAL_GPIO_Init+0x2d4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_GPIO_Init+0x1dc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a45      	ldr	r2, [pc, #276]	; (80020b4 <HAL_GPIO_Init+0x2d8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <HAL_GPIO_Init+0x1d8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a44      	ldr	r2, [pc, #272]	; (80020b8 <HAL_GPIO_Init+0x2dc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d101      	bne.n	8001fb0 <HAL_GPIO_Init+0x1d4>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e006      	b.n	8001fbe <HAL_GPIO_Init+0x1e2>
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	e004      	b.n	8001fbe <HAL_GPIO_Init+0x1e2>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e002      	b.n	8001fbe <HAL_GPIO_Init+0x1e2>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_GPIO_Init+0x1e2>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	f002 0203 	and.w	r2, r2, #3
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	4093      	lsls	r3, r2
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fce:	4937      	ldr	r1, [pc, #220]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <HAL_GPIO_Init+0x2e0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <HAL_GPIO_Init+0x2e0>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_GPIO_Init+0x2e0>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800202a:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_GPIO_Init+0x2e0>)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_GPIO_Init+0x2e0>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43db      	mvns	r3, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002054:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_GPIO_Init+0x2e0>)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_GPIO_Init+0x2e0>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_GPIO_Init+0x2e0>)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	f47f aea9 	bne.w	8001dec <HAL_GPIO_Init+0x10>
  }
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	48000400 	.word	0x48000400
 80020b4:	48000800 	.word	0x48000800
 80020b8:	48000c00 	.word	0x48000c00
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e001      	b.n	80020e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800210c:	e002      	b.n	8002114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d006      	beq.n	8002144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc66 	bl	8001a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e081      	b.n	8002266 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fdde 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	; 0x24
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	e006      	b.n	80021d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d104      	bne.n	80021ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69d9      	ldr	r1, [r3, #28]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	461a      	mov	r2, r3
 800227c:	460b      	mov	r3, r1
 800227e:	817b      	strh	r3, [r7, #10]
 8002280:	4613      	mov	r3, r2
 8002282:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b20      	cmp	r3, #32
 800228e:	f040 80da 	bne.w	8002446 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_I2C_Master_Transmit+0x30>
 800229c:	2302      	movs	r3, #2
 800229e:	e0d3      	b.n	8002448 <HAL_I2C_Master_Transmit+0x1d8>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022a8:	f7ff fc7a 	bl	8001ba0 <HAL_GetTick>
 80022ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2319      	movs	r3, #25
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f8f0 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0be      	b.n	8002448 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2221      	movs	r2, #33	; 0x21
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2210      	movs	r2, #16
 80022d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2bff      	cmp	r3, #255	; 0xff
 80022fa:	d90e      	bls.n	800231a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	b2da      	uxtb	r2, r3
 8002308:	8979      	ldrh	r1, [r7, #10]
 800230a:	4b51      	ldr	r3, [pc, #324]	; (8002450 <HAL_I2C_Master_Transmit+0x1e0>)
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f9f6 	bl	8002704 <I2C_TransferConfig>
 8002318:	e06c      	b.n	80023f4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	b2da      	uxtb	r2, r3
 800232a:	8979      	ldrh	r1, [r7, #10]
 800232c:	4b48      	ldr	r3, [pc, #288]	; (8002450 <HAL_I2C_Master_Transmit+0x1e0>)
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f9e5 	bl	8002704 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800233a:	e05b      	b.n	80023f4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	6a39      	ldr	r1, [r7, #32]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f8ed 	bl	8002520 <I2C_WaitOnTXISFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e07b      	b.n	8002448 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d034      	beq.n	80023f4 <HAL_I2C_Master_Transmit+0x184>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	2b00      	cmp	r3, #0
 8002390:	d130      	bne.n	80023f4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2200      	movs	r2, #0
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f87f 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e04d      	b.n	8002448 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2bff      	cmp	r3, #255	; 0xff
 80023b4:	d90e      	bls.n	80023d4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	22ff      	movs	r2, #255	; 0xff
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	8979      	ldrh	r1, [r7, #10]
 80023c4:	2300      	movs	r3, #0
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f999 	bl	8002704 <I2C_TransferConfig>
 80023d2:	e00f      	b.n	80023f4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	8979      	ldrh	r1, [r7, #10]
 80023e6:	2300      	movs	r3, #0
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f988 	bl	8002704 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d19e      	bne.n	800233c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	6a39      	ldr	r1, [r7, #32]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f8cc 	bl	80025a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e01a      	b.n	8002448 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2220      	movs	r2, #32
 8002418:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_I2C_Master_Transmit+0x1e4>)
 8002426:	400b      	ands	r3, r1
 8002428:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	80002000 	.word	0x80002000
 8002454:	fe00e800 	.word	0xfe00e800

08002458 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d103      	bne.n	8002476 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2200      	movs	r2, #0
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d007      	beq.n	8002494 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	619a      	str	r2, [r3, #24]
  }
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b0:	e022      	b.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d01e      	beq.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ba:	f7ff fb71 	bl	8001ba0 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d113      	bne.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e00f      	b.n	8002518 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4013      	ands	r3, r2
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	429a      	cmp	r2, r3
 8002514:	d0cd      	beq.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800252c:	e02c      	b.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f870 	bl	8002618 <I2C_IsAcknowledgeFailed>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e02a      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d01e      	beq.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7ff fb29 	bl	8001ba0 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d113      	bne.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f043 0220 	orr.w	r2, r3, #32
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e007      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d1cb      	bne.n	800252e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ac:	e028      	b.n	8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f830 	bl	8002618 <I2C_IsAcknowledgeFailed>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e026      	b.n	8002610 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7ff faed 	bl	8001ba0 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d113      	bne.n	8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f043 0220 	orr.w	r2, r3, #32
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e007      	b.n	8002610 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b20      	cmp	r3, #32
 800260c:	d1cf      	bne.n	80025ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b10      	cmp	r3, #16
 8002630:	d161      	bne.n	80026f6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002640:	d02b      	beq.n	800269a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002650:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002652:	e022      	b.n	800269a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265a:	d01e      	beq.n	800269a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265c:	f7ff faa0 	bl	8001ba0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	d302      	bcc.n	8002672 <I2C_IsAcknowledgeFailed+0x5a>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d113      	bne.n	800269a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f043 0220 	orr.w	r2, r3, #32
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e02e      	b.n	80026f8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d1d5      	bne.n	8002654 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2210      	movs	r2, #16
 80026ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2220      	movs	r2, #32
 80026b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff fecd 	bl	8002458 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <I2C_IsAcknowledgeFailed+0xe8>)
 80026ca:	400b      	ands	r3, r1
 80026cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f043 0204 	orr.w	r2, r3, #4
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	fe00e800 	.word	0xfe00e800

08002704 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	817b      	strh	r3, [r7, #10]
 8002712:	4613      	mov	r3, r2
 8002714:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	0d5b      	lsrs	r3, r3, #21
 8002720:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002724:	4b0d      	ldr	r3, [pc, #52]	; (800275c <I2C_TransferConfig+0x58>)
 8002726:	430b      	orrs	r3, r1
 8002728:	43db      	mvns	r3, r3
 800272a:	ea02 0103 	and.w	r1, r2, r3
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002734:	7a7b      	ldrb	r3, [r7, #9]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	431a      	orrs	r2, r3
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	431a      	orrs	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	03ff63ff 	.word	0x03ff63ff

08002760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b20      	cmp	r3, #32
 8002774:	d138      	bne.n	80027e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002780:	2302      	movs	r3, #2
 8002782:	e032      	b.n	80027ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	d139      	bne.n	8002880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002816:	2302      	movs	r3, #2
 8002818:	e033      	b.n	8002882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2224      	movs	r2, #36	; 0x24
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0201 	bic.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002896:	af00      	add	r7, sp, #0
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f001 b823 	b.w	80038fc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 817d 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028cc:	4bbc      	ldr	r3, [pc, #752]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d00c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d8:	4bb9      	ldr	r3, [pc, #740]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d15c      	bne.n	800299e <HAL_RCC_OscConfig+0x10e>
 80028e4:	4bb6      	ldr	r3, [pc, #728]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d155      	bne.n	800299e <HAL_RCC_OscConfig+0x10e>
 80028f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002906:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d102      	bne.n	8002924 <HAL_RCC_OscConfig+0x94>
 800291e:	4ba8      	ldr	r3, [pc, #672]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	e015      	b.n	8002950 <HAL_RCC_OscConfig+0xc0>
 8002924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002928:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002940:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800294c:	4b9c      	ldr	r3, [pc, #624]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002954:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002958:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800295c:	fa92 f2a2 	rbit	r2, r2
 8002960:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002964:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002968:	fab2 f282 	clz	r2, r2
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f042 0220 	orr.w	r2, r2, #32
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	f002 021f 	and.w	r2, r2, #31
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f202 	lsl.w	r2, r1, r2
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 811f 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x334>
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 8116 	bne.w	8002bc4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	f000 bfaf 	b.w	80038fc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x12e>
 80029b0:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a82      	ldr	r2, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e036      	b.n	8002a2c <HAL_RCC_OscConfig+0x19c>
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x158>
 80029ce:	4b7c      	ldr	r3, [pc, #496]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7b      	ldr	r2, [pc, #492]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b79      	ldr	r3, [pc, #484]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a78      	ldr	r2, [pc, #480]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80029e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e021      	b.n	8002a2c <HAL_RCC_OscConfig+0x19c>
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x184>
 80029fa:	4b71      	ldr	r3, [pc, #452]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a70      	ldr	r2, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b6e      	ldr	r3, [pc, #440]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6d      	ldr	r2, [pc, #436]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0x19c>
 8002a14:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a69      	ldr	r2, [pc, #420]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a66      	ldr	r2, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a2c:	4b64      	ldr	r3, [pc, #400]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	f023 020f 	bic.w	r2, r3, #15
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	495f      	ldr	r1, [pc, #380]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d059      	beq.n	8002b0a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7ff f8a3 	bl	8001ba0 <HAL_GetTick>
 8002a5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7ff f89e 	bl	8001ba0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d902      	bls.n	8002a76 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	f000 bf43 	b.w	80038fc <HAL_RCC_OscConfig+0x106c>
 8002a76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x218>
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	e015      	b.n	8002ad4 <HAL_RCC_OscConfig+0x244>
 8002aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ac0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ac4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ad0:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ad8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002adc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ae8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	f042 0220 	orr.w	r2, r2, #32
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f002 021f 	and.w	r2, r2, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f202 	lsl.w	r2, r1, r2
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ab      	beq.n	8002a60 <HAL_RCC_OscConfig+0x1d0>
 8002b08:	e05d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7ff f849 	bl	8001ba0 <HAL_GetTick>
 8002b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff f844 	bl	8001ba0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	; 0x64
 8002b22:	d902      	bls.n	8002b2a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	f000 bee9 	b.w	80038fc <HAL_RCC_OscConfig+0x106c>
 8002b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b2e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d102      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2cc>
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	e015      	b.n	8002b88 <HAL_RCC_OscConfig+0x2f8>
 8002b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b60:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b74:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_RCC_OscConfig+0x330>)
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b8c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b90:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b94:	fa92 f2a2 	rbit	r2, r2
 8002b98:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b9c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f042 0220 	orr.w	r2, r2, #32
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f002 021f 	and.w	r2, r2, #31
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ab      	bne.n	8002b14 <HAL_RCC_OscConfig+0x284>
 8002bbc:	e003      	b.n	8002bc6 <HAL_RCC_OscConfig+0x336>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 817d 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bdc:	4ba6      	ldr	r3, [pc, #664]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002be8:	4ba3      	ldr	r3, [pc, #652]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d172      	bne.n	8002cda <HAL_RCC_OscConfig+0x44a>
 8002bf4:	4ba0      	ldr	r3, [pc, #640]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d16c      	bne.n	8002cda <HAL_RCC_OscConfig+0x44a>
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c12:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_OscConfig+0x3a0>
 8002c2a:	4b93      	ldr	r3, [pc, #588]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	e013      	b.n	8002c58 <HAL_RCC_OscConfig+0x3c8>
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c42:	2302      	movs	r3, #2
 8002c44:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c54:	4b88      	ldr	r3, [pc, #544]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c5e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c62:	fa92 f2a2 	rbit	r2, r2
 8002c66:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c6a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c6e:	fab2 f282 	clz	r2, r2
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f042 0220 	orr.w	r2, r2, #32
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f002 021f 	and.w	r2, r2, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x410>
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d002      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f000 be2e 	b.w	80038fc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca0:	4b75      	ldr	r3, [pc, #468]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	21f8      	movs	r1, #248	; 0xf8
 8002cb6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cbe:	fa91 f1a1 	rbit	r1, r1
 8002cc2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002cc6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002cca:	fab1 f181 	clz	r1, r1
 8002cce:	b2c9      	uxtb	r1, r1
 8002cd0:	408b      	lsls	r3, r1
 8002cd2:	4969      	ldr	r1, [pc, #420]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd8:	e0fd      	b.n	8002ed6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8088 	beq.w	8002dfc <HAL_RCC_OscConfig+0x56c>
 8002cec:	2301      	movs	r3, #1
 8002cee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002cfe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	461a      	mov	r2, r3
 8002d14:	2301      	movs	r3, #1
 8002d16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe ff42 	bl	8001ba0 <HAL_GetTick>
 8002d1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d22:	f7fe ff3d 	bl	8001ba0 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	f000 bde2 	b.w	80038fc <HAL_RCC_OscConfig+0x106c>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4d8>
 8002d62:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	e013      	b.n	8002d90 <HAL_RCC_OscConfig+0x500>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2202      	movs	r2, #2
 8002d92:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d9a:	fa92 f2a2 	rbit	r2, r2
 8002d9e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002da2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002da6:	fab2 f282 	clz	r2, r2
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f042 0220 	orr.w	r2, r2, #32
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	f002 021f 	and.w	r2, r2, #31
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0af      	beq.n	8002d22 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	21f8      	movs	r1, #248	; 0xf8
 8002dd8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002de0:	fa91 f1a1 	rbit	r1, r1
 8002de4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002de8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002dec:	fab1 f181 	clz	r1, r1
 8002df0:	b2c9      	uxtb	r1, r1
 8002df2:	408b      	lsls	r3, r1
 8002df4:	4920      	ldr	r1, [pc, #128]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]
 8002dfa:	e06c      	b.n	8002ed6 <HAL_RCC_OscConfig+0x646>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe feba 	bl	8001ba0 <HAL_GetTick>
 8002e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e32:	f7fe feb5 	bl	8001ba0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	f000 bd5a 	b.w	80038fc <HAL_RCC_OscConfig+0x106c>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d104      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5ec>
 8002e72:	4b01      	ldr	r3, [pc, #4]	; (8002e78 <HAL_RCC_OscConfig+0x5e8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e015      	b.n	8002ea4 <HAL_RCC_OscConfig+0x614>
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e8e:	2302      	movs	r3, #2
 8002e90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ea0:	4bc8      	ldr	r3, [pc, #800]	; (80031c4 <HAL_RCC_OscConfig+0x934>)
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002eaa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002eae:	fa92 f2a2 	rbit	r2, r2
 8002eb2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002eb6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002eba:	fab2 f282 	clz	r2, r2
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	f042 0220 	orr.w	r2, r2, #32
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	f002 021f 	and.w	r2, r2, #31
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1ad      	bne.n	8002e32 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8110 	beq.w	800310c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d079      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x760>
 8002efc:	2301      	movs	r3, #1
 8002efe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4bab      	ldr	r3, [pc, #684]	; (80031c8 <HAL_RCC_OscConfig+0x938>)
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	461a      	mov	r2, r3
 8002f22:	2301      	movs	r3, #1
 8002f24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fe3b 	bl	8001ba0 <HAL_GetTick>
 8002f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe fe36 	bl	8001ba0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d902      	bls.n	8002f46 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	f000 bcdb 	b.w	80038fc <HAL_RCC_OscConfig+0x106c>
 8002f46:	2302      	movs	r3, #2
 8002f48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f60:	2202      	movs	r2, #2
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f84:	2202      	movs	r2, #2
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	fa93 f2a3 	rbit	r2, r3
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa0:	4b88      	ldr	r3, [pc, #544]	; (80031c4 <HAL_RCC_OscConfig+0x934>)
 8002fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fac:	2102      	movs	r1, #2
 8002fae:	6019      	str	r1, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f1a3 	rbit	r1, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fc6:	6019      	str	r1, [r3, #0]
  return result;
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0a0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x6a0>
 8002fee:	e08d      	b.n	800310c <HAL_RCC_OscConfig+0x87c>
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	fa93 f2a3 	rbit	r2, r3
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003012:	601a      	str	r2, [r3, #0]
  return result;
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800301c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <HAL_RCC_OscConfig+0x938>)
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	461a      	mov	r2, r3
 800302e:	2300      	movs	r3, #0
 8003030:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fe fdb5 	bl	8001ba0 <HAL_GetTick>
 8003036:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303c:	f7fe fdb0 	bl	8001ba0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d902      	bls.n	8003052 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	f000 bc55 	b.w	80038fc <HAL_RCC_OscConfig+0x106c>
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800307e:	2202      	movs	r2, #2
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030a2:	2202      	movs	r2, #2
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fa93 f2a3 	rbit	r2, r3
 80030b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030be:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_RCC_OscConfig+0x934>)
 80030c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030ca:	2102      	movs	r1, #2
 80030cc:	6019      	str	r1, [r3, #0]
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fa93 f1a3 	rbit	r1, r3
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030e4:	6019      	str	r1, [r3, #0]
  return result;
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2101      	movs	r1, #1
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d197      	bne.n	800303c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 81a1 	beq.w	8003464 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003128:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_RCC_OscConfig+0x934>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d116      	bne.n	8003162 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <HAL_RCC_OscConfig+0x934>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_RCC_OscConfig+0x934>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	61d3      	str	r3, [r2, #28]
 8003140:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <HAL_RCC_OscConfig+0x934>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800315a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <HAL_RCC_OscConfig+0x93c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d11a      	bne.n	80031a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_RCC_OscConfig+0x93c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a16      	ldr	r2, [pc, #88]	; (80031cc <HAL_RCC_OscConfig+0x93c>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003178:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317a:	f7fe fd11 	bl	8001ba0 <HAL_GetTick>
 800317e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003182:	e009      	b.n	8003198 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003184:	f7fe fd0c 	bl	8001ba0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e3b1      	b.n	80038fc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_RCC_OscConfig+0x93c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ef      	beq.n	8003184 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d10d      	bne.n	80031d0 <HAL_RCC_OscConfig+0x940>
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_RCC_OscConfig+0x934>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a02      	ldr	r2, [pc, #8]	; (80031c4 <HAL_RCC_OscConfig+0x934>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	e03c      	b.n	800323c <HAL_RCC_OscConfig+0x9ac>
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	10908120 	.word	0x10908120
 80031cc:	40007000 	.word	0x40007000
 80031d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10c      	bne.n	80031fa <HAL_RCC_OscConfig+0x96a>
 80031e0:	4bc1      	ldr	r3, [pc, #772]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4ac0      	ldr	r2, [pc, #768]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	6213      	str	r3, [r2, #32]
 80031ec:	4bbe      	ldr	r3, [pc, #760]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4abd      	ldr	r2, [pc, #756]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 80031f2:	f023 0304 	bic.w	r3, r3, #4
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	e020      	b.n	800323c <HAL_RCC_OscConfig+0x9ac>
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b05      	cmp	r3, #5
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x994>
 800320a:	4bb7      	ldr	r3, [pc, #732]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4ab6      	ldr	r2, [pc, #728]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	4bb4      	ldr	r3, [pc, #720]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4ab3      	ldr	r2, [pc, #716]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0x9ac>
 8003224:	4bb0      	ldr	r3, [pc, #704]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4aaf      	ldr	r2, [pc, #700]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	6213      	str	r3, [r2, #32]
 8003230:	4bad      	ldr	r3, [pc, #692]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4aac      	ldr	r2, [pc, #688]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 8003236:	f023 0304 	bic.w	r3, r3, #4
 800323a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8081 	beq.w	8003350 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fe fca7 	bl	8001ba0 <HAL_GetTick>
 8003252:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fe fca2 	bl	8001ba0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e345      	b.n	80038fc <HAL_RCC_OscConfig+0x106c>
 8003270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003274:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003278:	2202      	movs	r2, #2
 800327a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fa93 f2a3 	rbit	r2, r3
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800329c:	2202      	movs	r2, #2
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	fa93 f2a3 	rbit	r2, r3
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032b6:	601a      	str	r2, [r3, #0]
  return result;
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d102      	bne.n	80032dc <HAL_RCC_OscConfig+0xa4c>
 80032d6:	4b84      	ldr	r3, [pc, #528]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	e013      	b.n	8003304 <HAL_RCC_OscConfig+0xa74>
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032e4:	2202      	movs	r2, #2
 80032e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	fa93 f2a3 	rbit	r2, r3
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	4b79      	ldr	r3, [pc, #484]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003308:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800330c:	2102      	movs	r1, #2
 800330e:	6011      	str	r1, [r2, #0]
 8003310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003314:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	fa92 f1a2 	rbit	r1, r2
 800331e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003322:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003326:	6011      	str	r1, [r2, #0]
  return result;
 8003328:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800332c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	fab2 f282 	clz	r2, r2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d084      	beq.n	8003258 <HAL_RCC_OscConfig+0x9c8>
 800334e:	e07f      	b.n	8003450 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003350:	f7fe fc26 	bl	8001ba0 <HAL_GetTick>
 8003354:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe fc21 	bl	8001ba0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e2c4      	b.n	80038fc <HAL_RCC_OscConfig+0x106c>
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800337a:	2202      	movs	r2, #2
 800337c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800339e:	2202      	movs	r2, #2
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	fa93 f2a3 	rbit	r2, r3
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033b8:	601a      	str	r2, [r3, #0]
  return result;
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d102      	bne.n	80033de <HAL_RCC_OscConfig+0xb4e>
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	e013      	b.n	8003406 <HAL_RCC_OscConfig+0xb76>
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033e6:	2202      	movs	r2, #2
 80033e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fa93 f2a3 	rbit	r2, r3
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	4b39      	ldr	r3, [pc, #228]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800340e:	2102      	movs	r1, #2
 8003410:	6011      	str	r1, [r2, #0]
 8003412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003416:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	fa92 f1a2 	rbit	r1, r2
 8003420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003424:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003428:	6011      	str	r1, [r2, #0]
  return result;
 800342a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800342e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	fab2 f282 	clz	r2, r2
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f002 021f 	and.w	r2, r2, #31
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d184      	bne.n	800335a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003450:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003458:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 800345e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003462:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8242 	beq.w	80038fa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_RCC_OscConfig+0xc58>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	f000 8213 	beq.w	80038aa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	2b02      	cmp	r3, #2
 8003492:	f040 8162 	bne.w	800375a <HAL_RCC_OscConfig+0xeca>
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800349e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f2a3 	rbit	r2, r3
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034ba:	601a      	str	r2, [r3, #0]
  return result;
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	461a      	mov	r2, r3
 80034d8:	2300      	movs	r3, #0
 80034da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fb60 	bl	8001ba0 <HAL_GetTick>
 80034e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e4:	e00c      	b.n	8003500 <HAL_RCC_OscConfig+0xc70>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fe fb58 	bl	8001ba0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1fd      	b.n	80038fc <HAL_RCC_OscConfig+0x106c>
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	fa93 f2a3 	rbit	r2, r3
 800351c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003520:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003524:	601a      	str	r2, [r3, #0]
  return result;
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800352e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d102      	bne.n	800354a <HAL_RCC_OscConfig+0xcba>
 8003544:	4bb0      	ldr	r3, [pc, #704]	; (8003808 <HAL_RCC_OscConfig+0xf78>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	e027      	b.n	800359a <HAL_RCC_OscConfig+0xd0a>
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fa93 f2a3 	rbit	r2, r3
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	4b9c      	ldr	r3, [pc, #624]	; (8003808 <HAL_RCC_OscConfig+0xf78>)
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800359e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80035a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035a6:	6011      	str	r1, [r2, #0]
 80035a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	fa92 f1a2 	rbit	r1, r2
 80035b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035be:	6011      	str	r1, [r2, #0]
  return result;
 80035c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	f042 0220 	orr.w	r2, r2, #32
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	f002 021f 	and.w	r2, r2, #31
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d182      	bne.n	80034ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e6:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0xf78>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	430b      	orrs	r3, r1
 8003608:	497f      	ldr	r1, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0xf78>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800361a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003632:	601a      	str	r2, [r3, #0]
  return result;
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800363c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003648:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	461a      	mov	r2, r3
 8003650:	2301      	movs	r3, #1
 8003652:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe faa4 	bl	8001ba0 <HAL_GetTick>
 8003658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800365c:	e009      	b.n	8003672 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365e:	f7fe fa9f 	bl	8001ba0 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e144      	b.n	80038fc <HAL_RCC_OscConfig+0x106c>
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800367a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800367e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	fa93 f2a3 	rbit	r2, r3
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003696:	601a      	str	r2, [r3, #0]
  return result;
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d102      	bne.n	80036bc <HAL_RCC_OscConfig+0xe2c>
 80036b6:	4b54      	ldr	r3, [pc, #336]	; (8003808 <HAL_RCC_OscConfig+0xf78>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	e027      	b.n	800370c <HAL_RCC_OscConfig+0xe7c>
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	fa93 f2a3 	rbit	r2, r3
 80036d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	fa93 f2a3 	rbit	r2, r3
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	4b3f      	ldr	r3, [pc, #252]	; (8003808 <HAL_RCC_OscConfig+0xf78>)
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003710:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003714:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003718:	6011      	str	r1, [r2, #0]
 800371a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800371e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	fa92 f1a2 	rbit	r1, r2
 8003728:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800372c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003730:	6011      	str	r1, [r2, #0]
  return result;
 8003732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003736:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	fab2 f282 	clz	r2, r2
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	f042 0220 	orr.w	r2, r2, #32
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	f002 021f 	and.w	r2, r2, #31
 800374c:	2101      	movs	r1, #1
 800374e:	fa01 f202 	lsl.w	r2, r1, r2
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d082      	beq.n	800365e <HAL_RCC_OscConfig+0xdce>
 8003758:	e0cf      	b.n	80038fa <HAL_RCC_OscConfig+0x106a>
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003762:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	fa93 f2a3 	rbit	r2, r3
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800377e:	601a      	str	r2, [r3, #0]
  return result;
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003788:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003794:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	461a      	mov	r2, r3
 800379c:	2300      	movs	r3, #0
 800379e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe f9fe 	bl	8001ba0 <HAL_GetTick>
 80037a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a8:	e009      	b.n	80037be <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fe f9f9 	bl	8001ba0 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e09e      	b.n	80038fc <HAL_RCC_OscConfig+0x106c>
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037e2:	601a      	str	r2, [r3, #0]
  return result;
 80037e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d104      	bne.n	800380c <HAL_RCC_OscConfig+0xf7c>
 8003802:	4b01      	ldr	r3, [pc, #4]	; (8003808 <HAL_RCC_OscConfig+0xf78>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	e029      	b.n	800385c <HAL_RCC_OscConfig+0xfcc>
 8003808:	40021000 	.word	0x40021000
 800380c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003810:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	fa93 f2a3 	rbit	r2, r3
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800383a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	fa93 f2a3 	rbit	r2, r3
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <HAL_RCC_OscConfig+0x1078>)
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003860:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003864:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003868:	6011      	str	r1, [r2, #0]
 800386a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800386e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	fa92 f1a2 	rbit	r1, r2
 8003878:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800387c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003880:	6011      	str	r1, [r2, #0]
  return result;
 8003882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003886:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	fab2 f282 	clz	r2, r2
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	f042 0220 	orr.w	r2, r2, #32
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	f002 021f 	and.w	r2, r2, #31
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f202 	lsl.w	r2, r1, r2
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d180      	bne.n	80037aa <HAL_RCC_OscConfig+0xf1a>
 80038a8:	e027      	b.n	80038fa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e01e      	b.n	80038fc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_RCC_OscConfig+0x1078>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d10b      	bne.n	80038f6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000

0800390c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b09e      	sub	sp, #120	; 0x78
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e162      	b.n	8003bea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b90      	ldr	r3, [pc, #576]	; (8003b68 <HAL_RCC_ClockConfig+0x25c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d910      	bls.n	8003954 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b8d      	ldr	r3, [pc, #564]	; (8003b68 <HAL_RCC_ClockConfig+0x25c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 0207 	bic.w	r2, r3, #7
 800393a:	498b      	ldr	r1, [pc, #556]	; (8003b68 <HAL_RCC_ClockConfig+0x25c>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b89      	ldr	r3, [pc, #548]	; (8003b68 <HAL_RCC_ClockConfig+0x25c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e14a      	b.n	8003bea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b82      	ldr	r3, [pc, #520]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	497f      	ldr	r1, [pc, #508]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80dc 	beq.w	8003b38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d13c      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xf6>
 8003988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800398c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d102      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xa6>
 80039ac:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	e00f      	b.n	80039d2 <HAL_RCC_ClockConfig+0xc6>
 80039b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	667b      	str	r3, [r7, #100]	; 0x64
 80039c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c4:	663b      	str	r3, [r7, #96]	; 0x60
 80039c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80039d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039da:	fa92 f2a2 	rbit	r2, r2
 80039de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039e2:	fab2 f282 	clz	r2, r2
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	f042 0220 	orr.w	r2, r2, #32
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	f002 021f 	and.w	r2, r2, #31
 80039f2:	2101      	movs	r1, #1
 80039f4:	fa01 f202 	lsl.w	r2, r1, r2
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d17b      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0f3      	b.n	8003bea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d13c      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x178>
 8003a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d102      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x128>
 8003a2e:	4b4f      	ldr	r3, [pc, #316]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	e00f      	b.n	8003a54 <HAL_RCC_ClockConfig+0x148>
 8003a34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	647b      	str	r3, [r7, #68]	; 0x44
 8003a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
 8003a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a50:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a58:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a5c:	fa92 f2a2 	rbit	r2, r2
 8003a60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a64:	fab2 f282 	clz	r2, r2
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	f042 0220 	orr.w	r2, r2, #32
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	f002 021f 	and.w	r2, r2, #31
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d13a      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0b2      	b.n	8003bea <HAL_RCC_ClockConfig+0x2de>
 8003a84:	2302      	movs	r3, #2
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_RCC_ClockConfig+0x1a0>
 8003aa6:	4b31      	ldr	r3, [pc, #196]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	e00d      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1bc>
 8003aac:	2302      	movs	r3, #2
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab8:	2302      	movs	r3, #2
 8003aba:	623b      	str	r3, [r7, #32]
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	2202      	movs	r2, #2
 8003aca:	61ba      	str	r2, [r7, #24]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	fa92 f2a2 	rbit	r2, r2
 8003ad2:	617a      	str	r2, [r7, #20]
  return result;
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	fab2 f282 	clz	r2, r2
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	f042 0220 	orr.w	r2, r2, #32
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f002 021f 	and.w	r2, r2, #31
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e079      	b.n	8003bea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f023 0203 	bic.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	491a      	ldr	r1, [pc, #104]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b08:	f7fe f84a 	bl	8001ba0 <HAL_GetTick>
 8003b0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b10:	f7fe f846 	bl	8001ba0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e061      	b.n	8003bea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_RCC_ClockConfig+0x260>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 020c 	and.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1eb      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_ClockConfig+0x25c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d214      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_RCC_ClockConfig+0x25c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 0207 	bic.w	r2, r3, #7
 8003b4e:	4906      	ldr	r1, [pc, #24]	; (8003b68 <HAL_RCC_ClockConfig+0x25c>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <HAL_RCC_ClockConfig+0x25c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e040      	b.n	8003bea <HAL_RCC_ClockConfig+0x2de>
 8003b68:	40022000 	.word	0x40022000
 8003b6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	491a      	ldr	r1, [pc, #104]	; (8003bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b9a:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4912      	ldr	r1, [pc, #72]	; (8003bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bae:	f000 f829 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bbc:	22f0      	movs	r2, #240	; 0xf0
 8003bbe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	fa92 f2a2 	rbit	r2, r2
 8003bc6:	60fa      	str	r2, [r7, #12]
  return result;
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	fab2 f282 	clz	r2, r2
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	40d3      	lsrs	r3, r2
 8003bd2:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x2ec>)
 8003bd4:	5cd3      	ldrb	r3, [r2, r3]
 8003bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bda:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <HAL_RCC_ClockConfig+0x2f0>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCC_ClockConfig+0x2f4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd ff98 	bl	8001b18 <HAL_InitTick>
  
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3778      	adds	r7, #120	; 0x78
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	08007e90 	.word	0x08007e90
 8003bfc:	20000008 	.word	0x20000008
 8003c00:	2000000c 	.word	0x2000000c

08003c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b08b      	sub	sp, #44	; 0x2c
 8003c08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c1e:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x30>
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x36>
 8003c32:	e03c      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c34:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c36:	623b      	str	r3, [r7, #32]
      break;
 8003c38:	e03c      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	fa92 f2a2 	rbit	r2, r2
 8003c4c:	607a      	str	r2, [r7, #4]
  return result;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	fab2 f282 	clz	r2, r2
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	40d3      	lsrs	r3, r2
 8003c58:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c5e:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	220f      	movs	r2, #15
 8003c68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	fa92 f2a2 	rbit	r2, r2
 8003c70:	60fa      	str	r2, [r7, #12]
  return result;
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	fab2 f282 	clz	r2, r2
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	40d3      	lsrs	r3, r2
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c7e:	5cd3      	ldrb	r3, [r2, r3]
 8003c80:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c8c:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9c:	e004      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	623b      	str	r3, [r7, #32]
      break;
 8003cac:	e002      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cb0:	623b      	str	r3, [r7, #32]
      break;
 8003cb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	372c      	adds	r7, #44	; 0x2c
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	007a1200 	.word	0x007a1200
 8003ccc:	08007ea8 	.word	0x08007ea8
 8003cd0:	08007eb8 	.word	0x08007eb8
 8003cd4:	003d0900 	.word	0x003d0900

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000008 	.word	0x20000008

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003cf6:	f7ff ffef 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	fa92 f2a2 	rbit	r2, r2
 8003d10:	603a      	str	r2, [r7, #0]
  return result;
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	fab2 f282 	clz	r2, r2
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	40d3      	lsrs	r3, r2
 8003d1c:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d1e:	5cd3      	ldrb	r3, [r2, r3]
 8003d20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	08007ea0 	.word	0x08007ea0

08003d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d3a:	f7ff ffcd 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d3e:	4601      	mov	r1, r0
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	fa92 f2a2 	rbit	r2, r2
 8003d54:	603a      	str	r2, [r7, #0]
  return result;
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	fab2 f282 	clz	r2, r2
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	40d3      	lsrs	r3, r2
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08007ea0 	.word	0x08007ea0

08003d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b092      	sub	sp, #72	; 0x48
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80cd 	beq.w	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9c:	4b8e      	ldr	r3, [pc, #568]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10e      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da8:	4b8b      	ldr	r3, [pc, #556]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	4a8a      	ldr	r2, [pc, #552]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db2:	61d3      	str	r3, [r2, #28]
 8003db4:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	4b85      	ldr	r3, [pc, #532]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d118      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd2:	4b82      	ldr	r3, [pc, #520]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a81      	ldr	r2, [pc, #516]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dde:	f7fd fedf 	bl	8001ba0 <HAL_GetTick>
 8003de2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	e008      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de6:	f7fd fedb 	bl	8001ba0 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b64      	cmp	r3, #100	; 0x64
 8003df2:	d901      	bls.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0ea      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	4b78      	ldr	r3, [pc, #480]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e04:	4b74      	ldr	r3, [pc, #464]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d07d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d076      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e22:	4b6d      	ldr	r3, [pc, #436]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b66      	ldr	r3, [pc, #408]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	fa93 f3a3 	rbit	r3, r3
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	4b5d      	ldr	r3, [pc, #372]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2300      	movs	r3, #0
 8003e72:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e74:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e78:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d045      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd fe8c 	bl	8001ba0 <HAL_GetTick>
 8003e88:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fd fe88 	bl	8001ba0 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e095      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	2302      	movs	r3, #2
 8003eb0:	623b      	str	r3, [r7, #32]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	61fb      	str	r3, [r7, #28]
  return result;
 8003eba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	fab3 f383 	clz	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f043 0302 	orr.w	r3, r3, #2
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ed0:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	e007      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	4b3d      	ldr	r3, [pc, #244]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	613a      	str	r2, [r7, #16]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	fa92 f2a2 	rbit	r2, r2
 8003ef0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	fab2 f282 	clz	r2, r2
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	f002 021f 	and.w	r2, r2, #31
 8003f04:	2101      	movs	r1, #1
 8003f06:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0bd      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f10:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	492e      	ldr	r1, [pc, #184]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	4a2a      	ldr	r2, [pc, #168]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f34:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f023 0203 	bic.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4922      	ldr	r1, [pc, #136]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	f023 0210 	bic.w	r2, r3, #16
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	491a      	ldr	r1, [pc, #104]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	4913      	ldr	r1, [pc, #76]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	490b      	ldr	r1, [pc, #44]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	4904      	ldr	r1, [pc, #16]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3748      	adds	r7, #72	; 0x48
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40007000 	.word	0x40007000
 8003fe0:	10908100 	.word	0x10908100

08003fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e049      	b.n	800408a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd fc1c 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 faf6 	bl	8004614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d001      	beq.n	80040ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e038      	b.n	800411e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1c      	ldr	r2, [pc, #112]	; (800412c <HAL_TIM_Base_Start+0x98>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_TIM_Base_Start+0x48>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c6:	d009      	beq.n	80040dc <HAL_TIM_Base_Start+0x48>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_TIM_Base_Start+0x9c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_Base_Start+0x48>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_TIM_Base_Start+0xa0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d115      	bne.n	8004108 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <HAL_TIM_Base_Start+0xa4>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d015      	beq.n	800411a <HAL_TIM_Base_Start+0x86>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d011      	beq.n	800411a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004106:	e008      	b.n	800411a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e000      	b.n	800411c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40000400 	.word	0x40000400
 8004134:	40014000 	.word	0x40014000
 8004138:	00010007 	.word	0x00010007

0800413c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d001      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e040      	b.n	80041d6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <HAL_TIM_Base_Start_IT+0xa8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x58>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417e:	d009      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x58>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a18      	ldr	r2, [pc, #96]	; (80041e8 <HAL_TIM_Base_Start_IT+0xac>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x58>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a17      	ldr	r2, [pc, #92]	; (80041ec <HAL_TIM_Base_Start_IT+0xb0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d115      	bne.n	80041c0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <HAL_TIM_Base_Start_IT+0xb4>)
 800419c:	4013      	ands	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	d015      	beq.n	80041d2 <HAL_TIM_Base_Start_IT+0x96>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d011      	beq.n	80041d2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041be:	e008      	b.n	80041d2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e000      	b.n	80041d4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40014000 	.word	0x40014000
 80041f0:	00010007 	.word	0x00010007

080041f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d122      	bne.n	8004250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b02      	cmp	r3, #2
 8004216:	d11b      	bne.n	8004250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0202 	mvn.w	r2, #2
 8004220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f9ce 	bl	80045d8 <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f9c0 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f9d1 	bl	80045ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d122      	bne.n	80042a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b04      	cmp	r3, #4
 800426a:	d11b      	bne.n	80042a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0204 	mvn.w	r2, #4
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f9a4 	bl	80045d8 <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f996 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f9a7 	bl	80045ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d122      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d11b      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0208 	mvn.w	r2, #8
 80042c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2204      	movs	r2, #4
 80042ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f97a 	bl	80045d8 <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f96c 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f97d 	bl	80045ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b10      	cmp	r3, #16
 8004304:	d122      	bne.n	800434c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b10      	cmp	r3, #16
 8004312:	d11b      	bne.n	800434c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0210 	mvn.w	r2, #16
 800431c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2208      	movs	r2, #8
 8004322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f950 	bl	80045d8 <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f942 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f953 	bl	80045ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b01      	cmp	r3, #1
 8004358:	d10e      	bne.n	8004378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d107      	bne.n	8004378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0201 	mvn.w	r2, #1
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd fb1a 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b80      	cmp	r3, #128	; 0x80
 8004384:	d10e      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004390:	2b80      	cmp	r3, #128	; 0x80
 8004392:	d107      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fac2 	bl	8004928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b2:	d10e      	bne.n	80043d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d107      	bne.n	80043d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fab5 	bl	800493c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d10e      	bne.n	80043fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	2b40      	cmp	r3, #64	; 0x40
 80043ec:	d107      	bne.n	80043fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f901 	bl	8004600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b20      	cmp	r3, #32
 800440a:	d10e      	bne.n	800442a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b20      	cmp	r3, #32
 8004418:	d107      	bne.n	800442a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f06f 0220 	mvn.w	r2, #32
 8004422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fa75 	bl	8004914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_TIM_ConfigClockSource+0x1c>
 800444a:	2302      	movs	r3, #2
 800444c:	e0b6      	b.n	80045bc <HAL_TIM_ConfigClockSource+0x18a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004470:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004478:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448a:	d03e      	beq.n	800450a <HAL_TIM_ConfigClockSource+0xd8>
 800448c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004490:	f200 8087 	bhi.w	80045a2 <HAL_TIM_ConfigClockSource+0x170>
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004498:	f000 8086 	beq.w	80045a8 <HAL_TIM_ConfigClockSource+0x176>
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a0:	d87f      	bhi.n	80045a2 <HAL_TIM_ConfigClockSource+0x170>
 80044a2:	2b70      	cmp	r3, #112	; 0x70
 80044a4:	d01a      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0xaa>
 80044a6:	2b70      	cmp	r3, #112	; 0x70
 80044a8:	d87b      	bhi.n	80045a2 <HAL_TIM_ConfigClockSource+0x170>
 80044aa:	2b60      	cmp	r3, #96	; 0x60
 80044ac:	d050      	beq.n	8004550 <HAL_TIM_ConfigClockSource+0x11e>
 80044ae:	2b60      	cmp	r3, #96	; 0x60
 80044b0:	d877      	bhi.n	80045a2 <HAL_TIM_ConfigClockSource+0x170>
 80044b2:	2b50      	cmp	r3, #80	; 0x50
 80044b4:	d03c      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0xfe>
 80044b6:	2b50      	cmp	r3, #80	; 0x50
 80044b8:	d873      	bhi.n	80045a2 <HAL_TIM_ConfigClockSource+0x170>
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	d058      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x13e>
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d86f      	bhi.n	80045a2 <HAL_TIM_ConfigClockSource+0x170>
 80044c2:	2b30      	cmp	r3, #48	; 0x30
 80044c4:	d064      	beq.n	8004590 <HAL_TIM_ConfigClockSource+0x15e>
 80044c6:	2b30      	cmp	r3, #48	; 0x30
 80044c8:	d86b      	bhi.n	80045a2 <HAL_TIM_ConfigClockSource+0x170>
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d060      	beq.n	8004590 <HAL_TIM_ConfigClockSource+0x15e>
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d867      	bhi.n	80045a2 <HAL_TIM_ConfigClockSource+0x170>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d05c      	beq.n	8004590 <HAL_TIM_ConfigClockSource+0x15e>
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d05a      	beq.n	8004590 <HAL_TIM_ConfigClockSource+0x15e>
 80044da:	e062      	b.n	80045a2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f000 f984 	bl	80047f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	609a      	str	r2, [r3, #8]
      break;
 8004508:	e04f      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6899      	ldr	r1, [r3, #8]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f000 f96d 	bl	80047f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800452c:	609a      	str	r2, [r3, #8]
      break;
 800452e:	e03c      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	461a      	mov	r2, r3
 800453e:	f000 f8e1 	bl	8004704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2150      	movs	r1, #80	; 0x50
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f93a 	bl	80047c2 <TIM_ITRx_SetConfig>
      break;
 800454e:	e02c      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	461a      	mov	r2, r3
 800455e:	f000 f900 	bl	8004762 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2160      	movs	r1, #96	; 0x60
 8004568:	4618      	mov	r0, r3
 800456a:	f000 f92a 	bl	80047c2 <TIM_ITRx_SetConfig>
      break;
 800456e:	e01c      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6859      	ldr	r1, [r3, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	461a      	mov	r2, r3
 800457e:	f000 f8c1 	bl	8004704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2140      	movs	r1, #64	; 0x40
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f91a 	bl	80047c2 <TIM_ITRx_SetConfig>
      break;
 800458e:	e00c      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 f911 	bl	80047c2 <TIM_ITRx_SetConfig>
      break;
 80045a0:	e003      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      break;
 80045a6:	e000      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a32      	ldr	r2, [pc, #200]	; (80046f0 <TIM_Base_SetConfig+0xdc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d007      	beq.n	800463c <TIM_Base_SetConfig+0x28>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d003      	beq.n	800463c <TIM_Base_SetConfig+0x28>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a2f      	ldr	r2, [pc, #188]	; (80046f4 <TIM_Base_SetConfig+0xe0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d108      	bne.n	800464e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a27      	ldr	r2, [pc, #156]	; (80046f0 <TIM_Base_SetConfig+0xdc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <TIM_Base_SetConfig+0x6a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d00f      	beq.n	800467e <TIM_Base_SetConfig+0x6a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a24      	ldr	r2, [pc, #144]	; (80046f4 <TIM_Base_SetConfig+0xe0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_Base_SetConfig+0x6a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a23      	ldr	r2, [pc, #140]	; (80046f8 <TIM_Base_SetConfig+0xe4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <TIM_Base_SetConfig+0x6a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a22      	ldr	r2, [pc, #136]	; (80046fc <TIM_Base_SetConfig+0xe8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_Base_SetConfig+0x6a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a21      	ldr	r2, [pc, #132]	; (8004700 <TIM_Base_SetConfig+0xec>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <TIM_Base_SetConfig+0xdc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00b      	beq.n	80046d4 <TIM_Base_SetConfig+0xc0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <TIM_Base_SetConfig+0xe4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <TIM_Base_SetConfig+0xc0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <TIM_Base_SetConfig+0xe8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_Base_SetConfig+0xc0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a0c      	ldr	r2, [pc, #48]	; (8004700 <TIM_Base_SetConfig+0xec>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d103      	bne.n	80046dc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	615a      	str	r2, [r3, #20]
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800

08004704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800472e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 030a 	bic.w	r3, r3, #10
 8004740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004762:	b480      	push	{r7}
 8004764:	b087      	sub	sp, #28
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0210 	bic.w	r2, r3, #16
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800478c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	031b      	lsls	r3, r3, #12
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800479e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	f043 0307 	orr.w	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	609a      	str	r2, [r3, #8]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	021a      	lsls	r2, r3, #8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	431a      	orrs	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4313      	orrs	r3, r2
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800484c:	2302      	movs	r3, #2
 800484e:	e054      	b.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a24      	ldr	r2, [pc, #144]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d108      	bne.n	800488c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004880:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a17      	ldr	r2, [pc, #92]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d009      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a13      	ldr	r2, [pc, #76]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a11      	ldr	r2, [pc, #68]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10c      	bne.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40000400 	.word	0x40000400
 8004910:	40014000 	.word	0x40014000

08004914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e040      	b.n	80049e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc ffd8 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2224      	movs	r2, #36	; 0x24
 800497c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f82c 	bl	80049ec <UART_SetConfig>
 8004994:	4603      	mov	r3, r0
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e022      	b.n	80049e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f956 	bl	8004c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f9dd 	bl	8004d9c <UART_CheckIdleState>
 80049e2:	4603      	mov	r3, r0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b8a      	ldr	r3, [pc, #552]	; (8004c40 <UART_SetConfig+0x254>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	6979      	ldr	r1, [r7, #20]
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a78      	ldr	r2, [pc, #480]	; (8004c44 <UART_SetConfig+0x258>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d120      	bne.n	8004aaa <UART_SetConfig+0xbe>
 8004a68:	4b77      	ldr	r3, [pc, #476]	; (8004c48 <UART_SetConfig+0x25c>)
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d817      	bhi.n	8004aa4 <UART_SetConfig+0xb8>
 8004a74:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0x90>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004a8d 	.word	0x08004a8d
 8004a80:	08004a99 	.word	0x08004a99
 8004a84:	08004a9f 	.word	0x08004a9f
 8004a88:	08004a93 	.word	0x08004a93
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e01d      	b.n	8004ace <UART_SetConfig+0xe2>
 8004a92:	2302      	movs	r3, #2
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e01a      	b.n	8004ace <UART_SetConfig+0xe2>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e017      	b.n	8004ace <UART_SetConfig+0xe2>
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e014      	b.n	8004ace <UART_SetConfig+0xe2>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e011      	b.n	8004ace <UART_SetConfig+0xe2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a67      	ldr	r2, [pc, #412]	; (8004c4c <UART_SetConfig+0x260>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d102      	bne.n	8004aba <UART_SetConfig+0xce>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e009      	b.n	8004ace <UART_SetConfig+0xe2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a64      	ldr	r2, [pc, #400]	; (8004c50 <UART_SetConfig+0x264>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d102      	bne.n	8004aca <UART_SetConfig+0xde>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e001      	b.n	8004ace <UART_SetConfig+0xe2>
 8004aca:	2310      	movs	r3, #16
 8004acc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad6:	d15b      	bne.n	8004b90 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004ad8:	7ffb      	ldrb	r3, [r7, #31]
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d827      	bhi.n	8004b2e <UART_SetConfig+0x142>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0xf8>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b2f 	.word	0x08004b2f
 8004af4:	08004b1f 	.word	0x08004b1f
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b2f 	.word	0x08004b2f
 8004b00:	08004b2f 	.word	0x08004b2f
 8004b04:	08004b27 	.word	0x08004b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7ff f8f2 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	61b8      	str	r0, [r7, #24]
        break;
 8004b0e:	e013      	b.n	8004b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b10:	f7ff f910 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 8004b14:	61b8      	str	r0, [r7, #24]
        break;
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b18:	4b4e      	ldr	r3, [pc, #312]	; (8004c54 <UART_SetConfig+0x268>)
 8004b1a:	61bb      	str	r3, [r7, #24]
        break;
 8004b1c:	e00c      	b.n	8004b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7ff f871 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8004b22:	61b8      	str	r0, [r7, #24]
        break;
 8004b24:	e008      	b.n	8004b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2a:	61bb      	str	r3, [r7, #24]
        break;
 8004b2c:	e004      	b.n	8004b38 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	77bb      	strb	r3, [r7, #30]
        break;
 8004b36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d074      	beq.n	8004c28 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	005a      	lsls	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	441a      	add	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b0f      	cmp	r3, #15
 8004b5a:	d916      	bls.n	8004b8a <UART_SetConfig+0x19e>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b62:	d212      	bcs.n	8004b8a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f023 030f 	bic.w	r3, r3, #15
 8004b6c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	89fa      	ldrh	r2, [r7, #14]
 8004b86:	60da      	str	r2, [r3, #12]
 8004b88:	e04e      	b.n	8004c28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	77bb      	strb	r3, [r7, #30]
 8004b8e:	e04b      	b.n	8004c28 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b90:	7ffb      	ldrb	r3, [r7, #31]
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d827      	bhi.n	8004be6 <UART_SetConfig+0x1fa>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x1b0>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004be7 	.word	0x08004be7
 8004bac:	08004bd7 	.word	0x08004bd7
 8004bb0:	08004be7 	.word	0x08004be7
 8004bb4:	08004be7 	.word	0x08004be7
 8004bb8:	08004be7 	.word	0x08004be7
 8004bbc:	08004bdf 	.word	0x08004bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc0:	f7ff f896 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8004bc4:	61b8      	str	r0, [r7, #24]
        break;
 8004bc6:	e013      	b.n	8004bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bc8:	f7ff f8b4 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 8004bcc:	61b8      	str	r0, [r7, #24]
        break;
 8004bce:	e00f      	b.n	8004bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <UART_SetConfig+0x268>)
 8004bd2:	61bb      	str	r3, [r7, #24]
        break;
 8004bd4:	e00c      	b.n	8004bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd6:	f7ff f815 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8004bda:	61b8      	str	r0, [r7, #24]
        break;
 8004bdc:	e008      	b.n	8004bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be2:	61bb      	str	r3, [r7, #24]
        break;
 8004be4:	e004      	b.n	8004bf0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	77bb      	strb	r3, [r7, #30]
        break;
 8004bee:	bf00      	nop
    }

    if (pclk != 0U)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d018      	beq.n	8004c28 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	085a      	lsrs	r2, r3, #1
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	441a      	add	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b0f      	cmp	r3, #15
 8004c10:	d908      	bls.n	8004c24 <UART_SetConfig+0x238>
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c18:	d204      	bcs.n	8004c24 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	e001      	b.n	8004c28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c34:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	efff69f3 	.word	0xefff69f3
 8004c44:	40013800 	.word	0x40013800
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40004400 	.word	0x40004400
 8004c50:	40004800 	.word	0x40004800
 8004c54:	007a1200 	.word	0x007a1200

08004c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d56:	d10a      	bne.n	8004d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dac:	f7fc fef8 	bl	8001ba0 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d10e      	bne.n	8004dde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f82d 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e023      	b.n	8004e26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d10e      	bne.n	8004e0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f817 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e00d      	b.n	8004e26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b09c      	sub	sp, #112	; 0x70
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3e:	e0a5      	b.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	f000 80a1 	beq.w	8004f8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fc fea9 	bl	8001ba0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d13e      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e74:	667b      	str	r3, [r7, #100]	; 0x64
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e6      	bne.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e5      	bne.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e067      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d04f      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efa:	d147      	bne.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
 8004f26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e6      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	613b      	str	r3, [r7, #16]
   return(result);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f58:	623a      	str	r2, [r7, #32]
 8004f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	69f9      	ldr	r1, [r7, #28]
 8004f5e:	6a3a      	ldr	r2, [r7, #32]
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e010      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	f43f af4a 	beq.w	8004e40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3770      	adds	r7, #112	; 0x70
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <__errno>:
 8004fb8:	4b01      	ldr	r3, [pc, #4]	; (8004fc0 <__errno+0x8>)
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000014 	.word	0x20000014

08004fc4 <__libc_init_array>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	4d0d      	ldr	r5, [pc, #52]	; (8004ffc <__libc_init_array+0x38>)
 8004fc8:	4c0d      	ldr	r4, [pc, #52]	; (8005000 <__libc_init_array+0x3c>)
 8004fca:	1b64      	subs	r4, r4, r5
 8004fcc:	10a4      	asrs	r4, r4, #2
 8004fce:	2600      	movs	r6, #0
 8004fd0:	42a6      	cmp	r6, r4
 8004fd2:	d109      	bne.n	8004fe8 <__libc_init_array+0x24>
 8004fd4:	4d0b      	ldr	r5, [pc, #44]	; (8005004 <__libc_init_array+0x40>)
 8004fd6:	4c0c      	ldr	r4, [pc, #48]	; (8005008 <__libc_init_array+0x44>)
 8004fd8:	f002 ff02 	bl	8007de0 <_init>
 8004fdc:	1b64      	subs	r4, r4, r5
 8004fde:	10a4      	asrs	r4, r4, #2
 8004fe0:	2600      	movs	r6, #0
 8004fe2:	42a6      	cmp	r6, r4
 8004fe4:	d105      	bne.n	8004ff2 <__libc_init_array+0x2e>
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fec:	4798      	blx	r3
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7ee      	b.n	8004fd0 <__libc_init_array+0xc>
 8004ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff6:	4798      	blx	r3
 8004ff8:	3601      	adds	r6, #1
 8004ffa:	e7f2      	b.n	8004fe2 <__libc_init_array+0x1e>
 8004ffc:	080082a4 	.word	0x080082a4
 8005000:	080082a4 	.word	0x080082a4
 8005004:	080082a4 	.word	0x080082a4
 8005008:	080082a8 	.word	0x080082a8

0800500c <memset>:
 800500c:	4402      	add	r2, r0
 800500e:	4603      	mov	r3, r0
 8005010:	4293      	cmp	r3, r2
 8005012:	d100      	bne.n	8005016 <memset+0xa>
 8005014:	4770      	bx	lr
 8005016:	f803 1b01 	strb.w	r1, [r3], #1
 800501a:	e7f9      	b.n	8005010 <memset+0x4>

0800501c <__cvt>:
 800501c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	ec55 4b10 	vmov	r4, r5, d0
 8005024:	2d00      	cmp	r5, #0
 8005026:	460e      	mov	r6, r1
 8005028:	4619      	mov	r1, r3
 800502a:	462b      	mov	r3, r5
 800502c:	bfbb      	ittet	lt
 800502e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005032:	461d      	movlt	r5, r3
 8005034:	2300      	movge	r3, #0
 8005036:	232d      	movlt	r3, #45	; 0x2d
 8005038:	700b      	strb	r3, [r1, #0]
 800503a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800503c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005040:	4691      	mov	r9, r2
 8005042:	f023 0820 	bic.w	r8, r3, #32
 8005046:	bfbc      	itt	lt
 8005048:	4622      	movlt	r2, r4
 800504a:	4614      	movlt	r4, r2
 800504c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005050:	d005      	beq.n	800505e <__cvt+0x42>
 8005052:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005056:	d100      	bne.n	800505a <__cvt+0x3e>
 8005058:	3601      	adds	r6, #1
 800505a:	2102      	movs	r1, #2
 800505c:	e000      	b.n	8005060 <__cvt+0x44>
 800505e:	2103      	movs	r1, #3
 8005060:	ab03      	add	r3, sp, #12
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	ab02      	add	r3, sp, #8
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	ec45 4b10 	vmov	d0, r4, r5
 800506c:	4653      	mov	r3, sl
 800506e:	4632      	mov	r2, r6
 8005070:	f000 fcea 	bl	8005a48 <_dtoa_r>
 8005074:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005078:	4607      	mov	r7, r0
 800507a:	d102      	bne.n	8005082 <__cvt+0x66>
 800507c:	f019 0f01 	tst.w	r9, #1
 8005080:	d022      	beq.n	80050c8 <__cvt+0xac>
 8005082:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005086:	eb07 0906 	add.w	r9, r7, r6
 800508a:	d110      	bne.n	80050ae <__cvt+0x92>
 800508c:	783b      	ldrb	r3, [r7, #0]
 800508e:	2b30      	cmp	r3, #48	; 0x30
 8005090:	d10a      	bne.n	80050a8 <__cvt+0x8c>
 8005092:	2200      	movs	r2, #0
 8005094:	2300      	movs	r3, #0
 8005096:	4620      	mov	r0, r4
 8005098:	4629      	mov	r1, r5
 800509a:	f7fb fd15 	bl	8000ac8 <__aeabi_dcmpeq>
 800509e:	b918      	cbnz	r0, 80050a8 <__cvt+0x8c>
 80050a0:	f1c6 0601 	rsb	r6, r6, #1
 80050a4:	f8ca 6000 	str.w	r6, [sl]
 80050a8:	f8da 3000 	ldr.w	r3, [sl]
 80050ac:	4499      	add	r9, r3
 80050ae:	2200      	movs	r2, #0
 80050b0:	2300      	movs	r3, #0
 80050b2:	4620      	mov	r0, r4
 80050b4:	4629      	mov	r1, r5
 80050b6:	f7fb fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80050ba:	b108      	cbz	r0, 80050c0 <__cvt+0xa4>
 80050bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80050c0:	2230      	movs	r2, #48	; 0x30
 80050c2:	9b03      	ldr	r3, [sp, #12]
 80050c4:	454b      	cmp	r3, r9
 80050c6:	d307      	bcc.n	80050d8 <__cvt+0xbc>
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050cc:	1bdb      	subs	r3, r3, r7
 80050ce:	4638      	mov	r0, r7
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	b004      	add	sp, #16
 80050d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d8:	1c59      	adds	r1, r3, #1
 80050da:	9103      	str	r1, [sp, #12]
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e7f0      	b.n	80050c2 <__cvt+0xa6>

080050e0 <__exponent>:
 80050e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050e2:	4603      	mov	r3, r0
 80050e4:	2900      	cmp	r1, #0
 80050e6:	bfb8      	it	lt
 80050e8:	4249      	neglt	r1, r1
 80050ea:	f803 2b02 	strb.w	r2, [r3], #2
 80050ee:	bfb4      	ite	lt
 80050f0:	222d      	movlt	r2, #45	; 0x2d
 80050f2:	222b      	movge	r2, #43	; 0x2b
 80050f4:	2909      	cmp	r1, #9
 80050f6:	7042      	strb	r2, [r0, #1]
 80050f8:	dd2a      	ble.n	8005150 <__exponent+0x70>
 80050fa:	f10d 0407 	add.w	r4, sp, #7
 80050fe:	46a4      	mov	ip, r4
 8005100:	270a      	movs	r7, #10
 8005102:	46a6      	mov	lr, r4
 8005104:	460a      	mov	r2, r1
 8005106:	fb91 f6f7 	sdiv	r6, r1, r7
 800510a:	fb07 1516 	mls	r5, r7, r6, r1
 800510e:	3530      	adds	r5, #48	; 0x30
 8005110:	2a63      	cmp	r2, #99	; 0x63
 8005112:	f104 34ff 	add.w	r4, r4, #4294967295
 8005116:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800511a:	4631      	mov	r1, r6
 800511c:	dcf1      	bgt.n	8005102 <__exponent+0x22>
 800511e:	3130      	adds	r1, #48	; 0x30
 8005120:	f1ae 0502 	sub.w	r5, lr, #2
 8005124:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005128:	1c44      	adds	r4, r0, #1
 800512a:	4629      	mov	r1, r5
 800512c:	4561      	cmp	r1, ip
 800512e:	d30a      	bcc.n	8005146 <__exponent+0x66>
 8005130:	f10d 0209 	add.w	r2, sp, #9
 8005134:	eba2 020e 	sub.w	r2, r2, lr
 8005138:	4565      	cmp	r5, ip
 800513a:	bf88      	it	hi
 800513c:	2200      	movhi	r2, #0
 800513e:	4413      	add	r3, r2
 8005140:	1a18      	subs	r0, r3, r0
 8005142:	b003      	add	sp, #12
 8005144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800514a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800514e:	e7ed      	b.n	800512c <__exponent+0x4c>
 8005150:	2330      	movs	r3, #48	; 0x30
 8005152:	3130      	adds	r1, #48	; 0x30
 8005154:	7083      	strb	r3, [r0, #2]
 8005156:	70c1      	strb	r1, [r0, #3]
 8005158:	1d03      	adds	r3, r0, #4
 800515a:	e7f1      	b.n	8005140 <__exponent+0x60>

0800515c <_printf_float>:
 800515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	ed2d 8b02 	vpush	{d8}
 8005164:	b08d      	sub	sp, #52	; 0x34
 8005166:	460c      	mov	r4, r1
 8005168:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800516c:	4616      	mov	r6, r2
 800516e:	461f      	mov	r7, r3
 8005170:	4605      	mov	r5, r0
 8005172:	f001 fa57 	bl	8006624 <_localeconv_r>
 8005176:	f8d0 a000 	ldr.w	sl, [r0]
 800517a:	4650      	mov	r0, sl
 800517c:	f7fb f828 	bl	80001d0 <strlen>
 8005180:	2300      	movs	r3, #0
 8005182:	930a      	str	r3, [sp, #40]	; 0x28
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	9305      	str	r3, [sp, #20]
 8005188:	f8d8 3000 	ldr.w	r3, [r8]
 800518c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005190:	3307      	adds	r3, #7
 8005192:	f023 0307 	bic.w	r3, r3, #7
 8005196:	f103 0208 	add.w	r2, r3, #8
 800519a:	f8c8 2000 	str.w	r2, [r8]
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80051aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051ae:	9307      	str	r3, [sp, #28]
 80051b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80051b4:	ee08 0a10 	vmov	s16, r0
 80051b8:	4b9f      	ldr	r3, [pc, #636]	; (8005438 <_printf_float+0x2dc>)
 80051ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051be:	f04f 32ff 	mov.w	r2, #4294967295
 80051c2:	f7fb fcb3 	bl	8000b2c <__aeabi_dcmpun>
 80051c6:	bb88      	cbnz	r0, 800522c <_printf_float+0xd0>
 80051c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051cc:	4b9a      	ldr	r3, [pc, #616]	; (8005438 <_printf_float+0x2dc>)
 80051ce:	f04f 32ff 	mov.w	r2, #4294967295
 80051d2:	f7fb fc8d 	bl	8000af0 <__aeabi_dcmple>
 80051d6:	bb48      	cbnz	r0, 800522c <_printf_float+0xd0>
 80051d8:	2200      	movs	r2, #0
 80051da:	2300      	movs	r3, #0
 80051dc:	4640      	mov	r0, r8
 80051de:	4649      	mov	r1, r9
 80051e0:	f7fb fc7c 	bl	8000adc <__aeabi_dcmplt>
 80051e4:	b110      	cbz	r0, 80051ec <_printf_float+0x90>
 80051e6:	232d      	movs	r3, #45	; 0x2d
 80051e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ec:	4b93      	ldr	r3, [pc, #588]	; (800543c <_printf_float+0x2e0>)
 80051ee:	4894      	ldr	r0, [pc, #592]	; (8005440 <_printf_float+0x2e4>)
 80051f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80051f4:	bf94      	ite	ls
 80051f6:	4698      	movls	r8, r3
 80051f8:	4680      	movhi	r8, r0
 80051fa:	2303      	movs	r3, #3
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	9b05      	ldr	r3, [sp, #20]
 8005200:	f023 0204 	bic.w	r2, r3, #4
 8005204:	6022      	str	r2, [r4, #0]
 8005206:	f04f 0900 	mov.w	r9, #0
 800520a:	9700      	str	r7, [sp, #0]
 800520c:	4633      	mov	r3, r6
 800520e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f9d8 	bl	80055c8 <_printf_common>
 8005218:	3001      	adds	r0, #1
 800521a:	f040 8090 	bne.w	800533e <_printf_float+0x1e2>
 800521e:	f04f 30ff 	mov.w	r0, #4294967295
 8005222:	b00d      	add	sp, #52	; 0x34
 8005224:	ecbd 8b02 	vpop	{d8}
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522c:	4642      	mov	r2, r8
 800522e:	464b      	mov	r3, r9
 8005230:	4640      	mov	r0, r8
 8005232:	4649      	mov	r1, r9
 8005234:	f7fb fc7a 	bl	8000b2c <__aeabi_dcmpun>
 8005238:	b140      	cbz	r0, 800524c <_printf_float+0xf0>
 800523a:	464b      	mov	r3, r9
 800523c:	2b00      	cmp	r3, #0
 800523e:	bfbc      	itt	lt
 8005240:	232d      	movlt	r3, #45	; 0x2d
 8005242:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005246:	487f      	ldr	r0, [pc, #508]	; (8005444 <_printf_float+0x2e8>)
 8005248:	4b7f      	ldr	r3, [pc, #508]	; (8005448 <_printf_float+0x2ec>)
 800524a:	e7d1      	b.n	80051f0 <_printf_float+0x94>
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005252:	9206      	str	r2, [sp, #24]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	d13f      	bne.n	80052d8 <_printf_float+0x17c>
 8005258:	2306      	movs	r3, #6
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	9b05      	ldr	r3, [sp, #20]
 800525e:	6861      	ldr	r1, [r4, #4]
 8005260:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005264:	2300      	movs	r3, #0
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	ab0a      	add	r3, sp, #40	; 0x28
 800526a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800526e:	ab09      	add	r3, sp, #36	; 0x24
 8005270:	ec49 8b10 	vmov	d0, r8, r9
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6022      	str	r2, [r4, #0]
 8005278:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800527c:	4628      	mov	r0, r5
 800527e:	f7ff fecd 	bl	800501c <__cvt>
 8005282:	9b06      	ldr	r3, [sp, #24]
 8005284:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005286:	2b47      	cmp	r3, #71	; 0x47
 8005288:	4680      	mov	r8, r0
 800528a:	d108      	bne.n	800529e <_printf_float+0x142>
 800528c:	1cc8      	adds	r0, r1, #3
 800528e:	db02      	blt.n	8005296 <_printf_float+0x13a>
 8005290:	6863      	ldr	r3, [r4, #4]
 8005292:	4299      	cmp	r1, r3
 8005294:	dd41      	ble.n	800531a <_printf_float+0x1be>
 8005296:	f1ab 0b02 	sub.w	fp, fp, #2
 800529a:	fa5f fb8b 	uxtb.w	fp, fp
 800529e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052a2:	d820      	bhi.n	80052e6 <_printf_float+0x18a>
 80052a4:	3901      	subs	r1, #1
 80052a6:	465a      	mov	r2, fp
 80052a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052ac:	9109      	str	r1, [sp, #36]	; 0x24
 80052ae:	f7ff ff17 	bl	80050e0 <__exponent>
 80052b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052b4:	1813      	adds	r3, r2, r0
 80052b6:	2a01      	cmp	r2, #1
 80052b8:	4681      	mov	r9, r0
 80052ba:	6123      	str	r3, [r4, #16]
 80052bc:	dc02      	bgt.n	80052c4 <_printf_float+0x168>
 80052be:	6822      	ldr	r2, [r4, #0]
 80052c0:	07d2      	lsls	r2, r2, #31
 80052c2:	d501      	bpl.n	80052c8 <_printf_float+0x16c>
 80052c4:	3301      	adds	r3, #1
 80052c6:	6123      	str	r3, [r4, #16]
 80052c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d09c      	beq.n	800520a <_printf_float+0xae>
 80052d0:	232d      	movs	r3, #45	; 0x2d
 80052d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d6:	e798      	b.n	800520a <_printf_float+0xae>
 80052d8:	9a06      	ldr	r2, [sp, #24]
 80052da:	2a47      	cmp	r2, #71	; 0x47
 80052dc:	d1be      	bne.n	800525c <_printf_float+0x100>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1bc      	bne.n	800525c <_printf_float+0x100>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e7b9      	b.n	800525a <_printf_float+0xfe>
 80052e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80052ea:	d118      	bne.n	800531e <_printf_float+0x1c2>
 80052ec:	2900      	cmp	r1, #0
 80052ee:	6863      	ldr	r3, [r4, #4]
 80052f0:	dd0b      	ble.n	800530a <_printf_float+0x1ae>
 80052f2:	6121      	str	r1, [r4, #16]
 80052f4:	b913      	cbnz	r3, 80052fc <_printf_float+0x1a0>
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	07d0      	lsls	r0, r2, #31
 80052fa:	d502      	bpl.n	8005302 <_printf_float+0x1a6>
 80052fc:	3301      	adds	r3, #1
 80052fe:	440b      	add	r3, r1
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	65a1      	str	r1, [r4, #88]	; 0x58
 8005304:	f04f 0900 	mov.w	r9, #0
 8005308:	e7de      	b.n	80052c8 <_printf_float+0x16c>
 800530a:	b913      	cbnz	r3, 8005312 <_printf_float+0x1b6>
 800530c:	6822      	ldr	r2, [r4, #0]
 800530e:	07d2      	lsls	r2, r2, #31
 8005310:	d501      	bpl.n	8005316 <_printf_float+0x1ba>
 8005312:	3302      	adds	r3, #2
 8005314:	e7f4      	b.n	8005300 <_printf_float+0x1a4>
 8005316:	2301      	movs	r3, #1
 8005318:	e7f2      	b.n	8005300 <_printf_float+0x1a4>
 800531a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800531e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005320:	4299      	cmp	r1, r3
 8005322:	db05      	blt.n	8005330 <_printf_float+0x1d4>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	6121      	str	r1, [r4, #16]
 8005328:	07d8      	lsls	r0, r3, #31
 800532a:	d5ea      	bpl.n	8005302 <_printf_float+0x1a6>
 800532c:	1c4b      	adds	r3, r1, #1
 800532e:	e7e7      	b.n	8005300 <_printf_float+0x1a4>
 8005330:	2900      	cmp	r1, #0
 8005332:	bfd4      	ite	le
 8005334:	f1c1 0202 	rsble	r2, r1, #2
 8005338:	2201      	movgt	r2, #1
 800533a:	4413      	add	r3, r2
 800533c:	e7e0      	b.n	8005300 <_printf_float+0x1a4>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	055a      	lsls	r2, r3, #21
 8005342:	d407      	bmi.n	8005354 <_printf_float+0x1f8>
 8005344:	6923      	ldr	r3, [r4, #16]
 8005346:	4642      	mov	r2, r8
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	d12c      	bne.n	80053ac <_printf_float+0x250>
 8005352:	e764      	b.n	800521e <_printf_float+0xc2>
 8005354:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005358:	f240 80e0 	bls.w	800551c <_printf_float+0x3c0>
 800535c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005360:	2200      	movs	r2, #0
 8005362:	2300      	movs	r3, #0
 8005364:	f7fb fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005368:	2800      	cmp	r0, #0
 800536a:	d034      	beq.n	80053d6 <_printf_float+0x27a>
 800536c:	4a37      	ldr	r2, [pc, #220]	; (800544c <_printf_float+0x2f0>)
 800536e:	2301      	movs	r3, #1
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	f43f af51 	beq.w	800521e <_printf_float+0xc2>
 800537c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005380:	429a      	cmp	r2, r3
 8005382:	db02      	blt.n	800538a <_printf_float+0x22e>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	07d8      	lsls	r0, r3, #31
 8005388:	d510      	bpl.n	80053ac <_printf_float+0x250>
 800538a:	ee18 3a10 	vmov	r3, s16
 800538e:	4652      	mov	r2, sl
 8005390:	4631      	mov	r1, r6
 8005392:	4628      	mov	r0, r5
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	f43f af41 	beq.w	800521e <_printf_float+0xc2>
 800539c:	f04f 0800 	mov.w	r8, #0
 80053a0:	f104 091a 	add.w	r9, r4, #26
 80053a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4543      	cmp	r3, r8
 80053aa:	dc09      	bgt.n	80053c0 <_printf_float+0x264>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	079b      	lsls	r3, r3, #30
 80053b0:	f100 8105 	bmi.w	80055be <_printf_float+0x462>
 80053b4:	68e0      	ldr	r0, [r4, #12]
 80053b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053b8:	4298      	cmp	r0, r3
 80053ba:	bfb8      	it	lt
 80053bc:	4618      	movlt	r0, r3
 80053be:	e730      	b.n	8005222 <_printf_float+0xc6>
 80053c0:	2301      	movs	r3, #1
 80053c2:	464a      	mov	r2, r9
 80053c4:	4631      	mov	r1, r6
 80053c6:	4628      	mov	r0, r5
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f af27 	beq.w	800521e <_printf_float+0xc2>
 80053d0:	f108 0801 	add.w	r8, r8, #1
 80053d4:	e7e6      	b.n	80053a4 <_printf_float+0x248>
 80053d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dc39      	bgt.n	8005450 <_printf_float+0x2f4>
 80053dc:	4a1b      	ldr	r2, [pc, #108]	; (800544c <_printf_float+0x2f0>)
 80053de:	2301      	movs	r3, #1
 80053e0:	4631      	mov	r1, r6
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	f43f af19 	beq.w	800521e <_printf_float+0xc2>
 80053ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053f0:	4313      	orrs	r3, r2
 80053f2:	d102      	bne.n	80053fa <_printf_float+0x29e>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	07d9      	lsls	r1, r3, #31
 80053f8:	d5d8      	bpl.n	80053ac <_printf_float+0x250>
 80053fa:	ee18 3a10 	vmov	r3, s16
 80053fe:	4652      	mov	r2, sl
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	f43f af09 	beq.w	800521e <_printf_float+0xc2>
 800540c:	f04f 0900 	mov.w	r9, #0
 8005410:	f104 0a1a 	add.w	sl, r4, #26
 8005414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005416:	425b      	negs	r3, r3
 8005418:	454b      	cmp	r3, r9
 800541a:	dc01      	bgt.n	8005420 <_printf_float+0x2c4>
 800541c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800541e:	e792      	b.n	8005346 <_printf_float+0x1ea>
 8005420:	2301      	movs	r3, #1
 8005422:	4652      	mov	r2, sl
 8005424:	4631      	mov	r1, r6
 8005426:	4628      	mov	r0, r5
 8005428:	47b8      	blx	r7
 800542a:	3001      	adds	r0, #1
 800542c:	f43f aef7 	beq.w	800521e <_printf_float+0xc2>
 8005430:	f109 0901 	add.w	r9, r9, #1
 8005434:	e7ee      	b.n	8005414 <_printf_float+0x2b8>
 8005436:	bf00      	nop
 8005438:	7fefffff 	.word	0x7fefffff
 800543c:	08007ecc 	.word	0x08007ecc
 8005440:	08007ed0 	.word	0x08007ed0
 8005444:	08007ed8 	.word	0x08007ed8
 8005448:	08007ed4 	.word	0x08007ed4
 800544c:	08007edc 	.word	0x08007edc
 8005450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005452:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005454:	429a      	cmp	r2, r3
 8005456:	bfa8      	it	ge
 8005458:	461a      	movge	r2, r3
 800545a:	2a00      	cmp	r2, #0
 800545c:	4691      	mov	r9, r2
 800545e:	dc37      	bgt.n	80054d0 <_printf_float+0x374>
 8005460:	f04f 0b00 	mov.w	fp, #0
 8005464:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005468:	f104 021a 	add.w	r2, r4, #26
 800546c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800546e:	9305      	str	r3, [sp, #20]
 8005470:	eba3 0309 	sub.w	r3, r3, r9
 8005474:	455b      	cmp	r3, fp
 8005476:	dc33      	bgt.n	80054e0 <_printf_float+0x384>
 8005478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800547c:	429a      	cmp	r2, r3
 800547e:	db3b      	blt.n	80054f8 <_printf_float+0x39c>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	07da      	lsls	r2, r3, #31
 8005484:	d438      	bmi.n	80054f8 <_printf_float+0x39c>
 8005486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005488:	9a05      	ldr	r2, [sp, #20]
 800548a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800548c:	1a9a      	subs	r2, r3, r2
 800548e:	eba3 0901 	sub.w	r9, r3, r1
 8005492:	4591      	cmp	r9, r2
 8005494:	bfa8      	it	ge
 8005496:	4691      	movge	r9, r2
 8005498:	f1b9 0f00 	cmp.w	r9, #0
 800549c:	dc35      	bgt.n	800550a <_printf_float+0x3ae>
 800549e:	f04f 0800 	mov.w	r8, #0
 80054a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054a6:	f104 0a1a 	add.w	sl, r4, #26
 80054aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	eba3 0309 	sub.w	r3, r3, r9
 80054b4:	4543      	cmp	r3, r8
 80054b6:	f77f af79 	ble.w	80053ac <_printf_float+0x250>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4652      	mov	r2, sl
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f aeaa 	beq.w	800521e <_printf_float+0xc2>
 80054ca:	f108 0801 	add.w	r8, r8, #1
 80054ce:	e7ec      	b.n	80054aa <_printf_float+0x34e>
 80054d0:	4613      	mov	r3, r2
 80054d2:	4631      	mov	r1, r6
 80054d4:	4642      	mov	r2, r8
 80054d6:	4628      	mov	r0, r5
 80054d8:	47b8      	blx	r7
 80054da:	3001      	adds	r0, #1
 80054dc:	d1c0      	bne.n	8005460 <_printf_float+0x304>
 80054de:	e69e      	b.n	800521e <_printf_float+0xc2>
 80054e0:	2301      	movs	r3, #1
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	9205      	str	r2, [sp, #20]
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	f43f ae97 	beq.w	800521e <_printf_float+0xc2>
 80054f0:	9a05      	ldr	r2, [sp, #20]
 80054f2:	f10b 0b01 	add.w	fp, fp, #1
 80054f6:	e7b9      	b.n	800546c <_printf_float+0x310>
 80054f8:	ee18 3a10 	vmov	r3, s16
 80054fc:	4652      	mov	r2, sl
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	47b8      	blx	r7
 8005504:	3001      	adds	r0, #1
 8005506:	d1be      	bne.n	8005486 <_printf_float+0x32a>
 8005508:	e689      	b.n	800521e <_printf_float+0xc2>
 800550a:	9a05      	ldr	r2, [sp, #20]
 800550c:	464b      	mov	r3, r9
 800550e:	4442      	add	r2, r8
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	d1c1      	bne.n	800549e <_printf_float+0x342>
 800551a:	e680      	b.n	800521e <_printf_float+0xc2>
 800551c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800551e:	2a01      	cmp	r2, #1
 8005520:	dc01      	bgt.n	8005526 <_printf_float+0x3ca>
 8005522:	07db      	lsls	r3, r3, #31
 8005524:	d538      	bpl.n	8005598 <_printf_float+0x43c>
 8005526:	2301      	movs	r3, #1
 8005528:	4642      	mov	r2, r8
 800552a:	4631      	mov	r1, r6
 800552c:	4628      	mov	r0, r5
 800552e:	47b8      	blx	r7
 8005530:	3001      	adds	r0, #1
 8005532:	f43f ae74 	beq.w	800521e <_printf_float+0xc2>
 8005536:	ee18 3a10 	vmov	r3, s16
 800553a:	4652      	mov	r2, sl
 800553c:	4631      	mov	r1, r6
 800553e:	4628      	mov	r0, r5
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	f43f ae6b 	beq.w	800521e <_printf_float+0xc2>
 8005548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800554c:	2200      	movs	r2, #0
 800554e:	2300      	movs	r3, #0
 8005550:	f7fb faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005554:	b9d8      	cbnz	r0, 800558e <_printf_float+0x432>
 8005556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005558:	f108 0201 	add.w	r2, r8, #1
 800555c:	3b01      	subs	r3, #1
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	d10e      	bne.n	8005586 <_printf_float+0x42a>
 8005568:	e659      	b.n	800521e <_printf_float+0xc2>
 800556a:	2301      	movs	r3, #1
 800556c:	4652      	mov	r2, sl
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	47b8      	blx	r7
 8005574:	3001      	adds	r0, #1
 8005576:	f43f ae52 	beq.w	800521e <_printf_float+0xc2>
 800557a:	f108 0801 	add.w	r8, r8, #1
 800557e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005580:	3b01      	subs	r3, #1
 8005582:	4543      	cmp	r3, r8
 8005584:	dcf1      	bgt.n	800556a <_printf_float+0x40e>
 8005586:	464b      	mov	r3, r9
 8005588:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800558c:	e6dc      	b.n	8005348 <_printf_float+0x1ec>
 800558e:	f04f 0800 	mov.w	r8, #0
 8005592:	f104 0a1a 	add.w	sl, r4, #26
 8005596:	e7f2      	b.n	800557e <_printf_float+0x422>
 8005598:	2301      	movs	r3, #1
 800559a:	4642      	mov	r2, r8
 800559c:	e7df      	b.n	800555e <_printf_float+0x402>
 800559e:	2301      	movs	r3, #1
 80055a0:	464a      	mov	r2, r9
 80055a2:	4631      	mov	r1, r6
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b8      	blx	r7
 80055a8:	3001      	adds	r0, #1
 80055aa:	f43f ae38 	beq.w	800521e <_printf_float+0xc2>
 80055ae:	f108 0801 	add.w	r8, r8, #1
 80055b2:	68e3      	ldr	r3, [r4, #12]
 80055b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055b6:	1a5b      	subs	r3, r3, r1
 80055b8:	4543      	cmp	r3, r8
 80055ba:	dcf0      	bgt.n	800559e <_printf_float+0x442>
 80055bc:	e6fa      	b.n	80053b4 <_printf_float+0x258>
 80055be:	f04f 0800 	mov.w	r8, #0
 80055c2:	f104 0919 	add.w	r9, r4, #25
 80055c6:	e7f4      	b.n	80055b2 <_printf_float+0x456>

080055c8 <_printf_common>:
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	4616      	mov	r6, r2
 80055ce:	4699      	mov	r9, r3
 80055d0:	688a      	ldr	r2, [r1, #8]
 80055d2:	690b      	ldr	r3, [r1, #16]
 80055d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055d8:	4293      	cmp	r3, r2
 80055da:	bfb8      	it	lt
 80055dc:	4613      	movlt	r3, r2
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e4:	4607      	mov	r7, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	b10a      	cbz	r2, 80055ee <_printf_common+0x26>
 80055ea:	3301      	adds	r3, #1
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	0699      	lsls	r1, r3, #26
 80055f2:	bf42      	ittt	mi
 80055f4:	6833      	ldrmi	r3, [r6, #0]
 80055f6:	3302      	addmi	r3, #2
 80055f8:	6033      	strmi	r3, [r6, #0]
 80055fa:	6825      	ldr	r5, [r4, #0]
 80055fc:	f015 0506 	ands.w	r5, r5, #6
 8005600:	d106      	bne.n	8005610 <_printf_common+0x48>
 8005602:	f104 0a19 	add.w	sl, r4, #25
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	6832      	ldr	r2, [r6, #0]
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	42ab      	cmp	r3, r5
 800560e:	dc26      	bgt.n	800565e <_printf_common+0x96>
 8005610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005614:	1e13      	subs	r3, r2, #0
 8005616:	6822      	ldr	r2, [r4, #0]
 8005618:	bf18      	it	ne
 800561a:	2301      	movne	r3, #1
 800561c:	0692      	lsls	r2, r2, #26
 800561e:	d42b      	bmi.n	8005678 <_printf_common+0xb0>
 8005620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005624:	4649      	mov	r1, r9
 8005626:	4638      	mov	r0, r7
 8005628:	47c0      	blx	r8
 800562a:	3001      	adds	r0, #1
 800562c:	d01e      	beq.n	800566c <_printf_common+0xa4>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	68e5      	ldr	r5, [r4, #12]
 8005632:	6832      	ldr	r2, [r6, #0]
 8005634:	f003 0306 	and.w	r3, r3, #6
 8005638:	2b04      	cmp	r3, #4
 800563a:	bf08      	it	eq
 800563c:	1aad      	subeq	r5, r5, r2
 800563e:	68a3      	ldr	r3, [r4, #8]
 8005640:	6922      	ldr	r2, [r4, #16]
 8005642:	bf0c      	ite	eq
 8005644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005648:	2500      	movne	r5, #0
 800564a:	4293      	cmp	r3, r2
 800564c:	bfc4      	itt	gt
 800564e:	1a9b      	subgt	r3, r3, r2
 8005650:	18ed      	addgt	r5, r5, r3
 8005652:	2600      	movs	r6, #0
 8005654:	341a      	adds	r4, #26
 8005656:	42b5      	cmp	r5, r6
 8005658:	d11a      	bne.n	8005690 <_printf_common+0xc8>
 800565a:	2000      	movs	r0, #0
 800565c:	e008      	b.n	8005670 <_printf_common+0xa8>
 800565e:	2301      	movs	r3, #1
 8005660:	4652      	mov	r2, sl
 8005662:	4649      	mov	r1, r9
 8005664:	4638      	mov	r0, r7
 8005666:	47c0      	blx	r8
 8005668:	3001      	adds	r0, #1
 800566a:	d103      	bne.n	8005674 <_printf_common+0xac>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	3501      	adds	r5, #1
 8005676:	e7c6      	b.n	8005606 <_printf_common+0x3e>
 8005678:	18e1      	adds	r1, r4, r3
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	2030      	movs	r0, #48	; 0x30
 800567e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005682:	4422      	add	r2, r4
 8005684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800568c:	3302      	adds	r3, #2
 800568e:	e7c7      	b.n	8005620 <_printf_common+0x58>
 8005690:	2301      	movs	r3, #1
 8005692:	4622      	mov	r2, r4
 8005694:	4649      	mov	r1, r9
 8005696:	4638      	mov	r0, r7
 8005698:	47c0      	blx	r8
 800569a:	3001      	adds	r0, #1
 800569c:	d0e6      	beq.n	800566c <_printf_common+0xa4>
 800569e:	3601      	adds	r6, #1
 80056a0:	e7d9      	b.n	8005656 <_printf_common+0x8e>
	...

080056a4 <_printf_i>:
 80056a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a8:	7e0f      	ldrb	r7, [r1, #24]
 80056aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056ac:	2f78      	cmp	r7, #120	; 0x78
 80056ae:	4691      	mov	r9, r2
 80056b0:	4680      	mov	r8, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	469a      	mov	sl, r3
 80056b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056ba:	d807      	bhi.n	80056cc <_printf_i+0x28>
 80056bc:	2f62      	cmp	r7, #98	; 0x62
 80056be:	d80a      	bhi.n	80056d6 <_printf_i+0x32>
 80056c0:	2f00      	cmp	r7, #0
 80056c2:	f000 80d8 	beq.w	8005876 <_printf_i+0x1d2>
 80056c6:	2f58      	cmp	r7, #88	; 0x58
 80056c8:	f000 80a3 	beq.w	8005812 <_printf_i+0x16e>
 80056cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d4:	e03a      	b.n	800574c <_printf_i+0xa8>
 80056d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056da:	2b15      	cmp	r3, #21
 80056dc:	d8f6      	bhi.n	80056cc <_printf_i+0x28>
 80056de:	a101      	add	r1, pc, #4	; (adr r1, 80056e4 <_printf_i+0x40>)
 80056e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e4:	0800573d 	.word	0x0800573d
 80056e8:	08005751 	.word	0x08005751
 80056ec:	080056cd 	.word	0x080056cd
 80056f0:	080056cd 	.word	0x080056cd
 80056f4:	080056cd 	.word	0x080056cd
 80056f8:	080056cd 	.word	0x080056cd
 80056fc:	08005751 	.word	0x08005751
 8005700:	080056cd 	.word	0x080056cd
 8005704:	080056cd 	.word	0x080056cd
 8005708:	080056cd 	.word	0x080056cd
 800570c:	080056cd 	.word	0x080056cd
 8005710:	0800585d 	.word	0x0800585d
 8005714:	08005781 	.word	0x08005781
 8005718:	0800583f 	.word	0x0800583f
 800571c:	080056cd 	.word	0x080056cd
 8005720:	080056cd 	.word	0x080056cd
 8005724:	0800587f 	.word	0x0800587f
 8005728:	080056cd 	.word	0x080056cd
 800572c:	08005781 	.word	0x08005781
 8005730:	080056cd 	.word	0x080056cd
 8005734:	080056cd 	.word	0x080056cd
 8005738:	08005847 	.word	0x08005847
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	602a      	str	r2, [r5, #0]
 8005744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800574c:	2301      	movs	r3, #1
 800574e:	e0a3      	b.n	8005898 <_printf_i+0x1f4>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	6829      	ldr	r1, [r5, #0]
 8005754:	0606      	lsls	r6, r0, #24
 8005756:	f101 0304 	add.w	r3, r1, #4
 800575a:	d50a      	bpl.n	8005772 <_printf_i+0xce>
 800575c:	680e      	ldr	r6, [r1, #0]
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	2e00      	cmp	r6, #0
 8005762:	da03      	bge.n	800576c <_printf_i+0xc8>
 8005764:	232d      	movs	r3, #45	; 0x2d
 8005766:	4276      	negs	r6, r6
 8005768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800576c:	485e      	ldr	r0, [pc, #376]	; (80058e8 <_printf_i+0x244>)
 800576e:	230a      	movs	r3, #10
 8005770:	e019      	b.n	80057a6 <_printf_i+0x102>
 8005772:	680e      	ldr	r6, [r1, #0]
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	f010 0f40 	tst.w	r0, #64	; 0x40
 800577a:	bf18      	it	ne
 800577c:	b236      	sxthne	r6, r6
 800577e:	e7ef      	b.n	8005760 <_printf_i+0xbc>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	6820      	ldr	r0, [r4, #0]
 8005784:	1d19      	adds	r1, r3, #4
 8005786:	6029      	str	r1, [r5, #0]
 8005788:	0601      	lsls	r1, r0, #24
 800578a:	d501      	bpl.n	8005790 <_printf_i+0xec>
 800578c:	681e      	ldr	r6, [r3, #0]
 800578e:	e002      	b.n	8005796 <_printf_i+0xf2>
 8005790:	0646      	lsls	r6, r0, #25
 8005792:	d5fb      	bpl.n	800578c <_printf_i+0xe8>
 8005794:	881e      	ldrh	r6, [r3, #0]
 8005796:	4854      	ldr	r0, [pc, #336]	; (80058e8 <_printf_i+0x244>)
 8005798:	2f6f      	cmp	r7, #111	; 0x6f
 800579a:	bf0c      	ite	eq
 800579c:	2308      	moveq	r3, #8
 800579e:	230a      	movne	r3, #10
 80057a0:	2100      	movs	r1, #0
 80057a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a6:	6865      	ldr	r5, [r4, #4]
 80057a8:	60a5      	str	r5, [r4, #8]
 80057aa:	2d00      	cmp	r5, #0
 80057ac:	bfa2      	ittt	ge
 80057ae:	6821      	ldrge	r1, [r4, #0]
 80057b0:	f021 0104 	bicge.w	r1, r1, #4
 80057b4:	6021      	strge	r1, [r4, #0]
 80057b6:	b90e      	cbnz	r6, 80057bc <_printf_i+0x118>
 80057b8:	2d00      	cmp	r5, #0
 80057ba:	d04d      	beq.n	8005858 <_printf_i+0x1b4>
 80057bc:	4615      	mov	r5, r2
 80057be:	fbb6 f1f3 	udiv	r1, r6, r3
 80057c2:	fb03 6711 	mls	r7, r3, r1, r6
 80057c6:	5dc7      	ldrb	r7, [r0, r7]
 80057c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057cc:	4637      	mov	r7, r6
 80057ce:	42bb      	cmp	r3, r7
 80057d0:	460e      	mov	r6, r1
 80057d2:	d9f4      	bls.n	80057be <_printf_i+0x11a>
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d10b      	bne.n	80057f0 <_printf_i+0x14c>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	07de      	lsls	r6, r3, #31
 80057dc:	d508      	bpl.n	80057f0 <_printf_i+0x14c>
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	6861      	ldr	r1, [r4, #4]
 80057e2:	4299      	cmp	r1, r3
 80057e4:	bfde      	ittt	le
 80057e6:	2330      	movle	r3, #48	; 0x30
 80057e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057f0:	1b52      	subs	r2, r2, r5
 80057f2:	6122      	str	r2, [r4, #16]
 80057f4:	f8cd a000 	str.w	sl, [sp]
 80057f8:	464b      	mov	r3, r9
 80057fa:	aa03      	add	r2, sp, #12
 80057fc:	4621      	mov	r1, r4
 80057fe:	4640      	mov	r0, r8
 8005800:	f7ff fee2 	bl	80055c8 <_printf_common>
 8005804:	3001      	adds	r0, #1
 8005806:	d14c      	bne.n	80058a2 <_printf_i+0x1fe>
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	b004      	add	sp, #16
 800580e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005812:	4835      	ldr	r0, [pc, #212]	; (80058e8 <_printf_i+0x244>)
 8005814:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005818:	6829      	ldr	r1, [r5, #0]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005820:	6029      	str	r1, [r5, #0]
 8005822:	061d      	lsls	r5, r3, #24
 8005824:	d514      	bpl.n	8005850 <_printf_i+0x1ac>
 8005826:	07df      	lsls	r7, r3, #31
 8005828:	bf44      	itt	mi
 800582a:	f043 0320 	orrmi.w	r3, r3, #32
 800582e:	6023      	strmi	r3, [r4, #0]
 8005830:	b91e      	cbnz	r6, 800583a <_printf_i+0x196>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	f023 0320 	bic.w	r3, r3, #32
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	2310      	movs	r3, #16
 800583c:	e7b0      	b.n	80057a0 <_printf_i+0xfc>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	f043 0320 	orr.w	r3, r3, #32
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	2378      	movs	r3, #120	; 0x78
 8005848:	4828      	ldr	r0, [pc, #160]	; (80058ec <_printf_i+0x248>)
 800584a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800584e:	e7e3      	b.n	8005818 <_printf_i+0x174>
 8005850:	0659      	lsls	r1, r3, #25
 8005852:	bf48      	it	mi
 8005854:	b2b6      	uxthmi	r6, r6
 8005856:	e7e6      	b.n	8005826 <_printf_i+0x182>
 8005858:	4615      	mov	r5, r2
 800585a:	e7bb      	b.n	80057d4 <_printf_i+0x130>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	6826      	ldr	r6, [r4, #0]
 8005860:	6961      	ldr	r1, [r4, #20]
 8005862:	1d18      	adds	r0, r3, #4
 8005864:	6028      	str	r0, [r5, #0]
 8005866:	0635      	lsls	r5, r6, #24
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	d501      	bpl.n	8005870 <_printf_i+0x1cc>
 800586c:	6019      	str	r1, [r3, #0]
 800586e:	e002      	b.n	8005876 <_printf_i+0x1d2>
 8005870:	0670      	lsls	r0, r6, #25
 8005872:	d5fb      	bpl.n	800586c <_printf_i+0x1c8>
 8005874:	8019      	strh	r1, [r3, #0]
 8005876:	2300      	movs	r3, #0
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	4615      	mov	r5, r2
 800587c:	e7ba      	b.n	80057f4 <_printf_i+0x150>
 800587e:	682b      	ldr	r3, [r5, #0]
 8005880:	1d1a      	adds	r2, r3, #4
 8005882:	602a      	str	r2, [r5, #0]
 8005884:	681d      	ldr	r5, [r3, #0]
 8005886:	6862      	ldr	r2, [r4, #4]
 8005888:	2100      	movs	r1, #0
 800588a:	4628      	mov	r0, r5
 800588c:	f7fa fca8 	bl	80001e0 <memchr>
 8005890:	b108      	cbz	r0, 8005896 <_printf_i+0x1f2>
 8005892:	1b40      	subs	r0, r0, r5
 8005894:	6060      	str	r0, [r4, #4]
 8005896:	6863      	ldr	r3, [r4, #4]
 8005898:	6123      	str	r3, [r4, #16]
 800589a:	2300      	movs	r3, #0
 800589c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a0:	e7a8      	b.n	80057f4 <_printf_i+0x150>
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	462a      	mov	r2, r5
 80058a6:	4649      	mov	r1, r9
 80058a8:	4640      	mov	r0, r8
 80058aa:	47d0      	blx	sl
 80058ac:	3001      	adds	r0, #1
 80058ae:	d0ab      	beq.n	8005808 <_printf_i+0x164>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	079b      	lsls	r3, r3, #30
 80058b4:	d413      	bmi.n	80058de <_printf_i+0x23a>
 80058b6:	68e0      	ldr	r0, [r4, #12]
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	4298      	cmp	r0, r3
 80058bc:	bfb8      	it	lt
 80058be:	4618      	movlt	r0, r3
 80058c0:	e7a4      	b.n	800580c <_printf_i+0x168>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4632      	mov	r2, r6
 80058c6:	4649      	mov	r1, r9
 80058c8:	4640      	mov	r0, r8
 80058ca:	47d0      	blx	sl
 80058cc:	3001      	adds	r0, #1
 80058ce:	d09b      	beq.n	8005808 <_printf_i+0x164>
 80058d0:	3501      	adds	r5, #1
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	9903      	ldr	r1, [sp, #12]
 80058d6:	1a5b      	subs	r3, r3, r1
 80058d8:	42ab      	cmp	r3, r5
 80058da:	dcf2      	bgt.n	80058c2 <_printf_i+0x21e>
 80058dc:	e7eb      	b.n	80058b6 <_printf_i+0x212>
 80058de:	2500      	movs	r5, #0
 80058e0:	f104 0619 	add.w	r6, r4, #25
 80058e4:	e7f5      	b.n	80058d2 <_printf_i+0x22e>
 80058e6:	bf00      	nop
 80058e8:	08007ede 	.word	0x08007ede
 80058ec:	08007eef 	.word	0x08007eef

080058f0 <siprintf>:
 80058f0:	b40e      	push	{r1, r2, r3}
 80058f2:	b500      	push	{lr}
 80058f4:	b09c      	sub	sp, #112	; 0x70
 80058f6:	ab1d      	add	r3, sp, #116	; 0x74
 80058f8:	9002      	str	r0, [sp, #8]
 80058fa:	9006      	str	r0, [sp, #24]
 80058fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005900:	4809      	ldr	r0, [pc, #36]	; (8005928 <siprintf+0x38>)
 8005902:	9107      	str	r1, [sp, #28]
 8005904:	9104      	str	r1, [sp, #16]
 8005906:	4909      	ldr	r1, [pc, #36]	; (800592c <siprintf+0x3c>)
 8005908:	f853 2b04 	ldr.w	r2, [r3], #4
 800590c:	9105      	str	r1, [sp, #20]
 800590e:	6800      	ldr	r0, [r0, #0]
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	a902      	add	r1, sp, #8
 8005914:	f001 fb76 	bl	8007004 <_svfiprintf_r>
 8005918:	9b02      	ldr	r3, [sp, #8]
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	b01c      	add	sp, #112	; 0x70
 8005920:	f85d eb04 	ldr.w	lr, [sp], #4
 8005924:	b003      	add	sp, #12
 8005926:	4770      	bx	lr
 8005928:	20000014 	.word	0x20000014
 800592c:	ffff0208 	.word	0xffff0208

08005930 <quorem>:
 8005930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	6903      	ldr	r3, [r0, #16]
 8005936:	690c      	ldr	r4, [r1, #16]
 8005938:	42a3      	cmp	r3, r4
 800593a:	4607      	mov	r7, r0
 800593c:	f2c0 8081 	blt.w	8005a42 <quorem+0x112>
 8005940:	3c01      	subs	r4, #1
 8005942:	f101 0814 	add.w	r8, r1, #20
 8005946:	f100 0514 	add.w	r5, r0, #20
 800594a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005954:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005958:	3301      	adds	r3, #1
 800595a:	429a      	cmp	r2, r3
 800595c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005960:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005964:	fbb2 f6f3 	udiv	r6, r2, r3
 8005968:	d331      	bcc.n	80059ce <quorem+0x9e>
 800596a:	f04f 0e00 	mov.w	lr, #0
 800596e:	4640      	mov	r0, r8
 8005970:	46ac      	mov	ip, r5
 8005972:	46f2      	mov	sl, lr
 8005974:	f850 2b04 	ldr.w	r2, [r0], #4
 8005978:	b293      	uxth	r3, r2
 800597a:	fb06 e303 	mla	r3, r6, r3, lr
 800597e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005982:	b29b      	uxth	r3, r3
 8005984:	ebaa 0303 	sub.w	r3, sl, r3
 8005988:	f8dc a000 	ldr.w	sl, [ip]
 800598c:	0c12      	lsrs	r2, r2, #16
 800598e:	fa13 f38a 	uxtah	r3, r3, sl
 8005992:	fb06 e202 	mla	r2, r6, r2, lr
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	9b00      	ldr	r3, [sp, #0]
 800599a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800599e:	b292      	uxth	r2, r2
 80059a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80059ac:	4581      	cmp	r9, r0
 80059ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059b2:	f84c 3b04 	str.w	r3, [ip], #4
 80059b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059ba:	d2db      	bcs.n	8005974 <quorem+0x44>
 80059bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80059c0:	b92b      	cbnz	r3, 80059ce <quorem+0x9e>
 80059c2:	9b01      	ldr	r3, [sp, #4]
 80059c4:	3b04      	subs	r3, #4
 80059c6:	429d      	cmp	r5, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	d32e      	bcc.n	8005a2a <quorem+0xfa>
 80059cc:	613c      	str	r4, [r7, #16]
 80059ce:	4638      	mov	r0, r7
 80059d0:	f001 f8c4 	bl	8006b5c <__mcmp>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	db24      	blt.n	8005a22 <quorem+0xf2>
 80059d8:	3601      	adds	r6, #1
 80059da:	4628      	mov	r0, r5
 80059dc:	f04f 0c00 	mov.w	ip, #0
 80059e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80059e4:	f8d0 e000 	ldr.w	lr, [r0]
 80059e8:	b293      	uxth	r3, r2
 80059ea:	ebac 0303 	sub.w	r3, ip, r3
 80059ee:	0c12      	lsrs	r2, r2, #16
 80059f0:	fa13 f38e 	uxtah	r3, r3, lr
 80059f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a02:	45c1      	cmp	r9, r8
 8005a04:	f840 3b04 	str.w	r3, [r0], #4
 8005a08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a0c:	d2e8      	bcs.n	80059e0 <quorem+0xb0>
 8005a0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a16:	b922      	cbnz	r2, 8005a22 <quorem+0xf2>
 8005a18:	3b04      	subs	r3, #4
 8005a1a:	429d      	cmp	r5, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	d30a      	bcc.n	8005a36 <quorem+0x106>
 8005a20:	613c      	str	r4, [r7, #16]
 8005a22:	4630      	mov	r0, r6
 8005a24:	b003      	add	sp, #12
 8005a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	3b04      	subs	r3, #4
 8005a2e:	2a00      	cmp	r2, #0
 8005a30:	d1cc      	bne.n	80059cc <quorem+0x9c>
 8005a32:	3c01      	subs	r4, #1
 8005a34:	e7c7      	b.n	80059c6 <quorem+0x96>
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	3b04      	subs	r3, #4
 8005a3a:	2a00      	cmp	r2, #0
 8005a3c:	d1f0      	bne.n	8005a20 <quorem+0xf0>
 8005a3e:	3c01      	subs	r4, #1
 8005a40:	e7eb      	b.n	8005a1a <quorem+0xea>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e7ee      	b.n	8005a24 <quorem+0xf4>
	...

08005a48 <_dtoa_r>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	ed2d 8b04 	vpush	{d8-d9}
 8005a50:	ec57 6b10 	vmov	r6, r7, d0
 8005a54:	b093      	sub	sp, #76	; 0x4c
 8005a56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a5c:	9106      	str	r1, [sp, #24]
 8005a5e:	ee10 aa10 	vmov	sl, s0
 8005a62:	4604      	mov	r4, r0
 8005a64:	9209      	str	r2, [sp, #36]	; 0x24
 8005a66:	930c      	str	r3, [sp, #48]	; 0x30
 8005a68:	46bb      	mov	fp, r7
 8005a6a:	b975      	cbnz	r5, 8005a8a <_dtoa_r+0x42>
 8005a6c:	2010      	movs	r0, #16
 8005a6e:	f000 fddd 	bl	800662c <malloc>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6260      	str	r0, [r4, #36]	; 0x24
 8005a76:	b920      	cbnz	r0, 8005a82 <_dtoa_r+0x3a>
 8005a78:	4ba7      	ldr	r3, [pc, #668]	; (8005d18 <_dtoa_r+0x2d0>)
 8005a7a:	21ea      	movs	r1, #234	; 0xea
 8005a7c:	48a7      	ldr	r0, [pc, #668]	; (8005d1c <_dtoa_r+0x2d4>)
 8005a7e:	f001 fbd1 	bl	8007224 <__assert_func>
 8005a82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a86:	6005      	str	r5, [r0, #0]
 8005a88:	60c5      	str	r5, [r0, #12]
 8005a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	b151      	cbz	r1, 8005aa6 <_dtoa_r+0x5e>
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	604a      	str	r2, [r1, #4]
 8005a94:	2301      	movs	r3, #1
 8005a96:	4093      	lsls	r3, r2
 8005a98:	608b      	str	r3, [r1, #8]
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 fe1c 	bl	80066d8 <_Bfree>
 8005aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	1e3b      	subs	r3, r7, #0
 8005aa8:	bfaa      	itet	ge
 8005aaa:	2300      	movge	r3, #0
 8005aac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ab0:	f8c8 3000 	strge.w	r3, [r8]
 8005ab4:	4b9a      	ldr	r3, [pc, #616]	; (8005d20 <_dtoa_r+0x2d8>)
 8005ab6:	bfbc      	itt	lt
 8005ab8:	2201      	movlt	r2, #1
 8005aba:	f8c8 2000 	strlt.w	r2, [r8]
 8005abe:	ea33 030b 	bics.w	r3, r3, fp
 8005ac2:	d11b      	bne.n	8005afc <_dtoa_r+0xb4>
 8005ac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ac6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ad0:	4333      	orrs	r3, r6
 8005ad2:	f000 8592 	beq.w	80065fa <_dtoa_r+0xbb2>
 8005ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ad8:	b963      	cbnz	r3, 8005af4 <_dtoa_r+0xac>
 8005ada:	4b92      	ldr	r3, [pc, #584]	; (8005d24 <_dtoa_r+0x2dc>)
 8005adc:	e022      	b.n	8005b24 <_dtoa_r+0xdc>
 8005ade:	4b92      	ldr	r3, [pc, #584]	; (8005d28 <_dtoa_r+0x2e0>)
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	9801      	ldr	r0, [sp, #4]
 8005aea:	b013      	add	sp, #76	; 0x4c
 8005aec:	ecbd 8b04 	vpop	{d8-d9}
 8005af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	4b8b      	ldr	r3, [pc, #556]	; (8005d24 <_dtoa_r+0x2dc>)
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	3303      	adds	r3, #3
 8005afa:	e7f3      	b.n	8005ae4 <_dtoa_r+0x9c>
 8005afc:	2200      	movs	r2, #0
 8005afe:	2300      	movs	r3, #0
 8005b00:	4650      	mov	r0, sl
 8005b02:	4659      	mov	r1, fp
 8005b04:	f7fa ffe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b08:	ec4b ab19 	vmov	d9, sl, fp
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	b158      	cbz	r0, 8005b28 <_dtoa_r+0xe0>
 8005b10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b12:	2301      	movs	r3, #1
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 856b 	beq.w	80065f4 <_dtoa_r+0xbac>
 8005b1e:	4883      	ldr	r0, [pc, #524]	; (8005d2c <_dtoa_r+0x2e4>)
 8005b20:	6018      	str	r0, [r3, #0]
 8005b22:	1e43      	subs	r3, r0, #1
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	e7df      	b.n	8005ae8 <_dtoa_r+0xa0>
 8005b28:	ec4b ab10 	vmov	d0, sl, fp
 8005b2c:	aa10      	add	r2, sp, #64	; 0x40
 8005b2e:	a911      	add	r1, sp, #68	; 0x44
 8005b30:	4620      	mov	r0, r4
 8005b32:	f001 f8b9 	bl	8006ca8 <__d2b>
 8005b36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005b3a:	ee08 0a10 	vmov	s16, r0
 8005b3e:	2d00      	cmp	r5, #0
 8005b40:	f000 8084 	beq.w	8005c4c <_dtoa_r+0x204>
 8005b44:	ee19 3a90 	vmov	r3, s19
 8005b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b50:	4656      	mov	r6, sl
 8005b52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005b5e:	4b74      	ldr	r3, [pc, #464]	; (8005d30 <_dtoa_r+0x2e8>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	4630      	mov	r0, r6
 8005b64:	4639      	mov	r1, r7
 8005b66:	f7fa fb8f 	bl	8000288 <__aeabi_dsub>
 8005b6a:	a365      	add	r3, pc, #404	; (adr r3, 8005d00 <_dtoa_r+0x2b8>)
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f7fa fd42 	bl	80005f8 <__aeabi_dmul>
 8005b74:	a364      	add	r3, pc, #400	; (adr r3, 8005d08 <_dtoa_r+0x2c0>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f7fa fb87 	bl	800028c <__adddf3>
 8005b7e:	4606      	mov	r6, r0
 8005b80:	4628      	mov	r0, r5
 8005b82:	460f      	mov	r7, r1
 8005b84:	f7fa fcce 	bl	8000524 <__aeabi_i2d>
 8005b88:	a361      	add	r3, pc, #388	; (adr r3, 8005d10 <_dtoa_r+0x2c8>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fd33 	bl	80005f8 <__aeabi_dmul>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4630      	mov	r0, r6
 8005b98:	4639      	mov	r1, r7
 8005b9a:	f7fa fb77 	bl	800028c <__adddf3>
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460f      	mov	r7, r1
 8005ba2:	f7fa ffd9 	bl	8000b58 <__aeabi_d2iz>
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	9000      	str	r0, [sp, #0]
 8005baa:	2300      	movs	r3, #0
 8005bac:	4630      	mov	r0, r6
 8005bae:	4639      	mov	r1, r7
 8005bb0:	f7fa ff94 	bl	8000adc <__aeabi_dcmplt>
 8005bb4:	b150      	cbz	r0, 8005bcc <_dtoa_r+0x184>
 8005bb6:	9800      	ldr	r0, [sp, #0]
 8005bb8:	f7fa fcb4 	bl	8000524 <__aeabi_i2d>
 8005bbc:	4632      	mov	r2, r6
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	f7fa ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bc4:	b910      	cbnz	r0, 8005bcc <_dtoa_r+0x184>
 8005bc6:	9b00      	ldr	r3, [sp, #0]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	9b00      	ldr	r3, [sp, #0]
 8005bce:	2b16      	cmp	r3, #22
 8005bd0:	d85a      	bhi.n	8005c88 <_dtoa_r+0x240>
 8005bd2:	9a00      	ldr	r2, [sp, #0]
 8005bd4:	4b57      	ldr	r3, [pc, #348]	; (8005d34 <_dtoa_r+0x2ec>)
 8005bd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	ec51 0b19 	vmov	r0, r1, d9
 8005be2:	f7fa ff7b 	bl	8000adc <__aeabi_dcmplt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d050      	beq.n	8005c8c <_dtoa_r+0x244>
 8005bea:	9b00      	ldr	r3, [sp, #0]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bf6:	1b5d      	subs	r5, r3, r5
 8005bf8:	1e6b      	subs	r3, r5, #1
 8005bfa:	9305      	str	r3, [sp, #20]
 8005bfc:	bf45      	ittet	mi
 8005bfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c02:	9304      	strmi	r3, [sp, #16]
 8005c04:	2300      	movpl	r3, #0
 8005c06:	2300      	movmi	r3, #0
 8005c08:	bf4c      	ite	mi
 8005c0a:	9305      	strmi	r3, [sp, #20]
 8005c0c:	9304      	strpl	r3, [sp, #16]
 8005c0e:	9b00      	ldr	r3, [sp, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	db3d      	blt.n	8005c90 <_dtoa_r+0x248>
 8005c14:	9b05      	ldr	r3, [sp, #20]
 8005c16:	9a00      	ldr	r2, [sp, #0]
 8005c18:	920a      	str	r2, [sp, #40]	; 0x28
 8005c1a:	4413      	add	r3, r2
 8005c1c:	9305      	str	r3, [sp, #20]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9307      	str	r3, [sp, #28]
 8005c22:	9b06      	ldr	r3, [sp, #24]
 8005c24:	2b09      	cmp	r3, #9
 8005c26:	f200 8089 	bhi.w	8005d3c <_dtoa_r+0x2f4>
 8005c2a:	2b05      	cmp	r3, #5
 8005c2c:	bfc4      	itt	gt
 8005c2e:	3b04      	subgt	r3, #4
 8005c30:	9306      	strgt	r3, [sp, #24]
 8005c32:	9b06      	ldr	r3, [sp, #24]
 8005c34:	f1a3 0302 	sub.w	r3, r3, #2
 8005c38:	bfcc      	ite	gt
 8005c3a:	2500      	movgt	r5, #0
 8005c3c:	2501      	movle	r5, #1
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	f200 8087 	bhi.w	8005d52 <_dtoa_r+0x30a>
 8005c44:	e8df f003 	tbb	[pc, r3]
 8005c48:	59383a2d 	.word	0x59383a2d
 8005c4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c50:	441d      	add	r5, r3
 8005c52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	bfc1      	itttt	gt
 8005c5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c62:	fa0b f303 	lslgt.w	r3, fp, r3
 8005c66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c6a:	bfda      	itte	le
 8005c6c:	f1c3 0320 	rsble	r3, r3, #32
 8005c70:	fa06 f003 	lslle.w	r0, r6, r3
 8005c74:	4318      	orrgt	r0, r3
 8005c76:	f7fa fc45 	bl	8000504 <__aeabi_ui2d>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c82:	3d01      	subs	r5, #1
 8005c84:	930e      	str	r3, [sp, #56]	; 0x38
 8005c86:	e76a      	b.n	8005b5e <_dtoa_r+0x116>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e7b2      	b.n	8005bf2 <_dtoa_r+0x1aa>
 8005c8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c8e:	e7b1      	b.n	8005bf4 <_dtoa_r+0x1ac>
 8005c90:	9b04      	ldr	r3, [sp, #16]
 8005c92:	9a00      	ldr	r2, [sp, #0]
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	9304      	str	r3, [sp, #16]
 8005c98:	4253      	negs	r3, r2
 8005c9a:	9307      	str	r3, [sp, #28]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005ca0:	e7bf      	b.n	8005c22 <_dtoa_r+0x1da>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9308      	str	r3, [sp, #32]
 8005ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dc55      	bgt.n	8005d58 <_dtoa_r+0x310>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005cb6:	e00c      	b.n	8005cd2 <_dtoa_r+0x28a>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e7f3      	b.n	8005ca4 <_dtoa_r+0x25c>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cc0:	9308      	str	r3, [sp, #32]
 8005cc2:	9b00      	ldr	r3, [sp, #0]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	9302      	str	r3, [sp, #8]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	9303      	str	r3, [sp, #12]
 8005cce:	bfb8      	it	lt
 8005cd0:	2301      	movlt	r3, #1
 8005cd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	6042      	str	r2, [r0, #4]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	f102 0614 	add.w	r6, r2, #20
 8005cde:	429e      	cmp	r6, r3
 8005ce0:	6841      	ldr	r1, [r0, #4]
 8005ce2:	d93d      	bls.n	8005d60 <_dtoa_r+0x318>
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fcb7 	bl	8006658 <_Balloc>
 8005cea:	9001      	str	r0, [sp, #4]
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d13b      	bne.n	8005d68 <_dtoa_r+0x320>
 8005cf0:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <_dtoa_r+0x2f0>)
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005cf8:	e6c0      	b.n	8005a7c <_dtoa_r+0x34>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7df      	b.n	8005cbe <_dtoa_r+0x276>
 8005cfe:	bf00      	nop
 8005d00:	636f4361 	.word	0x636f4361
 8005d04:	3fd287a7 	.word	0x3fd287a7
 8005d08:	8b60c8b3 	.word	0x8b60c8b3
 8005d0c:	3fc68a28 	.word	0x3fc68a28
 8005d10:	509f79fb 	.word	0x509f79fb
 8005d14:	3fd34413 	.word	0x3fd34413
 8005d18:	08007f0d 	.word	0x08007f0d
 8005d1c:	08007f24 	.word	0x08007f24
 8005d20:	7ff00000 	.word	0x7ff00000
 8005d24:	08007f09 	.word	0x08007f09
 8005d28:	08007f00 	.word	0x08007f00
 8005d2c:	08007edd 	.word	0x08007edd
 8005d30:	3ff80000 	.word	0x3ff80000
 8005d34:	08008018 	.word	0x08008018
 8005d38:	08007f7f 	.word	0x08007f7f
 8005d3c:	2501      	movs	r5, #1
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9306      	str	r3, [sp, #24]
 8005d42:	9508      	str	r5, [sp, #32]
 8005d44:	f04f 33ff 	mov.w	r3, #4294967295
 8005d48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2312      	movs	r3, #18
 8005d50:	e7b0      	b.n	8005cb4 <_dtoa_r+0x26c>
 8005d52:	2301      	movs	r3, #1
 8005d54:	9308      	str	r3, [sp, #32]
 8005d56:	e7f5      	b.n	8005d44 <_dtoa_r+0x2fc>
 8005d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d5e:	e7b8      	b.n	8005cd2 <_dtoa_r+0x28a>
 8005d60:	3101      	adds	r1, #1
 8005d62:	6041      	str	r1, [r0, #4]
 8005d64:	0052      	lsls	r2, r2, #1
 8005d66:	e7b8      	b.n	8005cda <_dtoa_r+0x292>
 8005d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d6a:	9a01      	ldr	r2, [sp, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	2b0e      	cmp	r3, #14
 8005d72:	f200 809d 	bhi.w	8005eb0 <_dtoa_r+0x468>
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	f000 809a 	beq.w	8005eb0 <_dtoa_r+0x468>
 8005d7c:	9b00      	ldr	r3, [sp, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	dd32      	ble.n	8005de8 <_dtoa_r+0x3a0>
 8005d82:	4ab7      	ldr	r2, [pc, #732]	; (8006060 <_dtoa_r+0x618>)
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d90:	9b00      	ldr	r3, [sp, #0]
 8005d92:	05d8      	lsls	r0, r3, #23
 8005d94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005d98:	d516      	bpl.n	8005dc8 <_dtoa_r+0x380>
 8005d9a:	4bb2      	ldr	r3, [pc, #712]	; (8006064 <_dtoa_r+0x61c>)
 8005d9c:	ec51 0b19 	vmov	r0, r1, d9
 8005da0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005da4:	f7fa fd52 	bl	800084c <__aeabi_ddiv>
 8005da8:	f007 070f 	and.w	r7, r7, #15
 8005dac:	4682      	mov	sl, r0
 8005dae:	468b      	mov	fp, r1
 8005db0:	2503      	movs	r5, #3
 8005db2:	4eac      	ldr	r6, [pc, #688]	; (8006064 <_dtoa_r+0x61c>)
 8005db4:	b957      	cbnz	r7, 8005dcc <_dtoa_r+0x384>
 8005db6:	4642      	mov	r2, r8
 8005db8:	464b      	mov	r3, r9
 8005dba:	4650      	mov	r0, sl
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	f7fa fd45 	bl	800084c <__aeabi_ddiv>
 8005dc2:	4682      	mov	sl, r0
 8005dc4:	468b      	mov	fp, r1
 8005dc6:	e028      	b.n	8005e1a <_dtoa_r+0x3d2>
 8005dc8:	2502      	movs	r5, #2
 8005dca:	e7f2      	b.n	8005db2 <_dtoa_r+0x36a>
 8005dcc:	07f9      	lsls	r1, r7, #31
 8005dce:	d508      	bpl.n	8005de2 <_dtoa_r+0x39a>
 8005dd0:	4640      	mov	r0, r8
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005dd8:	f7fa fc0e 	bl	80005f8 <__aeabi_dmul>
 8005ddc:	3501      	adds	r5, #1
 8005dde:	4680      	mov	r8, r0
 8005de0:	4689      	mov	r9, r1
 8005de2:	107f      	asrs	r7, r7, #1
 8005de4:	3608      	adds	r6, #8
 8005de6:	e7e5      	b.n	8005db4 <_dtoa_r+0x36c>
 8005de8:	f000 809b 	beq.w	8005f22 <_dtoa_r+0x4da>
 8005dec:	9b00      	ldr	r3, [sp, #0]
 8005dee:	4f9d      	ldr	r7, [pc, #628]	; (8006064 <_dtoa_r+0x61c>)
 8005df0:	425e      	negs	r6, r3
 8005df2:	4b9b      	ldr	r3, [pc, #620]	; (8006060 <_dtoa_r+0x618>)
 8005df4:	f006 020f 	and.w	r2, r6, #15
 8005df8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	ec51 0b19 	vmov	r0, r1, d9
 8005e04:	f7fa fbf8 	bl	80005f8 <__aeabi_dmul>
 8005e08:	1136      	asrs	r6, r6, #4
 8005e0a:	4682      	mov	sl, r0
 8005e0c:	468b      	mov	fp, r1
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2502      	movs	r5, #2
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	d17a      	bne.n	8005f0c <_dtoa_r+0x4c4>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1d3      	bne.n	8005dc2 <_dtoa_r+0x37a>
 8005e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 8082 	beq.w	8005f26 <_dtoa_r+0x4de>
 8005e22:	4b91      	ldr	r3, [pc, #580]	; (8006068 <_dtoa_r+0x620>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	4650      	mov	r0, sl
 8005e28:	4659      	mov	r1, fp
 8005e2a:	f7fa fe57 	bl	8000adc <__aeabi_dcmplt>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d079      	beq.n	8005f26 <_dtoa_r+0x4de>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d076      	beq.n	8005f26 <_dtoa_r+0x4de>
 8005e38:	9b02      	ldr	r3, [sp, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dd36      	ble.n	8005eac <_dtoa_r+0x464>
 8005e3e:	9b00      	ldr	r3, [sp, #0]
 8005e40:	4650      	mov	r0, sl
 8005e42:	4659      	mov	r1, fp
 8005e44:	1e5f      	subs	r7, r3, #1
 8005e46:	2200      	movs	r2, #0
 8005e48:	4b88      	ldr	r3, [pc, #544]	; (800606c <_dtoa_r+0x624>)
 8005e4a:	f7fa fbd5 	bl	80005f8 <__aeabi_dmul>
 8005e4e:	9e02      	ldr	r6, [sp, #8]
 8005e50:	4682      	mov	sl, r0
 8005e52:	468b      	mov	fp, r1
 8005e54:	3501      	adds	r5, #1
 8005e56:	4628      	mov	r0, r5
 8005e58:	f7fa fb64 	bl	8000524 <__aeabi_i2d>
 8005e5c:	4652      	mov	r2, sl
 8005e5e:	465b      	mov	r3, fp
 8005e60:	f7fa fbca 	bl	80005f8 <__aeabi_dmul>
 8005e64:	4b82      	ldr	r3, [pc, #520]	; (8006070 <_dtoa_r+0x628>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	f7fa fa10 	bl	800028c <__adddf3>
 8005e6c:	46d0      	mov	r8, sl
 8005e6e:	46d9      	mov	r9, fp
 8005e70:	4682      	mov	sl, r0
 8005e72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005e76:	2e00      	cmp	r6, #0
 8005e78:	d158      	bne.n	8005f2c <_dtoa_r+0x4e4>
 8005e7a:	4b7e      	ldr	r3, [pc, #504]	; (8006074 <_dtoa_r+0x62c>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa fa01 	bl	8000288 <__aeabi_dsub>
 8005e86:	4652      	mov	r2, sl
 8005e88:	465b      	mov	r3, fp
 8005e8a:	4680      	mov	r8, r0
 8005e8c:	4689      	mov	r9, r1
 8005e8e:	f7fa fe43 	bl	8000b18 <__aeabi_dcmpgt>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f040 8295 	bne.w	80063c2 <_dtoa_r+0x97a>
 8005e98:	4652      	mov	r2, sl
 8005e9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	f7fa fe1b 	bl	8000adc <__aeabi_dcmplt>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f040 8289 	bne.w	80063be <_dtoa_r+0x976>
 8005eac:	ec5b ab19 	vmov	sl, fp, d9
 8005eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f2c0 8148 	blt.w	8006148 <_dtoa_r+0x700>
 8005eb8:	9a00      	ldr	r2, [sp, #0]
 8005eba:	2a0e      	cmp	r2, #14
 8005ebc:	f300 8144 	bgt.w	8006148 <_dtoa_r+0x700>
 8005ec0:	4b67      	ldr	r3, [pc, #412]	; (8006060 <_dtoa_r+0x618>)
 8005ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ec6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f280 80d5 	bge.w	800607c <_dtoa_r+0x634>
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f300 80d1 	bgt.w	800607c <_dtoa_r+0x634>
 8005eda:	f040 826f 	bne.w	80063bc <_dtoa_r+0x974>
 8005ede:	4b65      	ldr	r3, [pc, #404]	; (8006074 <_dtoa_r+0x62c>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	f7fa fb87 	bl	80005f8 <__aeabi_dmul>
 8005eea:	4652      	mov	r2, sl
 8005eec:	465b      	mov	r3, fp
 8005eee:	f7fa fe09 	bl	8000b04 <__aeabi_dcmpge>
 8005ef2:	9e03      	ldr	r6, [sp, #12]
 8005ef4:	4637      	mov	r7, r6
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f040 8245 	bne.w	8006386 <_dtoa_r+0x93e>
 8005efc:	9d01      	ldr	r5, [sp, #4]
 8005efe:	2331      	movs	r3, #49	; 0x31
 8005f00:	f805 3b01 	strb.w	r3, [r5], #1
 8005f04:	9b00      	ldr	r3, [sp, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	e240      	b.n	800638e <_dtoa_r+0x946>
 8005f0c:	07f2      	lsls	r2, r6, #31
 8005f0e:	d505      	bpl.n	8005f1c <_dtoa_r+0x4d4>
 8005f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f14:	f7fa fb70 	bl	80005f8 <__aeabi_dmul>
 8005f18:	3501      	adds	r5, #1
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	1076      	asrs	r6, r6, #1
 8005f1e:	3708      	adds	r7, #8
 8005f20:	e777      	b.n	8005e12 <_dtoa_r+0x3ca>
 8005f22:	2502      	movs	r5, #2
 8005f24:	e779      	b.n	8005e1a <_dtoa_r+0x3d2>
 8005f26:	9f00      	ldr	r7, [sp, #0]
 8005f28:	9e03      	ldr	r6, [sp, #12]
 8005f2a:	e794      	b.n	8005e56 <_dtoa_r+0x40e>
 8005f2c:	9901      	ldr	r1, [sp, #4]
 8005f2e:	4b4c      	ldr	r3, [pc, #304]	; (8006060 <_dtoa_r+0x618>)
 8005f30:	4431      	add	r1, r6
 8005f32:	910d      	str	r1, [sp, #52]	; 0x34
 8005f34:	9908      	ldr	r1, [sp, #32]
 8005f36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f3e:	2900      	cmp	r1, #0
 8005f40:	d043      	beq.n	8005fca <_dtoa_r+0x582>
 8005f42:	494d      	ldr	r1, [pc, #308]	; (8006078 <_dtoa_r+0x630>)
 8005f44:	2000      	movs	r0, #0
 8005f46:	f7fa fc81 	bl	800084c <__aeabi_ddiv>
 8005f4a:	4652      	mov	r2, sl
 8005f4c:	465b      	mov	r3, fp
 8005f4e:	f7fa f99b 	bl	8000288 <__aeabi_dsub>
 8005f52:	9d01      	ldr	r5, [sp, #4]
 8005f54:	4682      	mov	sl, r0
 8005f56:	468b      	mov	fp, r1
 8005f58:	4649      	mov	r1, r9
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	f7fa fdfc 	bl	8000b58 <__aeabi_d2iz>
 8005f60:	4606      	mov	r6, r0
 8005f62:	f7fa fadf 	bl	8000524 <__aeabi_i2d>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	f7fa f98b 	bl	8000288 <__aeabi_dsub>
 8005f72:	3630      	adds	r6, #48	; 0x30
 8005f74:	f805 6b01 	strb.w	r6, [r5], #1
 8005f78:	4652      	mov	r2, sl
 8005f7a:	465b      	mov	r3, fp
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	4689      	mov	r9, r1
 8005f80:	f7fa fdac 	bl	8000adc <__aeabi_dcmplt>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d163      	bne.n	8006050 <_dtoa_r+0x608>
 8005f88:	4642      	mov	r2, r8
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	4936      	ldr	r1, [pc, #216]	; (8006068 <_dtoa_r+0x620>)
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f7fa f97a 	bl	8000288 <__aeabi_dsub>
 8005f94:	4652      	mov	r2, sl
 8005f96:	465b      	mov	r3, fp
 8005f98:	f7fa fda0 	bl	8000adc <__aeabi_dcmplt>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	f040 80b5 	bne.w	800610c <_dtoa_r+0x6c4>
 8005fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa4:	429d      	cmp	r5, r3
 8005fa6:	d081      	beq.n	8005eac <_dtoa_r+0x464>
 8005fa8:	4b30      	ldr	r3, [pc, #192]	; (800606c <_dtoa_r+0x624>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	4650      	mov	r0, sl
 8005fae:	4659      	mov	r1, fp
 8005fb0:	f7fa fb22 	bl	80005f8 <__aeabi_dmul>
 8005fb4:	4b2d      	ldr	r3, [pc, #180]	; (800606c <_dtoa_r+0x624>)
 8005fb6:	4682      	mov	sl, r0
 8005fb8:	468b      	mov	fp, r1
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f7fa fb1a 	bl	80005f8 <__aeabi_dmul>
 8005fc4:	4680      	mov	r8, r0
 8005fc6:	4689      	mov	r9, r1
 8005fc8:	e7c6      	b.n	8005f58 <_dtoa_r+0x510>
 8005fca:	4650      	mov	r0, sl
 8005fcc:	4659      	mov	r1, fp
 8005fce:	f7fa fb13 	bl	80005f8 <__aeabi_dmul>
 8005fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd4:	9d01      	ldr	r5, [sp, #4]
 8005fd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fd8:	4682      	mov	sl, r0
 8005fda:	468b      	mov	fp, r1
 8005fdc:	4649      	mov	r1, r9
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f7fa fdba 	bl	8000b58 <__aeabi_d2iz>
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	f7fa fa9d 	bl	8000524 <__aeabi_i2d>
 8005fea:	3630      	adds	r6, #48	; 0x30
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	f7fa f948 	bl	8000288 <__aeabi_dsub>
 8005ff8:	f805 6b01 	strb.w	r6, [r5], #1
 8005ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ffe:	429d      	cmp	r5, r3
 8006000:	4680      	mov	r8, r0
 8006002:	4689      	mov	r9, r1
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	d124      	bne.n	8006054 <_dtoa_r+0x60c>
 800600a:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <_dtoa_r+0x630>)
 800600c:	4650      	mov	r0, sl
 800600e:	4659      	mov	r1, fp
 8006010:	f7fa f93c 	bl	800028c <__adddf3>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4640      	mov	r0, r8
 800601a:	4649      	mov	r1, r9
 800601c:	f7fa fd7c 	bl	8000b18 <__aeabi_dcmpgt>
 8006020:	2800      	cmp	r0, #0
 8006022:	d173      	bne.n	800610c <_dtoa_r+0x6c4>
 8006024:	4652      	mov	r2, sl
 8006026:	465b      	mov	r3, fp
 8006028:	4913      	ldr	r1, [pc, #76]	; (8006078 <_dtoa_r+0x630>)
 800602a:	2000      	movs	r0, #0
 800602c:	f7fa f92c 	bl	8000288 <__aeabi_dsub>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4640      	mov	r0, r8
 8006036:	4649      	mov	r1, r9
 8006038:	f7fa fd50 	bl	8000adc <__aeabi_dcmplt>
 800603c:	2800      	cmp	r0, #0
 800603e:	f43f af35 	beq.w	8005eac <_dtoa_r+0x464>
 8006042:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006044:	1e6b      	subs	r3, r5, #1
 8006046:	930f      	str	r3, [sp, #60]	; 0x3c
 8006048:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800604c:	2b30      	cmp	r3, #48	; 0x30
 800604e:	d0f8      	beq.n	8006042 <_dtoa_r+0x5fa>
 8006050:	9700      	str	r7, [sp, #0]
 8006052:	e049      	b.n	80060e8 <_dtoa_r+0x6a0>
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <_dtoa_r+0x624>)
 8006056:	f7fa facf 	bl	80005f8 <__aeabi_dmul>
 800605a:	4680      	mov	r8, r0
 800605c:	4689      	mov	r9, r1
 800605e:	e7bd      	b.n	8005fdc <_dtoa_r+0x594>
 8006060:	08008018 	.word	0x08008018
 8006064:	08007ff0 	.word	0x08007ff0
 8006068:	3ff00000 	.word	0x3ff00000
 800606c:	40240000 	.word	0x40240000
 8006070:	401c0000 	.word	0x401c0000
 8006074:	40140000 	.word	0x40140000
 8006078:	3fe00000 	.word	0x3fe00000
 800607c:	9d01      	ldr	r5, [sp, #4]
 800607e:	4656      	mov	r6, sl
 8006080:	465f      	mov	r7, fp
 8006082:	4642      	mov	r2, r8
 8006084:	464b      	mov	r3, r9
 8006086:	4630      	mov	r0, r6
 8006088:	4639      	mov	r1, r7
 800608a:	f7fa fbdf 	bl	800084c <__aeabi_ddiv>
 800608e:	f7fa fd63 	bl	8000b58 <__aeabi_d2iz>
 8006092:	4682      	mov	sl, r0
 8006094:	f7fa fa46 	bl	8000524 <__aeabi_i2d>
 8006098:	4642      	mov	r2, r8
 800609a:	464b      	mov	r3, r9
 800609c:	f7fa faac 	bl	80005f8 <__aeabi_dmul>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4630      	mov	r0, r6
 80060a6:	4639      	mov	r1, r7
 80060a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80060ac:	f7fa f8ec 	bl	8000288 <__aeabi_dsub>
 80060b0:	f805 6b01 	strb.w	r6, [r5], #1
 80060b4:	9e01      	ldr	r6, [sp, #4]
 80060b6:	9f03      	ldr	r7, [sp, #12]
 80060b8:	1bae      	subs	r6, r5, r6
 80060ba:	42b7      	cmp	r7, r6
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	d135      	bne.n	800612e <_dtoa_r+0x6e6>
 80060c2:	f7fa f8e3 	bl	800028c <__adddf3>
 80060c6:	4642      	mov	r2, r8
 80060c8:	464b      	mov	r3, r9
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	f7fa fd23 	bl	8000b18 <__aeabi_dcmpgt>
 80060d2:	b9d0      	cbnz	r0, 800610a <_dtoa_r+0x6c2>
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80060e0:	b110      	cbz	r0, 80060e8 <_dtoa_r+0x6a0>
 80060e2:	f01a 0f01 	tst.w	sl, #1
 80060e6:	d110      	bne.n	800610a <_dtoa_r+0x6c2>
 80060e8:	4620      	mov	r0, r4
 80060ea:	ee18 1a10 	vmov	r1, s16
 80060ee:	f000 faf3 	bl	80066d8 <_Bfree>
 80060f2:	2300      	movs	r3, #0
 80060f4:	9800      	ldr	r0, [sp, #0]
 80060f6:	702b      	strb	r3, [r5, #0]
 80060f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060fa:	3001      	adds	r0, #1
 80060fc:	6018      	str	r0, [r3, #0]
 80060fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006100:	2b00      	cmp	r3, #0
 8006102:	f43f acf1 	beq.w	8005ae8 <_dtoa_r+0xa0>
 8006106:	601d      	str	r5, [r3, #0]
 8006108:	e4ee      	b.n	8005ae8 <_dtoa_r+0xa0>
 800610a:	9f00      	ldr	r7, [sp, #0]
 800610c:	462b      	mov	r3, r5
 800610e:	461d      	mov	r5, r3
 8006110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006114:	2a39      	cmp	r2, #57	; 0x39
 8006116:	d106      	bne.n	8006126 <_dtoa_r+0x6de>
 8006118:	9a01      	ldr	r2, [sp, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d1f7      	bne.n	800610e <_dtoa_r+0x6c6>
 800611e:	9901      	ldr	r1, [sp, #4]
 8006120:	2230      	movs	r2, #48	; 0x30
 8006122:	3701      	adds	r7, #1
 8006124:	700a      	strb	r2, [r1, #0]
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	3201      	adds	r2, #1
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	e790      	b.n	8006050 <_dtoa_r+0x608>
 800612e:	4ba6      	ldr	r3, [pc, #664]	; (80063c8 <_dtoa_r+0x980>)
 8006130:	2200      	movs	r2, #0
 8006132:	f7fa fa61 	bl	80005f8 <__aeabi_dmul>
 8006136:	2200      	movs	r2, #0
 8006138:	2300      	movs	r3, #0
 800613a:	4606      	mov	r6, r0
 800613c:	460f      	mov	r7, r1
 800613e:	f7fa fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006142:	2800      	cmp	r0, #0
 8006144:	d09d      	beq.n	8006082 <_dtoa_r+0x63a>
 8006146:	e7cf      	b.n	80060e8 <_dtoa_r+0x6a0>
 8006148:	9a08      	ldr	r2, [sp, #32]
 800614a:	2a00      	cmp	r2, #0
 800614c:	f000 80d7 	beq.w	80062fe <_dtoa_r+0x8b6>
 8006150:	9a06      	ldr	r2, [sp, #24]
 8006152:	2a01      	cmp	r2, #1
 8006154:	f300 80ba 	bgt.w	80062cc <_dtoa_r+0x884>
 8006158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800615a:	2a00      	cmp	r2, #0
 800615c:	f000 80b2 	beq.w	80062c4 <_dtoa_r+0x87c>
 8006160:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006164:	9e07      	ldr	r6, [sp, #28]
 8006166:	9d04      	ldr	r5, [sp, #16]
 8006168:	9a04      	ldr	r2, [sp, #16]
 800616a:	441a      	add	r2, r3
 800616c:	9204      	str	r2, [sp, #16]
 800616e:	9a05      	ldr	r2, [sp, #20]
 8006170:	2101      	movs	r1, #1
 8006172:	441a      	add	r2, r3
 8006174:	4620      	mov	r0, r4
 8006176:	9205      	str	r2, [sp, #20]
 8006178:	f000 fb66 	bl	8006848 <__i2b>
 800617c:	4607      	mov	r7, r0
 800617e:	2d00      	cmp	r5, #0
 8006180:	dd0c      	ble.n	800619c <_dtoa_r+0x754>
 8006182:	9b05      	ldr	r3, [sp, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	dd09      	ble.n	800619c <_dtoa_r+0x754>
 8006188:	42ab      	cmp	r3, r5
 800618a:	9a04      	ldr	r2, [sp, #16]
 800618c:	bfa8      	it	ge
 800618e:	462b      	movge	r3, r5
 8006190:	1ad2      	subs	r2, r2, r3
 8006192:	9204      	str	r2, [sp, #16]
 8006194:	9a05      	ldr	r2, [sp, #20]
 8006196:	1aed      	subs	r5, r5, r3
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	9305      	str	r3, [sp, #20]
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	b31b      	cbz	r3, 80061e8 <_dtoa_r+0x7a0>
 80061a0:	9b08      	ldr	r3, [sp, #32]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80af 	beq.w	8006306 <_dtoa_r+0x8be>
 80061a8:	2e00      	cmp	r6, #0
 80061aa:	dd13      	ble.n	80061d4 <_dtoa_r+0x78c>
 80061ac:	4639      	mov	r1, r7
 80061ae:	4632      	mov	r2, r6
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 fc09 	bl	80069c8 <__pow5mult>
 80061b6:	ee18 2a10 	vmov	r2, s16
 80061ba:	4601      	mov	r1, r0
 80061bc:	4607      	mov	r7, r0
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 fb58 	bl	8006874 <__multiply>
 80061c4:	ee18 1a10 	vmov	r1, s16
 80061c8:	4680      	mov	r8, r0
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 fa84 	bl	80066d8 <_Bfree>
 80061d0:	ee08 8a10 	vmov	s16, r8
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	1b9a      	subs	r2, r3, r6
 80061d8:	d006      	beq.n	80061e8 <_dtoa_r+0x7a0>
 80061da:	ee18 1a10 	vmov	r1, s16
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 fbf2 	bl	80069c8 <__pow5mult>
 80061e4:	ee08 0a10 	vmov	s16, r0
 80061e8:	2101      	movs	r1, #1
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 fb2c 	bl	8006848 <__i2b>
 80061f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	4606      	mov	r6, r0
 80061f6:	f340 8088 	ble.w	800630a <_dtoa_r+0x8c2>
 80061fa:	461a      	mov	r2, r3
 80061fc:	4601      	mov	r1, r0
 80061fe:	4620      	mov	r0, r4
 8006200:	f000 fbe2 	bl	80069c8 <__pow5mult>
 8006204:	9b06      	ldr	r3, [sp, #24]
 8006206:	2b01      	cmp	r3, #1
 8006208:	4606      	mov	r6, r0
 800620a:	f340 8081 	ble.w	8006310 <_dtoa_r+0x8c8>
 800620e:	f04f 0800 	mov.w	r8, #0
 8006212:	6933      	ldr	r3, [r6, #16]
 8006214:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006218:	6918      	ldr	r0, [r3, #16]
 800621a:	f000 fac5 	bl	80067a8 <__hi0bits>
 800621e:	f1c0 0020 	rsb	r0, r0, #32
 8006222:	9b05      	ldr	r3, [sp, #20]
 8006224:	4418      	add	r0, r3
 8006226:	f010 001f 	ands.w	r0, r0, #31
 800622a:	f000 8092 	beq.w	8006352 <_dtoa_r+0x90a>
 800622e:	f1c0 0320 	rsb	r3, r0, #32
 8006232:	2b04      	cmp	r3, #4
 8006234:	f340 808a 	ble.w	800634c <_dtoa_r+0x904>
 8006238:	f1c0 001c 	rsb	r0, r0, #28
 800623c:	9b04      	ldr	r3, [sp, #16]
 800623e:	4403      	add	r3, r0
 8006240:	9304      	str	r3, [sp, #16]
 8006242:	9b05      	ldr	r3, [sp, #20]
 8006244:	4403      	add	r3, r0
 8006246:	4405      	add	r5, r0
 8006248:	9305      	str	r3, [sp, #20]
 800624a:	9b04      	ldr	r3, [sp, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	dd07      	ble.n	8006260 <_dtoa_r+0x818>
 8006250:	ee18 1a10 	vmov	r1, s16
 8006254:	461a      	mov	r2, r3
 8006256:	4620      	mov	r0, r4
 8006258:	f000 fc10 	bl	8006a7c <__lshift>
 800625c:	ee08 0a10 	vmov	s16, r0
 8006260:	9b05      	ldr	r3, [sp, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	dd05      	ble.n	8006272 <_dtoa_r+0x82a>
 8006266:	4631      	mov	r1, r6
 8006268:	461a      	mov	r2, r3
 800626a:	4620      	mov	r0, r4
 800626c:	f000 fc06 	bl	8006a7c <__lshift>
 8006270:	4606      	mov	r6, r0
 8006272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d06e      	beq.n	8006356 <_dtoa_r+0x90e>
 8006278:	ee18 0a10 	vmov	r0, s16
 800627c:	4631      	mov	r1, r6
 800627e:	f000 fc6d 	bl	8006b5c <__mcmp>
 8006282:	2800      	cmp	r0, #0
 8006284:	da67      	bge.n	8006356 <_dtoa_r+0x90e>
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	3b01      	subs	r3, #1
 800628a:	ee18 1a10 	vmov	r1, s16
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	220a      	movs	r2, #10
 8006292:	2300      	movs	r3, #0
 8006294:	4620      	mov	r0, r4
 8006296:	f000 fa41 	bl	800671c <__multadd>
 800629a:	9b08      	ldr	r3, [sp, #32]
 800629c:	ee08 0a10 	vmov	s16, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 81b1 	beq.w	8006608 <_dtoa_r+0xbc0>
 80062a6:	2300      	movs	r3, #0
 80062a8:	4639      	mov	r1, r7
 80062aa:	220a      	movs	r2, #10
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 fa35 	bl	800671c <__multadd>
 80062b2:	9b02      	ldr	r3, [sp, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	4607      	mov	r7, r0
 80062b8:	f300 808e 	bgt.w	80063d8 <_dtoa_r+0x990>
 80062bc:	9b06      	ldr	r3, [sp, #24]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	dc51      	bgt.n	8006366 <_dtoa_r+0x91e>
 80062c2:	e089      	b.n	80063d8 <_dtoa_r+0x990>
 80062c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062ca:	e74b      	b.n	8006164 <_dtoa_r+0x71c>
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	1e5e      	subs	r6, r3, #1
 80062d0:	9b07      	ldr	r3, [sp, #28]
 80062d2:	42b3      	cmp	r3, r6
 80062d4:	bfbf      	itttt	lt
 80062d6:	9b07      	ldrlt	r3, [sp, #28]
 80062d8:	9607      	strlt	r6, [sp, #28]
 80062da:	1af2      	sublt	r2, r6, r3
 80062dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062de:	bfb6      	itet	lt
 80062e0:	189b      	addlt	r3, r3, r2
 80062e2:	1b9e      	subge	r6, r3, r6
 80062e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	bfb8      	it	lt
 80062ea:	2600      	movlt	r6, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	bfb7      	itett	lt
 80062f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80062f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80062f8:	1a9d      	sublt	r5, r3, r2
 80062fa:	2300      	movlt	r3, #0
 80062fc:	e734      	b.n	8006168 <_dtoa_r+0x720>
 80062fe:	9e07      	ldr	r6, [sp, #28]
 8006300:	9d04      	ldr	r5, [sp, #16]
 8006302:	9f08      	ldr	r7, [sp, #32]
 8006304:	e73b      	b.n	800617e <_dtoa_r+0x736>
 8006306:	9a07      	ldr	r2, [sp, #28]
 8006308:	e767      	b.n	80061da <_dtoa_r+0x792>
 800630a:	9b06      	ldr	r3, [sp, #24]
 800630c:	2b01      	cmp	r3, #1
 800630e:	dc18      	bgt.n	8006342 <_dtoa_r+0x8fa>
 8006310:	f1ba 0f00 	cmp.w	sl, #0
 8006314:	d115      	bne.n	8006342 <_dtoa_r+0x8fa>
 8006316:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800631a:	b993      	cbnz	r3, 8006342 <_dtoa_r+0x8fa>
 800631c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006320:	0d1b      	lsrs	r3, r3, #20
 8006322:	051b      	lsls	r3, r3, #20
 8006324:	b183      	cbz	r3, 8006348 <_dtoa_r+0x900>
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	9304      	str	r3, [sp, #16]
 800632c:	9b05      	ldr	r3, [sp, #20]
 800632e:	3301      	adds	r3, #1
 8006330:	9305      	str	r3, [sp, #20]
 8006332:	f04f 0801 	mov.w	r8, #1
 8006336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	f47f af6a 	bne.w	8006212 <_dtoa_r+0x7ca>
 800633e:	2001      	movs	r0, #1
 8006340:	e76f      	b.n	8006222 <_dtoa_r+0x7da>
 8006342:	f04f 0800 	mov.w	r8, #0
 8006346:	e7f6      	b.n	8006336 <_dtoa_r+0x8ee>
 8006348:	4698      	mov	r8, r3
 800634a:	e7f4      	b.n	8006336 <_dtoa_r+0x8ee>
 800634c:	f43f af7d 	beq.w	800624a <_dtoa_r+0x802>
 8006350:	4618      	mov	r0, r3
 8006352:	301c      	adds	r0, #28
 8006354:	e772      	b.n	800623c <_dtoa_r+0x7f4>
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	dc37      	bgt.n	80063cc <_dtoa_r+0x984>
 800635c:	9b06      	ldr	r3, [sp, #24]
 800635e:	2b02      	cmp	r3, #2
 8006360:	dd34      	ble.n	80063cc <_dtoa_r+0x984>
 8006362:	9b03      	ldr	r3, [sp, #12]
 8006364:	9302      	str	r3, [sp, #8]
 8006366:	9b02      	ldr	r3, [sp, #8]
 8006368:	b96b      	cbnz	r3, 8006386 <_dtoa_r+0x93e>
 800636a:	4631      	mov	r1, r6
 800636c:	2205      	movs	r2, #5
 800636e:	4620      	mov	r0, r4
 8006370:	f000 f9d4 	bl	800671c <__multadd>
 8006374:	4601      	mov	r1, r0
 8006376:	4606      	mov	r6, r0
 8006378:	ee18 0a10 	vmov	r0, s16
 800637c:	f000 fbee 	bl	8006b5c <__mcmp>
 8006380:	2800      	cmp	r0, #0
 8006382:	f73f adbb 	bgt.w	8005efc <_dtoa_r+0x4b4>
 8006386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006388:	9d01      	ldr	r5, [sp, #4]
 800638a:	43db      	mvns	r3, r3
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	f04f 0800 	mov.w	r8, #0
 8006392:	4631      	mov	r1, r6
 8006394:	4620      	mov	r0, r4
 8006396:	f000 f99f 	bl	80066d8 <_Bfree>
 800639a:	2f00      	cmp	r7, #0
 800639c:	f43f aea4 	beq.w	80060e8 <_dtoa_r+0x6a0>
 80063a0:	f1b8 0f00 	cmp.w	r8, #0
 80063a4:	d005      	beq.n	80063b2 <_dtoa_r+0x96a>
 80063a6:	45b8      	cmp	r8, r7
 80063a8:	d003      	beq.n	80063b2 <_dtoa_r+0x96a>
 80063aa:	4641      	mov	r1, r8
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 f993 	bl	80066d8 <_Bfree>
 80063b2:	4639      	mov	r1, r7
 80063b4:	4620      	mov	r0, r4
 80063b6:	f000 f98f 	bl	80066d8 <_Bfree>
 80063ba:	e695      	b.n	80060e8 <_dtoa_r+0x6a0>
 80063bc:	2600      	movs	r6, #0
 80063be:	4637      	mov	r7, r6
 80063c0:	e7e1      	b.n	8006386 <_dtoa_r+0x93e>
 80063c2:	9700      	str	r7, [sp, #0]
 80063c4:	4637      	mov	r7, r6
 80063c6:	e599      	b.n	8005efc <_dtoa_r+0x4b4>
 80063c8:	40240000 	.word	0x40240000
 80063cc:	9b08      	ldr	r3, [sp, #32]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80ca 	beq.w	8006568 <_dtoa_r+0xb20>
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	9302      	str	r3, [sp, #8]
 80063d8:	2d00      	cmp	r5, #0
 80063da:	dd05      	ble.n	80063e8 <_dtoa_r+0x9a0>
 80063dc:	4639      	mov	r1, r7
 80063de:	462a      	mov	r2, r5
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fb4b 	bl	8006a7c <__lshift>
 80063e6:	4607      	mov	r7, r0
 80063e8:	f1b8 0f00 	cmp.w	r8, #0
 80063ec:	d05b      	beq.n	80064a6 <_dtoa_r+0xa5e>
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 f931 	bl	8006658 <_Balloc>
 80063f6:	4605      	mov	r5, r0
 80063f8:	b928      	cbnz	r0, 8006406 <_dtoa_r+0x9be>
 80063fa:	4b87      	ldr	r3, [pc, #540]	; (8006618 <_dtoa_r+0xbd0>)
 80063fc:	4602      	mov	r2, r0
 80063fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006402:	f7ff bb3b 	b.w	8005a7c <_dtoa_r+0x34>
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	3202      	adds	r2, #2
 800640a:	0092      	lsls	r2, r2, #2
 800640c:	f107 010c 	add.w	r1, r7, #12
 8006410:	300c      	adds	r0, #12
 8006412:	f000 f913 	bl	800663c <memcpy>
 8006416:	2201      	movs	r2, #1
 8006418:	4629      	mov	r1, r5
 800641a:	4620      	mov	r0, r4
 800641c:	f000 fb2e 	bl	8006a7c <__lshift>
 8006420:	9b01      	ldr	r3, [sp, #4]
 8006422:	f103 0901 	add.w	r9, r3, #1
 8006426:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800642a:	4413      	add	r3, r2
 800642c:	9305      	str	r3, [sp, #20]
 800642e:	f00a 0301 	and.w	r3, sl, #1
 8006432:	46b8      	mov	r8, r7
 8006434:	9304      	str	r3, [sp, #16]
 8006436:	4607      	mov	r7, r0
 8006438:	4631      	mov	r1, r6
 800643a:	ee18 0a10 	vmov	r0, s16
 800643e:	f7ff fa77 	bl	8005930 <quorem>
 8006442:	4641      	mov	r1, r8
 8006444:	9002      	str	r0, [sp, #8]
 8006446:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800644a:	ee18 0a10 	vmov	r0, s16
 800644e:	f000 fb85 	bl	8006b5c <__mcmp>
 8006452:	463a      	mov	r2, r7
 8006454:	9003      	str	r0, [sp, #12]
 8006456:	4631      	mov	r1, r6
 8006458:	4620      	mov	r0, r4
 800645a:	f000 fb9b 	bl	8006b94 <__mdiff>
 800645e:	68c2      	ldr	r2, [r0, #12]
 8006460:	f109 3bff 	add.w	fp, r9, #4294967295
 8006464:	4605      	mov	r5, r0
 8006466:	bb02      	cbnz	r2, 80064aa <_dtoa_r+0xa62>
 8006468:	4601      	mov	r1, r0
 800646a:	ee18 0a10 	vmov	r0, s16
 800646e:	f000 fb75 	bl	8006b5c <__mcmp>
 8006472:	4602      	mov	r2, r0
 8006474:	4629      	mov	r1, r5
 8006476:	4620      	mov	r0, r4
 8006478:	9207      	str	r2, [sp, #28]
 800647a:	f000 f92d 	bl	80066d8 <_Bfree>
 800647e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006482:	ea43 0102 	orr.w	r1, r3, r2
 8006486:	9b04      	ldr	r3, [sp, #16]
 8006488:	430b      	orrs	r3, r1
 800648a:	464d      	mov	r5, r9
 800648c:	d10f      	bne.n	80064ae <_dtoa_r+0xa66>
 800648e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006492:	d02a      	beq.n	80064ea <_dtoa_r+0xaa2>
 8006494:	9b03      	ldr	r3, [sp, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	dd02      	ble.n	80064a0 <_dtoa_r+0xa58>
 800649a:	9b02      	ldr	r3, [sp, #8]
 800649c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80064a0:	f88b a000 	strb.w	sl, [fp]
 80064a4:	e775      	b.n	8006392 <_dtoa_r+0x94a>
 80064a6:	4638      	mov	r0, r7
 80064a8:	e7ba      	b.n	8006420 <_dtoa_r+0x9d8>
 80064aa:	2201      	movs	r2, #1
 80064ac:	e7e2      	b.n	8006474 <_dtoa_r+0xa2c>
 80064ae:	9b03      	ldr	r3, [sp, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	db04      	blt.n	80064be <_dtoa_r+0xa76>
 80064b4:	9906      	ldr	r1, [sp, #24]
 80064b6:	430b      	orrs	r3, r1
 80064b8:	9904      	ldr	r1, [sp, #16]
 80064ba:	430b      	orrs	r3, r1
 80064bc:	d122      	bne.n	8006504 <_dtoa_r+0xabc>
 80064be:	2a00      	cmp	r2, #0
 80064c0:	ddee      	ble.n	80064a0 <_dtoa_r+0xa58>
 80064c2:	ee18 1a10 	vmov	r1, s16
 80064c6:	2201      	movs	r2, #1
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fad7 	bl	8006a7c <__lshift>
 80064ce:	4631      	mov	r1, r6
 80064d0:	ee08 0a10 	vmov	s16, r0
 80064d4:	f000 fb42 	bl	8006b5c <__mcmp>
 80064d8:	2800      	cmp	r0, #0
 80064da:	dc03      	bgt.n	80064e4 <_dtoa_r+0xa9c>
 80064dc:	d1e0      	bne.n	80064a0 <_dtoa_r+0xa58>
 80064de:	f01a 0f01 	tst.w	sl, #1
 80064e2:	d0dd      	beq.n	80064a0 <_dtoa_r+0xa58>
 80064e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064e8:	d1d7      	bne.n	800649a <_dtoa_r+0xa52>
 80064ea:	2339      	movs	r3, #57	; 0x39
 80064ec:	f88b 3000 	strb.w	r3, [fp]
 80064f0:	462b      	mov	r3, r5
 80064f2:	461d      	mov	r5, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064fa:	2a39      	cmp	r2, #57	; 0x39
 80064fc:	d071      	beq.n	80065e2 <_dtoa_r+0xb9a>
 80064fe:	3201      	adds	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	e746      	b.n	8006392 <_dtoa_r+0x94a>
 8006504:	2a00      	cmp	r2, #0
 8006506:	dd07      	ble.n	8006518 <_dtoa_r+0xad0>
 8006508:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800650c:	d0ed      	beq.n	80064ea <_dtoa_r+0xaa2>
 800650e:	f10a 0301 	add.w	r3, sl, #1
 8006512:	f88b 3000 	strb.w	r3, [fp]
 8006516:	e73c      	b.n	8006392 <_dtoa_r+0x94a>
 8006518:	9b05      	ldr	r3, [sp, #20]
 800651a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800651e:	4599      	cmp	r9, r3
 8006520:	d047      	beq.n	80065b2 <_dtoa_r+0xb6a>
 8006522:	ee18 1a10 	vmov	r1, s16
 8006526:	2300      	movs	r3, #0
 8006528:	220a      	movs	r2, #10
 800652a:	4620      	mov	r0, r4
 800652c:	f000 f8f6 	bl	800671c <__multadd>
 8006530:	45b8      	cmp	r8, r7
 8006532:	ee08 0a10 	vmov	s16, r0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	f04f 020a 	mov.w	r2, #10
 800653e:	4641      	mov	r1, r8
 8006540:	4620      	mov	r0, r4
 8006542:	d106      	bne.n	8006552 <_dtoa_r+0xb0a>
 8006544:	f000 f8ea 	bl	800671c <__multadd>
 8006548:	4680      	mov	r8, r0
 800654a:	4607      	mov	r7, r0
 800654c:	f109 0901 	add.w	r9, r9, #1
 8006550:	e772      	b.n	8006438 <_dtoa_r+0x9f0>
 8006552:	f000 f8e3 	bl	800671c <__multadd>
 8006556:	4639      	mov	r1, r7
 8006558:	4680      	mov	r8, r0
 800655a:	2300      	movs	r3, #0
 800655c:	220a      	movs	r2, #10
 800655e:	4620      	mov	r0, r4
 8006560:	f000 f8dc 	bl	800671c <__multadd>
 8006564:	4607      	mov	r7, r0
 8006566:	e7f1      	b.n	800654c <_dtoa_r+0xb04>
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	9302      	str	r3, [sp, #8]
 800656c:	9d01      	ldr	r5, [sp, #4]
 800656e:	ee18 0a10 	vmov	r0, s16
 8006572:	4631      	mov	r1, r6
 8006574:	f7ff f9dc 	bl	8005930 <quorem>
 8006578:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800657c:	9b01      	ldr	r3, [sp, #4]
 800657e:	f805 ab01 	strb.w	sl, [r5], #1
 8006582:	1aea      	subs	r2, r5, r3
 8006584:	9b02      	ldr	r3, [sp, #8]
 8006586:	4293      	cmp	r3, r2
 8006588:	dd09      	ble.n	800659e <_dtoa_r+0xb56>
 800658a:	ee18 1a10 	vmov	r1, s16
 800658e:	2300      	movs	r3, #0
 8006590:	220a      	movs	r2, #10
 8006592:	4620      	mov	r0, r4
 8006594:	f000 f8c2 	bl	800671c <__multadd>
 8006598:	ee08 0a10 	vmov	s16, r0
 800659c:	e7e7      	b.n	800656e <_dtoa_r+0xb26>
 800659e:	9b02      	ldr	r3, [sp, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bfc8      	it	gt
 80065a4:	461d      	movgt	r5, r3
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	bfd8      	it	le
 80065aa:	2501      	movle	r5, #1
 80065ac:	441d      	add	r5, r3
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	ee18 1a10 	vmov	r1, s16
 80065b6:	2201      	movs	r2, #1
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fa5f 	bl	8006a7c <__lshift>
 80065be:	4631      	mov	r1, r6
 80065c0:	ee08 0a10 	vmov	s16, r0
 80065c4:	f000 faca 	bl	8006b5c <__mcmp>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	dc91      	bgt.n	80064f0 <_dtoa_r+0xaa8>
 80065cc:	d102      	bne.n	80065d4 <_dtoa_r+0xb8c>
 80065ce:	f01a 0f01 	tst.w	sl, #1
 80065d2:	d18d      	bne.n	80064f0 <_dtoa_r+0xaa8>
 80065d4:	462b      	mov	r3, r5
 80065d6:	461d      	mov	r5, r3
 80065d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065dc:	2a30      	cmp	r2, #48	; 0x30
 80065de:	d0fa      	beq.n	80065d6 <_dtoa_r+0xb8e>
 80065e0:	e6d7      	b.n	8006392 <_dtoa_r+0x94a>
 80065e2:	9a01      	ldr	r2, [sp, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d184      	bne.n	80064f2 <_dtoa_r+0xaaa>
 80065e8:	9b00      	ldr	r3, [sp, #0]
 80065ea:	3301      	adds	r3, #1
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	2331      	movs	r3, #49	; 0x31
 80065f0:	7013      	strb	r3, [r2, #0]
 80065f2:	e6ce      	b.n	8006392 <_dtoa_r+0x94a>
 80065f4:	4b09      	ldr	r3, [pc, #36]	; (800661c <_dtoa_r+0xbd4>)
 80065f6:	f7ff ba95 	b.w	8005b24 <_dtoa_r+0xdc>
 80065fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f47f aa6e 	bne.w	8005ade <_dtoa_r+0x96>
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <_dtoa_r+0xbd8>)
 8006604:	f7ff ba8e 	b.w	8005b24 <_dtoa_r+0xdc>
 8006608:	9b02      	ldr	r3, [sp, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	dcae      	bgt.n	800656c <_dtoa_r+0xb24>
 800660e:	9b06      	ldr	r3, [sp, #24]
 8006610:	2b02      	cmp	r3, #2
 8006612:	f73f aea8 	bgt.w	8006366 <_dtoa_r+0x91e>
 8006616:	e7a9      	b.n	800656c <_dtoa_r+0xb24>
 8006618:	08007f7f 	.word	0x08007f7f
 800661c:	08007edc 	.word	0x08007edc
 8006620:	08007f00 	.word	0x08007f00

08006624 <_localeconv_r>:
 8006624:	4800      	ldr	r0, [pc, #0]	; (8006628 <_localeconv_r+0x4>)
 8006626:	4770      	bx	lr
 8006628:	20000168 	.word	0x20000168

0800662c <malloc>:
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <malloc+0xc>)
 800662e:	4601      	mov	r1, r0
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	f000 bc17 	b.w	8006e64 <_malloc_r>
 8006636:	bf00      	nop
 8006638:	20000014 	.word	0x20000014

0800663c <memcpy>:
 800663c:	440a      	add	r2, r1
 800663e:	4291      	cmp	r1, r2
 8006640:	f100 33ff 	add.w	r3, r0, #4294967295
 8006644:	d100      	bne.n	8006648 <memcpy+0xc>
 8006646:	4770      	bx	lr
 8006648:	b510      	push	{r4, lr}
 800664a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800664e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006652:	4291      	cmp	r1, r2
 8006654:	d1f9      	bne.n	800664a <memcpy+0xe>
 8006656:	bd10      	pop	{r4, pc}

08006658 <_Balloc>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800665c:	4604      	mov	r4, r0
 800665e:	460d      	mov	r5, r1
 8006660:	b976      	cbnz	r6, 8006680 <_Balloc+0x28>
 8006662:	2010      	movs	r0, #16
 8006664:	f7ff ffe2 	bl	800662c <malloc>
 8006668:	4602      	mov	r2, r0
 800666a:	6260      	str	r0, [r4, #36]	; 0x24
 800666c:	b920      	cbnz	r0, 8006678 <_Balloc+0x20>
 800666e:	4b18      	ldr	r3, [pc, #96]	; (80066d0 <_Balloc+0x78>)
 8006670:	4818      	ldr	r0, [pc, #96]	; (80066d4 <_Balloc+0x7c>)
 8006672:	2166      	movs	r1, #102	; 0x66
 8006674:	f000 fdd6 	bl	8007224 <__assert_func>
 8006678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800667c:	6006      	str	r6, [r0, #0]
 800667e:	60c6      	str	r6, [r0, #12]
 8006680:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006682:	68f3      	ldr	r3, [r6, #12]
 8006684:	b183      	cbz	r3, 80066a8 <_Balloc+0x50>
 8006686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800668e:	b9b8      	cbnz	r0, 80066c0 <_Balloc+0x68>
 8006690:	2101      	movs	r1, #1
 8006692:	fa01 f605 	lsl.w	r6, r1, r5
 8006696:	1d72      	adds	r2, r6, #5
 8006698:	0092      	lsls	r2, r2, #2
 800669a:	4620      	mov	r0, r4
 800669c:	f000 fb60 	bl	8006d60 <_calloc_r>
 80066a0:	b160      	cbz	r0, 80066bc <_Balloc+0x64>
 80066a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066a6:	e00e      	b.n	80066c6 <_Balloc+0x6e>
 80066a8:	2221      	movs	r2, #33	; 0x21
 80066aa:	2104      	movs	r1, #4
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 fb57 	bl	8006d60 <_calloc_r>
 80066b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066b4:	60f0      	str	r0, [r6, #12]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e4      	bne.n	8006686 <_Balloc+0x2e>
 80066bc:	2000      	movs	r0, #0
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	6802      	ldr	r2, [r0, #0]
 80066c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066c6:	2300      	movs	r3, #0
 80066c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066cc:	e7f7      	b.n	80066be <_Balloc+0x66>
 80066ce:	bf00      	nop
 80066d0:	08007f0d 	.word	0x08007f0d
 80066d4:	08007f90 	.word	0x08007f90

080066d8 <_Bfree>:
 80066d8:	b570      	push	{r4, r5, r6, lr}
 80066da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066dc:	4605      	mov	r5, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	b976      	cbnz	r6, 8006700 <_Bfree+0x28>
 80066e2:	2010      	movs	r0, #16
 80066e4:	f7ff ffa2 	bl	800662c <malloc>
 80066e8:	4602      	mov	r2, r0
 80066ea:	6268      	str	r0, [r5, #36]	; 0x24
 80066ec:	b920      	cbnz	r0, 80066f8 <_Bfree+0x20>
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <_Bfree+0x3c>)
 80066f0:	4809      	ldr	r0, [pc, #36]	; (8006718 <_Bfree+0x40>)
 80066f2:	218a      	movs	r1, #138	; 0x8a
 80066f4:	f000 fd96 	bl	8007224 <__assert_func>
 80066f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066fc:	6006      	str	r6, [r0, #0]
 80066fe:	60c6      	str	r6, [r0, #12]
 8006700:	b13c      	cbz	r4, 8006712 <_Bfree+0x3a>
 8006702:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006704:	6862      	ldr	r2, [r4, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800670c:	6021      	str	r1, [r4, #0]
 800670e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	08007f0d 	.word	0x08007f0d
 8006718:	08007f90 	.word	0x08007f90

0800671c <__multadd>:
 800671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006720:	690d      	ldr	r5, [r1, #16]
 8006722:	4607      	mov	r7, r0
 8006724:	460c      	mov	r4, r1
 8006726:	461e      	mov	r6, r3
 8006728:	f101 0c14 	add.w	ip, r1, #20
 800672c:	2000      	movs	r0, #0
 800672e:	f8dc 3000 	ldr.w	r3, [ip]
 8006732:	b299      	uxth	r1, r3
 8006734:	fb02 6101 	mla	r1, r2, r1, r6
 8006738:	0c1e      	lsrs	r6, r3, #16
 800673a:	0c0b      	lsrs	r3, r1, #16
 800673c:	fb02 3306 	mla	r3, r2, r6, r3
 8006740:	b289      	uxth	r1, r1
 8006742:	3001      	adds	r0, #1
 8006744:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006748:	4285      	cmp	r5, r0
 800674a:	f84c 1b04 	str.w	r1, [ip], #4
 800674e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006752:	dcec      	bgt.n	800672e <__multadd+0x12>
 8006754:	b30e      	cbz	r6, 800679a <__multadd+0x7e>
 8006756:	68a3      	ldr	r3, [r4, #8]
 8006758:	42ab      	cmp	r3, r5
 800675a:	dc19      	bgt.n	8006790 <__multadd+0x74>
 800675c:	6861      	ldr	r1, [r4, #4]
 800675e:	4638      	mov	r0, r7
 8006760:	3101      	adds	r1, #1
 8006762:	f7ff ff79 	bl	8006658 <_Balloc>
 8006766:	4680      	mov	r8, r0
 8006768:	b928      	cbnz	r0, 8006776 <__multadd+0x5a>
 800676a:	4602      	mov	r2, r0
 800676c:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <__multadd+0x84>)
 800676e:	480d      	ldr	r0, [pc, #52]	; (80067a4 <__multadd+0x88>)
 8006770:	21b5      	movs	r1, #181	; 0xb5
 8006772:	f000 fd57 	bl	8007224 <__assert_func>
 8006776:	6922      	ldr	r2, [r4, #16]
 8006778:	3202      	adds	r2, #2
 800677a:	f104 010c 	add.w	r1, r4, #12
 800677e:	0092      	lsls	r2, r2, #2
 8006780:	300c      	adds	r0, #12
 8006782:	f7ff ff5b 	bl	800663c <memcpy>
 8006786:	4621      	mov	r1, r4
 8006788:	4638      	mov	r0, r7
 800678a:	f7ff ffa5 	bl	80066d8 <_Bfree>
 800678e:	4644      	mov	r4, r8
 8006790:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006794:	3501      	adds	r5, #1
 8006796:	615e      	str	r6, [r3, #20]
 8006798:	6125      	str	r5, [r4, #16]
 800679a:	4620      	mov	r0, r4
 800679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a0:	08007f7f 	.word	0x08007f7f
 80067a4:	08007f90 	.word	0x08007f90

080067a8 <__hi0bits>:
 80067a8:	0c03      	lsrs	r3, r0, #16
 80067aa:	041b      	lsls	r3, r3, #16
 80067ac:	b9d3      	cbnz	r3, 80067e4 <__hi0bits+0x3c>
 80067ae:	0400      	lsls	r0, r0, #16
 80067b0:	2310      	movs	r3, #16
 80067b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80067b6:	bf04      	itt	eq
 80067b8:	0200      	lsleq	r0, r0, #8
 80067ba:	3308      	addeq	r3, #8
 80067bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80067c0:	bf04      	itt	eq
 80067c2:	0100      	lsleq	r0, r0, #4
 80067c4:	3304      	addeq	r3, #4
 80067c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80067ca:	bf04      	itt	eq
 80067cc:	0080      	lsleq	r0, r0, #2
 80067ce:	3302      	addeq	r3, #2
 80067d0:	2800      	cmp	r0, #0
 80067d2:	db05      	blt.n	80067e0 <__hi0bits+0x38>
 80067d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80067d8:	f103 0301 	add.w	r3, r3, #1
 80067dc:	bf08      	it	eq
 80067de:	2320      	moveq	r3, #32
 80067e0:	4618      	mov	r0, r3
 80067e2:	4770      	bx	lr
 80067e4:	2300      	movs	r3, #0
 80067e6:	e7e4      	b.n	80067b2 <__hi0bits+0xa>

080067e8 <__lo0bits>:
 80067e8:	6803      	ldr	r3, [r0, #0]
 80067ea:	f013 0207 	ands.w	r2, r3, #7
 80067ee:	4601      	mov	r1, r0
 80067f0:	d00b      	beq.n	800680a <__lo0bits+0x22>
 80067f2:	07da      	lsls	r2, r3, #31
 80067f4:	d423      	bmi.n	800683e <__lo0bits+0x56>
 80067f6:	0798      	lsls	r0, r3, #30
 80067f8:	bf49      	itett	mi
 80067fa:	085b      	lsrmi	r3, r3, #1
 80067fc:	089b      	lsrpl	r3, r3, #2
 80067fe:	2001      	movmi	r0, #1
 8006800:	600b      	strmi	r3, [r1, #0]
 8006802:	bf5c      	itt	pl
 8006804:	600b      	strpl	r3, [r1, #0]
 8006806:	2002      	movpl	r0, #2
 8006808:	4770      	bx	lr
 800680a:	b298      	uxth	r0, r3
 800680c:	b9a8      	cbnz	r0, 800683a <__lo0bits+0x52>
 800680e:	0c1b      	lsrs	r3, r3, #16
 8006810:	2010      	movs	r0, #16
 8006812:	b2da      	uxtb	r2, r3
 8006814:	b90a      	cbnz	r2, 800681a <__lo0bits+0x32>
 8006816:	3008      	adds	r0, #8
 8006818:	0a1b      	lsrs	r3, r3, #8
 800681a:	071a      	lsls	r2, r3, #28
 800681c:	bf04      	itt	eq
 800681e:	091b      	lsreq	r3, r3, #4
 8006820:	3004      	addeq	r0, #4
 8006822:	079a      	lsls	r2, r3, #30
 8006824:	bf04      	itt	eq
 8006826:	089b      	lsreq	r3, r3, #2
 8006828:	3002      	addeq	r0, #2
 800682a:	07da      	lsls	r2, r3, #31
 800682c:	d403      	bmi.n	8006836 <__lo0bits+0x4e>
 800682e:	085b      	lsrs	r3, r3, #1
 8006830:	f100 0001 	add.w	r0, r0, #1
 8006834:	d005      	beq.n	8006842 <__lo0bits+0x5a>
 8006836:	600b      	str	r3, [r1, #0]
 8006838:	4770      	bx	lr
 800683a:	4610      	mov	r0, r2
 800683c:	e7e9      	b.n	8006812 <__lo0bits+0x2a>
 800683e:	2000      	movs	r0, #0
 8006840:	4770      	bx	lr
 8006842:	2020      	movs	r0, #32
 8006844:	4770      	bx	lr
	...

08006848 <__i2b>:
 8006848:	b510      	push	{r4, lr}
 800684a:	460c      	mov	r4, r1
 800684c:	2101      	movs	r1, #1
 800684e:	f7ff ff03 	bl	8006658 <_Balloc>
 8006852:	4602      	mov	r2, r0
 8006854:	b928      	cbnz	r0, 8006862 <__i2b+0x1a>
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <__i2b+0x24>)
 8006858:	4805      	ldr	r0, [pc, #20]	; (8006870 <__i2b+0x28>)
 800685a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800685e:	f000 fce1 	bl	8007224 <__assert_func>
 8006862:	2301      	movs	r3, #1
 8006864:	6144      	str	r4, [r0, #20]
 8006866:	6103      	str	r3, [r0, #16]
 8006868:	bd10      	pop	{r4, pc}
 800686a:	bf00      	nop
 800686c:	08007f7f 	.word	0x08007f7f
 8006870:	08007f90 	.word	0x08007f90

08006874 <__multiply>:
 8006874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	4691      	mov	r9, r2
 800687a:	690a      	ldr	r2, [r1, #16]
 800687c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006880:	429a      	cmp	r2, r3
 8006882:	bfb8      	it	lt
 8006884:	460b      	movlt	r3, r1
 8006886:	460c      	mov	r4, r1
 8006888:	bfbc      	itt	lt
 800688a:	464c      	movlt	r4, r9
 800688c:	4699      	movlt	r9, r3
 800688e:	6927      	ldr	r7, [r4, #16]
 8006890:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006894:	68a3      	ldr	r3, [r4, #8]
 8006896:	6861      	ldr	r1, [r4, #4]
 8006898:	eb07 060a 	add.w	r6, r7, sl
 800689c:	42b3      	cmp	r3, r6
 800689e:	b085      	sub	sp, #20
 80068a0:	bfb8      	it	lt
 80068a2:	3101      	addlt	r1, #1
 80068a4:	f7ff fed8 	bl	8006658 <_Balloc>
 80068a8:	b930      	cbnz	r0, 80068b8 <__multiply+0x44>
 80068aa:	4602      	mov	r2, r0
 80068ac:	4b44      	ldr	r3, [pc, #272]	; (80069c0 <__multiply+0x14c>)
 80068ae:	4845      	ldr	r0, [pc, #276]	; (80069c4 <__multiply+0x150>)
 80068b0:	f240 115d 	movw	r1, #349	; 0x15d
 80068b4:	f000 fcb6 	bl	8007224 <__assert_func>
 80068b8:	f100 0514 	add.w	r5, r0, #20
 80068bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068c0:	462b      	mov	r3, r5
 80068c2:	2200      	movs	r2, #0
 80068c4:	4543      	cmp	r3, r8
 80068c6:	d321      	bcc.n	800690c <__multiply+0x98>
 80068c8:	f104 0314 	add.w	r3, r4, #20
 80068cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068d0:	f109 0314 	add.w	r3, r9, #20
 80068d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068d8:	9202      	str	r2, [sp, #8]
 80068da:	1b3a      	subs	r2, r7, r4
 80068dc:	3a15      	subs	r2, #21
 80068de:	f022 0203 	bic.w	r2, r2, #3
 80068e2:	3204      	adds	r2, #4
 80068e4:	f104 0115 	add.w	r1, r4, #21
 80068e8:	428f      	cmp	r7, r1
 80068ea:	bf38      	it	cc
 80068ec:	2204      	movcc	r2, #4
 80068ee:	9201      	str	r2, [sp, #4]
 80068f0:	9a02      	ldr	r2, [sp, #8]
 80068f2:	9303      	str	r3, [sp, #12]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d80c      	bhi.n	8006912 <__multiply+0x9e>
 80068f8:	2e00      	cmp	r6, #0
 80068fa:	dd03      	ble.n	8006904 <__multiply+0x90>
 80068fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006900:	2b00      	cmp	r3, #0
 8006902:	d05a      	beq.n	80069ba <__multiply+0x146>
 8006904:	6106      	str	r6, [r0, #16]
 8006906:	b005      	add	sp, #20
 8006908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690c:	f843 2b04 	str.w	r2, [r3], #4
 8006910:	e7d8      	b.n	80068c4 <__multiply+0x50>
 8006912:	f8b3 a000 	ldrh.w	sl, [r3]
 8006916:	f1ba 0f00 	cmp.w	sl, #0
 800691a:	d024      	beq.n	8006966 <__multiply+0xf2>
 800691c:	f104 0e14 	add.w	lr, r4, #20
 8006920:	46a9      	mov	r9, r5
 8006922:	f04f 0c00 	mov.w	ip, #0
 8006926:	f85e 2b04 	ldr.w	r2, [lr], #4
 800692a:	f8d9 1000 	ldr.w	r1, [r9]
 800692e:	fa1f fb82 	uxth.w	fp, r2
 8006932:	b289      	uxth	r1, r1
 8006934:	fb0a 110b 	mla	r1, sl, fp, r1
 8006938:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800693c:	f8d9 2000 	ldr.w	r2, [r9]
 8006940:	4461      	add	r1, ip
 8006942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006946:	fb0a c20b 	mla	r2, sl, fp, ip
 800694a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800694e:	b289      	uxth	r1, r1
 8006950:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006954:	4577      	cmp	r7, lr
 8006956:	f849 1b04 	str.w	r1, [r9], #4
 800695a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800695e:	d8e2      	bhi.n	8006926 <__multiply+0xb2>
 8006960:	9a01      	ldr	r2, [sp, #4]
 8006962:	f845 c002 	str.w	ip, [r5, r2]
 8006966:	9a03      	ldr	r2, [sp, #12]
 8006968:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800696c:	3304      	adds	r3, #4
 800696e:	f1b9 0f00 	cmp.w	r9, #0
 8006972:	d020      	beq.n	80069b6 <__multiply+0x142>
 8006974:	6829      	ldr	r1, [r5, #0]
 8006976:	f104 0c14 	add.w	ip, r4, #20
 800697a:	46ae      	mov	lr, r5
 800697c:	f04f 0a00 	mov.w	sl, #0
 8006980:	f8bc b000 	ldrh.w	fp, [ip]
 8006984:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006988:	fb09 220b 	mla	r2, r9, fp, r2
 800698c:	4492      	add	sl, r2
 800698e:	b289      	uxth	r1, r1
 8006990:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006994:	f84e 1b04 	str.w	r1, [lr], #4
 8006998:	f85c 2b04 	ldr.w	r2, [ip], #4
 800699c:	f8be 1000 	ldrh.w	r1, [lr]
 80069a0:	0c12      	lsrs	r2, r2, #16
 80069a2:	fb09 1102 	mla	r1, r9, r2, r1
 80069a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80069aa:	4567      	cmp	r7, ip
 80069ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069b0:	d8e6      	bhi.n	8006980 <__multiply+0x10c>
 80069b2:	9a01      	ldr	r2, [sp, #4]
 80069b4:	50a9      	str	r1, [r5, r2]
 80069b6:	3504      	adds	r5, #4
 80069b8:	e79a      	b.n	80068f0 <__multiply+0x7c>
 80069ba:	3e01      	subs	r6, #1
 80069bc:	e79c      	b.n	80068f8 <__multiply+0x84>
 80069be:	bf00      	nop
 80069c0:	08007f7f 	.word	0x08007f7f
 80069c4:	08007f90 	.word	0x08007f90

080069c8 <__pow5mult>:
 80069c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069cc:	4615      	mov	r5, r2
 80069ce:	f012 0203 	ands.w	r2, r2, #3
 80069d2:	4606      	mov	r6, r0
 80069d4:	460f      	mov	r7, r1
 80069d6:	d007      	beq.n	80069e8 <__pow5mult+0x20>
 80069d8:	4c25      	ldr	r4, [pc, #148]	; (8006a70 <__pow5mult+0xa8>)
 80069da:	3a01      	subs	r2, #1
 80069dc:	2300      	movs	r3, #0
 80069de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069e2:	f7ff fe9b 	bl	800671c <__multadd>
 80069e6:	4607      	mov	r7, r0
 80069e8:	10ad      	asrs	r5, r5, #2
 80069ea:	d03d      	beq.n	8006a68 <__pow5mult+0xa0>
 80069ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069ee:	b97c      	cbnz	r4, 8006a10 <__pow5mult+0x48>
 80069f0:	2010      	movs	r0, #16
 80069f2:	f7ff fe1b 	bl	800662c <malloc>
 80069f6:	4602      	mov	r2, r0
 80069f8:	6270      	str	r0, [r6, #36]	; 0x24
 80069fa:	b928      	cbnz	r0, 8006a08 <__pow5mult+0x40>
 80069fc:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <__pow5mult+0xac>)
 80069fe:	481e      	ldr	r0, [pc, #120]	; (8006a78 <__pow5mult+0xb0>)
 8006a00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a04:	f000 fc0e 	bl	8007224 <__assert_func>
 8006a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a0c:	6004      	str	r4, [r0, #0]
 8006a0e:	60c4      	str	r4, [r0, #12]
 8006a10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a18:	b94c      	cbnz	r4, 8006a2e <__pow5mult+0x66>
 8006a1a:	f240 2171 	movw	r1, #625	; 0x271
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ff12 	bl	8006848 <__i2b>
 8006a24:	2300      	movs	r3, #0
 8006a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	6003      	str	r3, [r0, #0]
 8006a2e:	f04f 0900 	mov.w	r9, #0
 8006a32:	07eb      	lsls	r3, r5, #31
 8006a34:	d50a      	bpl.n	8006a4c <__pow5mult+0x84>
 8006a36:	4639      	mov	r1, r7
 8006a38:	4622      	mov	r2, r4
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f7ff ff1a 	bl	8006874 <__multiply>
 8006a40:	4639      	mov	r1, r7
 8006a42:	4680      	mov	r8, r0
 8006a44:	4630      	mov	r0, r6
 8006a46:	f7ff fe47 	bl	80066d8 <_Bfree>
 8006a4a:	4647      	mov	r7, r8
 8006a4c:	106d      	asrs	r5, r5, #1
 8006a4e:	d00b      	beq.n	8006a68 <__pow5mult+0xa0>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	b938      	cbnz	r0, 8006a64 <__pow5mult+0x9c>
 8006a54:	4622      	mov	r2, r4
 8006a56:	4621      	mov	r1, r4
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff ff0b 	bl	8006874 <__multiply>
 8006a5e:	6020      	str	r0, [r4, #0]
 8006a60:	f8c0 9000 	str.w	r9, [r0]
 8006a64:	4604      	mov	r4, r0
 8006a66:	e7e4      	b.n	8006a32 <__pow5mult+0x6a>
 8006a68:	4638      	mov	r0, r7
 8006a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a6e:	bf00      	nop
 8006a70:	080080e0 	.word	0x080080e0
 8006a74:	08007f0d 	.word	0x08007f0d
 8006a78:	08007f90 	.word	0x08007f90

08006a7c <__lshift>:
 8006a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a80:	460c      	mov	r4, r1
 8006a82:	6849      	ldr	r1, [r1, #4]
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a8a:	68a3      	ldr	r3, [r4, #8]
 8006a8c:	4607      	mov	r7, r0
 8006a8e:	4691      	mov	r9, r2
 8006a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a94:	f108 0601 	add.w	r6, r8, #1
 8006a98:	42b3      	cmp	r3, r6
 8006a9a:	db0b      	blt.n	8006ab4 <__lshift+0x38>
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7ff fddb 	bl	8006658 <_Balloc>
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	b948      	cbnz	r0, 8006aba <__lshift+0x3e>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <__lshift+0xd8>)
 8006aaa:	482b      	ldr	r0, [pc, #172]	; (8006b58 <__lshift+0xdc>)
 8006aac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ab0:	f000 fbb8 	bl	8007224 <__assert_func>
 8006ab4:	3101      	adds	r1, #1
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	e7ee      	b.n	8006a98 <__lshift+0x1c>
 8006aba:	2300      	movs	r3, #0
 8006abc:	f100 0114 	add.w	r1, r0, #20
 8006ac0:	f100 0210 	add.w	r2, r0, #16
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	4553      	cmp	r3, sl
 8006ac8:	db37      	blt.n	8006b3a <__lshift+0xbe>
 8006aca:	6920      	ldr	r0, [r4, #16]
 8006acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ad0:	f104 0314 	add.w	r3, r4, #20
 8006ad4:	f019 091f 	ands.w	r9, r9, #31
 8006ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006adc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ae0:	d02f      	beq.n	8006b42 <__lshift+0xc6>
 8006ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8006ae6:	468a      	mov	sl, r1
 8006ae8:	f04f 0c00 	mov.w	ip, #0
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	fa02 f209 	lsl.w	r2, r2, r9
 8006af2:	ea42 020c 	orr.w	r2, r2, ip
 8006af6:	f84a 2b04 	str.w	r2, [sl], #4
 8006afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006afe:	4298      	cmp	r0, r3
 8006b00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b04:	d8f2      	bhi.n	8006aec <__lshift+0x70>
 8006b06:	1b03      	subs	r3, r0, r4
 8006b08:	3b15      	subs	r3, #21
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	3304      	adds	r3, #4
 8006b10:	f104 0215 	add.w	r2, r4, #21
 8006b14:	4290      	cmp	r0, r2
 8006b16:	bf38      	it	cc
 8006b18:	2304      	movcc	r3, #4
 8006b1a:	f841 c003 	str.w	ip, [r1, r3]
 8006b1e:	f1bc 0f00 	cmp.w	ip, #0
 8006b22:	d001      	beq.n	8006b28 <__lshift+0xac>
 8006b24:	f108 0602 	add.w	r6, r8, #2
 8006b28:	3e01      	subs	r6, #1
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	612e      	str	r6, [r5, #16]
 8006b2e:	4621      	mov	r1, r4
 8006b30:	f7ff fdd2 	bl	80066d8 <_Bfree>
 8006b34:	4628      	mov	r0, r5
 8006b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b3e:	3301      	adds	r3, #1
 8006b40:	e7c1      	b.n	8006ac6 <__lshift+0x4a>
 8006b42:	3904      	subs	r1, #4
 8006b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b48:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b4c:	4298      	cmp	r0, r3
 8006b4e:	d8f9      	bhi.n	8006b44 <__lshift+0xc8>
 8006b50:	e7ea      	b.n	8006b28 <__lshift+0xac>
 8006b52:	bf00      	nop
 8006b54:	08007f7f 	.word	0x08007f7f
 8006b58:	08007f90 	.word	0x08007f90

08006b5c <__mcmp>:
 8006b5c:	b530      	push	{r4, r5, lr}
 8006b5e:	6902      	ldr	r2, [r0, #16]
 8006b60:	690c      	ldr	r4, [r1, #16]
 8006b62:	1b12      	subs	r2, r2, r4
 8006b64:	d10e      	bne.n	8006b84 <__mcmp+0x28>
 8006b66:	f100 0314 	add.w	r3, r0, #20
 8006b6a:	3114      	adds	r1, #20
 8006b6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006b70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006b74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b7c:	42a5      	cmp	r5, r4
 8006b7e:	d003      	beq.n	8006b88 <__mcmp+0x2c>
 8006b80:	d305      	bcc.n	8006b8e <__mcmp+0x32>
 8006b82:	2201      	movs	r2, #1
 8006b84:	4610      	mov	r0, r2
 8006b86:	bd30      	pop	{r4, r5, pc}
 8006b88:	4283      	cmp	r3, r0
 8006b8a:	d3f3      	bcc.n	8006b74 <__mcmp+0x18>
 8006b8c:	e7fa      	b.n	8006b84 <__mcmp+0x28>
 8006b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b92:	e7f7      	b.n	8006b84 <__mcmp+0x28>

08006b94 <__mdiff>:
 8006b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b98:	460c      	mov	r4, r1
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	4690      	mov	r8, r2
 8006ba2:	f7ff ffdb 	bl	8006b5c <__mcmp>
 8006ba6:	1e05      	subs	r5, r0, #0
 8006ba8:	d110      	bne.n	8006bcc <__mdiff+0x38>
 8006baa:	4629      	mov	r1, r5
 8006bac:	4630      	mov	r0, r6
 8006bae:	f7ff fd53 	bl	8006658 <_Balloc>
 8006bb2:	b930      	cbnz	r0, 8006bc2 <__mdiff+0x2e>
 8006bb4:	4b3a      	ldr	r3, [pc, #232]	; (8006ca0 <__mdiff+0x10c>)
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	f240 2132 	movw	r1, #562	; 0x232
 8006bbc:	4839      	ldr	r0, [pc, #228]	; (8006ca4 <__mdiff+0x110>)
 8006bbe:	f000 fb31 	bl	8007224 <__assert_func>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bcc:	bfa4      	itt	ge
 8006bce:	4643      	movge	r3, r8
 8006bd0:	46a0      	movge	r8, r4
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bd8:	bfa6      	itte	ge
 8006bda:	461c      	movge	r4, r3
 8006bdc:	2500      	movge	r5, #0
 8006bde:	2501      	movlt	r5, #1
 8006be0:	f7ff fd3a 	bl	8006658 <_Balloc>
 8006be4:	b920      	cbnz	r0, 8006bf0 <__mdiff+0x5c>
 8006be6:	4b2e      	ldr	r3, [pc, #184]	; (8006ca0 <__mdiff+0x10c>)
 8006be8:	4602      	mov	r2, r0
 8006bea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006bee:	e7e5      	b.n	8006bbc <__mdiff+0x28>
 8006bf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006bf4:	6926      	ldr	r6, [r4, #16]
 8006bf6:	60c5      	str	r5, [r0, #12]
 8006bf8:	f104 0914 	add.w	r9, r4, #20
 8006bfc:	f108 0514 	add.w	r5, r8, #20
 8006c00:	f100 0e14 	add.w	lr, r0, #20
 8006c04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006c08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c0c:	f108 0210 	add.w	r2, r8, #16
 8006c10:	46f2      	mov	sl, lr
 8006c12:	2100      	movs	r1, #0
 8006c14:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c1c:	fa1f f883 	uxth.w	r8, r3
 8006c20:	fa11 f18b 	uxtah	r1, r1, fp
 8006c24:	0c1b      	lsrs	r3, r3, #16
 8006c26:	eba1 0808 	sub.w	r8, r1, r8
 8006c2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c32:	fa1f f888 	uxth.w	r8, r8
 8006c36:	1419      	asrs	r1, r3, #16
 8006c38:	454e      	cmp	r6, r9
 8006c3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c3e:	f84a 3b04 	str.w	r3, [sl], #4
 8006c42:	d8e7      	bhi.n	8006c14 <__mdiff+0x80>
 8006c44:	1b33      	subs	r3, r6, r4
 8006c46:	3b15      	subs	r3, #21
 8006c48:	f023 0303 	bic.w	r3, r3, #3
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	3415      	adds	r4, #21
 8006c50:	42a6      	cmp	r6, r4
 8006c52:	bf38      	it	cc
 8006c54:	2304      	movcc	r3, #4
 8006c56:	441d      	add	r5, r3
 8006c58:	4473      	add	r3, lr
 8006c5a:	469e      	mov	lr, r3
 8006c5c:	462e      	mov	r6, r5
 8006c5e:	4566      	cmp	r6, ip
 8006c60:	d30e      	bcc.n	8006c80 <__mdiff+0xec>
 8006c62:	f10c 0203 	add.w	r2, ip, #3
 8006c66:	1b52      	subs	r2, r2, r5
 8006c68:	f022 0203 	bic.w	r2, r2, #3
 8006c6c:	3d03      	subs	r5, #3
 8006c6e:	45ac      	cmp	ip, r5
 8006c70:	bf38      	it	cc
 8006c72:	2200      	movcc	r2, #0
 8006c74:	441a      	add	r2, r3
 8006c76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006c7a:	b17b      	cbz	r3, 8006c9c <__mdiff+0x108>
 8006c7c:	6107      	str	r7, [r0, #16]
 8006c7e:	e7a3      	b.n	8006bc8 <__mdiff+0x34>
 8006c80:	f856 8b04 	ldr.w	r8, [r6], #4
 8006c84:	fa11 f288 	uxtah	r2, r1, r8
 8006c88:	1414      	asrs	r4, r2, #16
 8006c8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c8e:	b292      	uxth	r2, r2
 8006c90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006c94:	f84e 2b04 	str.w	r2, [lr], #4
 8006c98:	1421      	asrs	r1, r4, #16
 8006c9a:	e7e0      	b.n	8006c5e <__mdiff+0xca>
 8006c9c:	3f01      	subs	r7, #1
 8006c9e:	e7ea      	b.n	8006c76 <__mdiff+0xe2>
 8006ca0:	08007f7f 	.word	0x08007f7f
 8006ca4:	08007f90 	.word	0x08007f90

08006ca8 <__d2b>:
 8006ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cac:	4689      	mov	r9, r1
 8006cae:	2101      	movs	r1, #1
 8006cb0:	ec57 6b10 	vmov	r6, r7, d0
 8006cb4:	4690      	mov	r8, r2
 8006cb6:	f7ff fccf 	bl	8006658 <_Balloc>
 8006cba:	4604      	mov	r4, r0
 8006cbc:	b930      	cbnz	r0, 8006ccc <__d2b+0x24>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	4b25      	ldr	r3, [pc, #148]	; (8006d58 <__d2b+0xb0>)
 8006cc2:	4826      	ldr	r0, [pc, #152]	; (8006d5c <__d2b+0xb4>)
 8006cc4:	f240 310a 	movw	r1, #778	; 0x30a
 8006cc8:	f000 faac 	bl	8007224 <__assert_func>
 8006ccc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006cd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cd4:	bb35      	cbnz	r5, 8006d24 <__d2b+0x7c>
 8006cd6:	2e00      	cmp	r6, #0
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	d028      	beq.n	8006d2e <__d2b+0x86>
 8006cdc:	4668      	mov	r0, sp
 8006cde:	9600      	str	r6, [sp, #0]
 8006ce0:	f7ff fd82 	bl	80067e8 <__lo0bits>
 8006ce4:	9900      	ldr	r1, [sp, #0]
 8006ce6:	b300      	cbz	r0, 8006d2a <__d2b+0x82>
 8006ce8:	9a01      	ldr	r2, [sp, #4]
 8006cea:	f1c0 0320 	rsb	r3, r0, #32
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	40c2      	lsrs	r2, r0
 8006cf6:	6163      	str	r3, [r4, #20]
 8006cf8:	9201      	str	r2, [sp, #4]
 8006cfa:	9b01      	ldr	r3, [sp, #4]
 8006cfc:	61a3      	str	r3, [r4, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bf14      	ite	ne
 8006d02:	2202      	movne	r2, #2
 8006d04:	2201      	moveq	r2, #1
 8006d06:	6122      	str	r2, [r4, #16]
 8006d08:	b1d5      	cbz	r5, 8006d40 <__d2b+0x98>
 8006d0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d0e:	4405      	add	r5, r0
 8006d10:	f8c9 5000 	str.w	r5, [r9]
 8006d14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d18:	f8c8 0000 	str.w	r0, [r8]
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	b003      	add	sp, #12
 8006d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d28:	e7d5      	b.n	8006cd6 <__d2b+0x2e>
 8006d2a:	6161      	str	r1, [r4, #20]
 8006d2c:	e7e5      	b.n	8006cfa <__d2b+0x52>
 8006d2e:	a801      	add	r0, sp, #4
 8006d30:	f7ff fd5a 	bl	80067e8 <__lo0bits>
 8006d34:	9b01      	ldr	r3, [sp, #4]
 8006d36:	6163      	str	r3, [r4, #20]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	6122      	str	r2, [r4, #16]
 8006d3c:	3020      	adds	r0, #32
 8006d3e:	e7e3      	b.n	8006d08 <__d2b+0x60>
 8006d40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d48:	f8c9 0000 	str.w	r0, [r9]
 8006d4c:	6918      	ldr	r0, [r3, #16]
 8006d4e:	f7ff fd2b 	bl	80067a8 <__hi0bits>
 8006d52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d56:	e7df      	b.n	8006d18 <__d2b+0x70>
 8006d58:	08007f7f 	.word	0x08007f7f
 8006d5c:	08007f90 	.word	0x08007f90

08006d60 <_calloc_r>:
 8006d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d62:	fba1 2402 	umull	r2, r4, r1, r2
 8006d66:	b94c      	cbnz	r4, 8006d7c <_calloc_r+0x1c>
 8006d68:	4611      	mov	r1, r2
 8006d6a:	9201      	str	r2, [sp, #4]
 8006d6c:	f000 f87a 	bl	8006e64 <_malloc_r>
 8006d70:	9a01      	ldr	r2, [sp, #4]
 8006d72:	4605      	mov	r5, r0
 8006d74:	b930      	cbnz	r0, 8006d84 <_calloc_r+0x24>
 8006d76:	4628      	mov	r0, r5
 8006d78:	b003      	add	sp, #12
 8006d7a:	bd30      	pop	{r4, r5, pc}
 8006d7c:	220c      	movs	r2, #12
 8006d7e:	6002      	str	r2, [r0, #0]
 8006d80:	2500      	movs	r5, #0
 8006d82:	e7f8      	b.n	8006d76 <_calloc_r+0x16>
 8006d84:	4621      	mov	r1, r4
 8006d86:	f7fe f941 	bl	800500c <memset>
 8006d8a:	e7f4      	b.n	8006d76 <_calloc_r+0x16>

08006d8c <_free_r>:
 8006d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d8e:	2900      	cmp	r1, #0
 8006d90:	d044      	beq.n	8006e1c <_free_r+0x90>
 8006d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d96:	9001      	str	r0, [sp, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d9e:	bfb8      	it	lt
 8006da0:	18e4      	addlt	r4, r4, r3
 8006da2:	f000 fa9b 	bl	80072dc <__malloc_lock>
 8006da6:	4a1e      	ldr	r2, [pc, #120]	; (8006e20 <_free_r+0x94>)
 8006da8:	9801      	ldr	r0, [sp, #4]
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	b933      	cbnz	r3, 8006dbc <_free_r+0x30>
 8006dae:	6063      	str	r3, [r4, #4]
 8006db0:	6014      	str	r4, [r2, #0]
 8006db2:	b003      	add	sp, #12
 8006db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006db8:	f000 ba96 	b.w	80072e8 <__malloc_unlock>
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d908      	bls.n	8006dd2 <_free_r+0x46>
 8006dc0:	6825      	ldr	r5, [r4, #0]
 8006dc2:	1961      	adds	r1, r4, r5
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	bf01      	itttt	eq
 8006dc8:	6819      	ldreq	r1, [r3, #0]
 8006dca:	685b      	ldreq	r3, [r3, #4]
 8006dcc:	1949      	addeq	r1, r1, r5
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	e7ed      	b.n	8006dae <_free_r+0x22>
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	b10b      	cbz	r3, 8006ddc <_free_r+0x50>
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	d9fa      	bls.n	8006dd2 <_free_r+0x46>
 8006ddc:	6811      	ldr	r1, [r2, #0]
 8006dde:	1855      	adds	r5, r2, r1
 8006de0:	42a5      	cmp	r5, r4
 8006de2:	d10b      	bne.n	8006dfc <_free_r+0x70>
 8006de4:	6824      	ldr	r4, [r4, #0]
 8006de6:	4421      	add	r1, r4
 8006de8:	1854      	adds	r4, r2, r1
 8006dea:	42a3      	cmp	r3, r4
 8006dec:	6011      	str	r1, [r2, #0]
 8006dee:	d1e0      	bne.n	8006db2 <_free_r+0x26>
 8006df0:	681c      	ldr	r4, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	6053      	str	r3, [r2, #4]
 8006df6:	4421      	add	r1, r4
 8006df8:	6011      	str	r1, [r2, #0]
 8006dfa:	e7da      	b.n	8006db2 <_free_r+0x26>
 8006dfc:	d902      	bls.n	8006e04 <_free_r+0x78>
 8006dfe:	230c      	movs	r3, #12
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	e7d6      	b.n	8006db2 <_free_r+0x26>
 8006e04:	6825      	ldr	r5, [r4, #0]
 8006e06:	1961      	adds	r1, r4, r5
 8006e08:	428b      	cmp	r3, r1
 8006e0a:	bf04      	itt	eq
 8006e0c:	6819      	ldreq	r1, [r3, #0]
 8006e0e:	685b      	ldreq	r3, [r3, #4]
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	bf04      	itt	eq
 8006e14:	1949      	addeq	r1, r1, r5
 8006e16:	6021      	streq	r1, [r4, #0]
 8006e18:	6054      	str	r4, [r2, #4]
 8006e1a:	e7ca      	b.n	8006db2 <_free_r+0x26>
 8006e1c:	b003      	add	sp, #12
 8006e1e:	bd30      	pop	{r4, r5, pc}
 8006e20:	200003c8 	.word	0x200003c8

08006e24 <sbrk_aligned>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4e0e      	ldr	r6, [pc, #56]	; (8006e60 <sbrk_aligned+0x3c>)
 8006e28:	460c      	mov	r4, r1
 8006e2a:	6831      	ldr	r1, [r6, #0]
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	b911      	cbnz	r1, 8006e36 <sbrk_aligned+0x12>
 8006e30:	f000 f9e8 	bl	8007204 <_sbrk_r>
 8006e34:	6030      	str	r0, [r6, #0]
 8006e36:	4621      	mov	r1, r4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 f9e3 	bl	8007204 <_sbrk_r>
 8006e3e:	1c43      	adds	r3, r0, #1
 8006e40:	d00a      	beq.n	8006e58 <sbrk_aligned+0x34>
 8006e42:	1cc4      	adds	r4, r0, #3
 8006e44:	f024 0403 	bic.w	r4, r4, #3
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d007      	beq.n	8006e5c <sbrk_aligned+0x38>
 8006e4c:	1a21      	subs	r1, r4, r0
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 f9d8 	bl	8007204 <_sbrk_r>
 8006e54:	3001      	adds	r0, #1
 8006e56:	d101      	bne.n	8006e5c <sbrk_aligned+0x38>
 8006e58:	f04f 34ff 	mov.w	r4, #4294967295
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	200003cc 	.word	0x200003cc

08006e64 <_malloc_r>:
 8006e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e68:	1ccd      	adds	r5, r1, #3
 8006e6a:	f025 0503 	bic.w	r5, r5, #3
 8006e6e:	3508      	adds	r5, #8
 8006e70:	2d0c      	cmp	r5, #12
 8006e72:	bf38      	it	cc
 8006e74:	250c      	movcc	r5, #12
 8006e76:	2d00      	cmp	r5, #0
 8006e78:	4607      	mov	r7, r0
 8006e7a:	db01      	blt.n	8006e80 <_malloc_r+0x1c>
 8006e7c:	42a9      	cmp	r1, r5
 8006e7e:	d905      	bls.n	8006e8c <_malloc_r+0x28>
 8006e80:	230c      	movs	r3, #12
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	2600      	movs	r6, #0
 8006e86:	4630      	mov	r0, r6
 8006e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e8c:	4e2e      	ldr	r6, [pc, #184]	; (8006f48 <_malloc_r+0xe4>)
 8006e8e:	f000 fa25 	bl	80072dc <__malloc_lock>
 8006e92:	6833      	ldr	r3, [r6, #0]
 8006e94:	461c      	mov	r4, r3
 8006e96:	bb34      	cbnz	r4, 8006ee6 <_malloc_r+0x82>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f7ff ffc2 	bl	8006e24 <sbrk_aligned>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	d14d      	bne.n	8006f42 <_malloc_r+0xde>
 8006ea6:	6834      	ldr	r4, [r6, #0]
 8006ea8:	4626      	mov	r6, r4
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	d140      	bne.n	8006f30 <_malloc_r+0xcc>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	eb04 0803 	add.w	r8, r4, r3
 8006eb8:	f000 f9a4 	bl	8007204 <_sbrk_r>
 8006ebc:	4580      	cmp	r8, r0
 8006ebe:	d13a      	bne.n	8006f36 <_malloc_r+0xd2>
 8006ec0:	6821      	ldr	r1, [r4, #0]
 8006ec2:	3503      	adds	r5, #3
 8006ec4:	1a6d      	subs	r5, r5, r1
 8006ec6:	f025 0503 	bic.w	r5, r5, #3
 8006eca:	3508      	adds	r5, #8
 8006ecc:	2d0c      	cmp	r5, #12
 8006ece:	bf38      	it	cc
 8006ed0:	250c      	movcc	r5, #12
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff ffa5 	bl	8006e24 <sbrk_aligned>
 8006eda:	3001      	adds	r0, #1
 8006edc:	d02b      	beq.n	8006f36 <_malloc_r+0xd2>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	442b      	add	r3, r5
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	e00e      	b.n	8006f04 <_malloc_r+0xa0>
 8006ee6:	6822      	ldr	r2, [r4, #0]
 8006ee8:	1b52      	subs	r2, r2, r5
 8006eea:	d41e      	bmi.n	8006f2a <_malloc_r+0xc6>
 8006eec:	2a0b      	cmp	r2, #11
 8006eee:	d916      	bls.n	8006f1e <_malloc_r+0xba>
 8006ef0:	1961      	adds	r1, r4, r5
 8006ef2:	42a3      	cmp	r3, r4
 8006ef4:	6025      	str	r5, [r4, #0]
 8006ef6:	bf18      	it	ne
 8006ef8:	6059      	strne	r1, [r3, #4]
 8006efa:	6863      	ldr	r3, [r4, #4]
 8006efc:	bf08      	it	eq
 8006efe:	6031      	streq	r1, [r6, #0]
 8006f00:	5162      	str	r2, [r4, r5]
 8006f02:	604b      	str	r3, [r1, #4]
 8006f04:	4638      	mov	r0, r7
 8006f06:	f104 060b 	add.w	r6, r4, #11
 8006f0a:	f000 f9ed 	bl	80072e8 <__malloc_unlock>
 8006f0e:	f026 0607 	bic.w	r6, r6, #7
 8006f12:	1d23      	adds	r3, r4, #4
 8006f14:	1af2      	subs	r2, r6, r3
 8006f16:	d0b6      	beq.n	8006e86 <_malloc_r+0x22>
 8006f18:	1b9b      	subs	r3, r3, r6
 8006f1a:	50a3      	str	r3, [r4, r2]
 8006f1c:	e7b3      	b.n	8006e86 <_malloc_r+0x22>
 8006f1e:	6862      	ldr	r2, [r4, #4]
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	bf0c      	ite	eq
 8006f24:	6032      	streq	r2, [r6, #0]
 8006f26:	605a      	strne	r2, [r3, #4]
 8006f28:	e7ec      	b.n	8006f04 <_malloc_r+0xa0>
 8006f2a:	4623      	mov	r3, r4
 8006f2c:	6864      	ldr	r4, [r4, #4]
 8006f2e:	e7b2      	b.n	8006e96 <_malloc_r+0x32>
 8006f30:	4634      	mov	r4, r6
 8006f32:	6876      	ldr	r6, [r6, #4]
 8006f34:	e7b9      	b.n	8006eaa <_malloc_r+0x46>
 8006f36:	230c      	movs	r3, #12
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	f000 f9d4 	bl	80072e8 <__malloc_unlock>
 8006f40:	e7a1      	b.n	8006e86 <_malloc_r+0x22>
 8006f42:	6025      	str	r5, [r4, #0]
 8006f44:	e7de      	b.n	8006f04 <_malloc_r+0xa0>
 8006f46:	bf00      	nop
 8006f48:	200003c8 	.word	0x200003c8

08006f4c <__ssputs_r>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	688e      	ldr	r6, [r1, #8]
 8006f52:	429e      	cmp	r6, r3
 8006f54:	4682      	mov	sl, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	4690      	mov	r8, r2
 8006f5a:	461f      	mov	r7, r3
 8006f5c:	d838      	bhi.n	8006fd0 <__ssputs_r+0x84>
 8006f5e:	898a      	ldrh	r2, [r1, #12]
 8006f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f64:	d032      	beq.n	8006fcc <__ssputs_r+0x80>
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	6909      	ldr	r1, [r1, #16]
 8006f6a:	eba5 0901 	sub.w	r9, r5, r1
 8006f6e:	6965      	ldr	r5, [r4, #20]
 8006f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f78:	3301      	adds	r3, #1
 8006f7a:	444b      	add	r3, r9
 8006f7c:	106d      	asrs	r5, r5, #1
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	bf38      	it	cc
 8006f82:	461d      	movcc	r5, r3
 8006f84:	0553      	lsls	r3, r2, #21
 8006f86:	d531      	bpl.n	8006fec <__ssputs_r+0xa0>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7ff ff6b 	bl	8006e64 <_malloc_r>
 8006f8e:	4606      	mov	r6, r0
 8006f90:	b950      	cbnz	r0, 8006fa8 <__ssputs_r+0x5c>
 8006f92:	230c      	movs	r3, #12
 8006f94:	f8ca 3000 	str.w	r3, [sl]
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa8:	6921      	ldr	r1, [r4, #16]
 8006faa:	464a      	mov	r2, r9
 8006fac:	f7ff fb46 	bl	800663c <memcpy>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	6126      	str	r6, [r4, #16]
 8006fbe:	6165      	str	r5, [r4, #20]
 8006fc0:	444e      	add	r6, r9
 8006fc2:	eba5 0509 	sub.w	r5, r5, r9
 8006fc6:	6026      	str	r6, [r4, #0]
 8006fc8:	60a5      	str	r5, [r4, #8]
 8006fca:	463e      	mov	r6, r7
 8006fcc:	42be      	cmp	r6, r7
 8006fce:	d900      	bls.n	8006fd2 <__ssputs_r+0x86>
 8006fd0:	463e      	mov	r6, r7
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	f000 f966 	bl	80072a8 <memmove>
 8006fdc:	68a3      	ldr	r3, [r4, #8]
 8006fde:	1b9b      	subs	r3, r3, r6
 8006fe0:	60a3      	str	r3, [r4, #8]
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	4433      	add	r3, r6
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e7db      	b.n	8006fa4 <__ssputs_r+0x58>
 8006fec:	462a      	mov	r2, r5
 8006fee:	f000 f981 	bl	80072f4 <_realloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d1e1      	bne.n	8006fbc <__ssputs_r+0x70>
 8006ff8:	6921      	ldr	r1, [r4, #16]
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f7ff fec6 	bl	8006d8c <_free_r>
 8007000:	e7c7      	b.n	8006f92 <__ssputs_r+0x46>
	...

08007004 <_svfiprintf_r>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	4698      	mov	r8, r3
 800700a:	898b      	ldrh	r3, [r1, #12]
 800700c:	061b      	lsls	r3, r3, #24
 800700e:	b09d      	sub	sp, #116	; 0x74
 8007010:	4607      	mov	r7, r0
 8007012:	460d      	mov	r5, r1
 8007014:	4614      	mov	r4, r2
 8007016:	d50e      	bpl.n	8007036 <_svfiprintf_r+0x32>
 8007018:	690b      	ldr	r3, [r1, #16]
 800701a:	b963      	cbnz	r3, 8007036 <_svfiprintf_r+0x32>
 800701c:	2140      	movs	r1, #64	; 0x40
 800701e:	f7ff ff21 	bl	8006e64 <_malloc_r>
 8007022:	6028      	str	r0, [r5, #0]
 8007024:	6128      	str	r0, [r5, #16]
 8007026:	b920      	cbnz	r0, 8007032 <_svfiprintf_r+0x2e>
 8007028:	230c      	movs	r3, #12
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	e0d1      	b.n	80071d6 <_svfiprintf_r+0x1d2>
 8007032:	2340      	movs	r3, #64	; 0x40
 8007034:	616b      	str	r3, [r5, #20]
 8007036:	2300      	movs	r3, #0
 8007038:	9309      	str	r3, [sp, #36]	; 0x24
 800703a:	2320      	movs	r3, #32
 800703c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007040:	f8cd 800c 	str.w	r8, [sp, #12]
 8007044:	2330      	movs	r3, #48	; 0x30
 8007046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80071f0 <_svfiprintf_r+0x1ec>
 800704a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800704e:	f04f 0901 	mov.w	r9, #1
 8007052:	4623      	mov	r3, r4
 8007054:	469a      	mov	sl, r3
 8007056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800705a:	b10a      	cbz	r2, 8007060 <_svfiprintf_r+0x5c>
 800705c:	2a25      	cmp	r2, #37	; 0x25
 800705e:	d1f9      	bne.n	8007054 <_svfiprintf_r+0x50>
 8007060:	ebba 0b04 	subs.w	fp, sl, r4
 8007064:	d00b      	beq.n	800707e <_svfiprintf_r+0x7a>
 8007066:	465b      	mov	r3, fp
 8007068:	4622      	mov	r2, r4
 800706a:	4629      	mov	r1, r5
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff ff6d 	bl	8006f4c <__ssputs_r>
 8007072:	3001      	adds	r0, #1
 8007074:	f000 80aa 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800707a:	445a      	add	r2, fp
 800707c:	9209      	str	r2, [sp, #36]	; 0x24
 800707e:	f89a 3000 	ldrb.w	r3, [sl]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80a2 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007088:	2300      	movs	r3, #0
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007092:	f10a 0a01 	add.w	sl, sl, #1
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	9307      	str	r3, [sp, #28]
 800709a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800709e:	931a      	str	r3, [sp, #104]	; 0x68
 80070a0:	4654      	mov	r4, sl
 80070a2:	2205      	movs	r2, #5
 80070a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a8:	4851      	ldr	r0, [pc, #324]	; (80071f0 <_svfiprintf_r+0x1ec>)
 80070aa:	f7f9 f899 	bl	80001e0 <memchr>
 80070ae:	9a04      	ldr	r2, [sp, #16]
 80070b0:	b9d8      	cbnz	r0, 80070ea <_svfiprintf_r+0xe6>
 80070b2:	06d0      	lsls	r0, r2, #27
 80070b4:	bf44      	itt	mi
 80070b6:	2320      	movmi	r3, #32
 80070b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070bc:	0711      	lsls	r1, r2, #28
 80070be:	bf44      	itt	mi
 80070c0:	232b      	movmi	r3, #43	; 0x2b
 80070c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070c6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ca:	2b2a      	cmp	r3, #42	; 0x2a
 80070cc:	d015      	beq.n	80070fa <_svfiprintf_r+0xf6>
 80070ce:	9a07      	ldr	r2, [sp, #28]
 80070d0:	4654      	mov	r4, sl
 80070d2:	2000      	movs	r0, #0
 80070d4:	f04f 0c0a 	mov.w	ip, #10
 80070d8:	4621      	mov	r1, r4
 80070da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070de:	3b30      	subs	r3, #48	; 0x30
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d94e      	bls.n	8007182 <_svfiprintf_r+0x17e>
 80070e4:	b1b0      	cbz	r0, 8007114 <_svfiprintf_r+0x110>
 80070e6:	9207      	str	r2, [sp, #28]
 80070e8:	e014      	b.n	8007114 <_svfiprintf_r+0x110>
 80070ea:	eba0 0308 	sub.w	r3, r0, r8
 80070ee:	fa09 f303 	lsl.w	r3, r9, r3
 80070f2:	4313      	orrs	r3, r2
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	46a2      	mov	sl, r4
 80070f8:	e7d2      	b.n	80070a0 <_svfiprintf_r+0x9c>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	1d19      	adds	r1, r3, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	9103      	str	r1, [sp, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	bfbb      	ittet	lt
 8007106:	425b      	neglt	r3, r3
 8007108:	f042 0202 	orrlt.w	r2, r2, #2
 800710c:	9307      	strge	r3, [sp, #28]
 800710e:	9307      	strlt	r3, [sp, #28]
 8007110:	bfb8      	it	lt
 8007112:	9204      	strlt	r2, [sp, #16]
 8007114:	7823      	ldrb	r3, [r4, #0]
 8007116:	2b2e      	cmp	r3, #46	; 0x2e
 8007118:	d10c      	bne.n	8007134 <_svfiprintf_r+0x130>
 800711a:	7863      	ldrb	r3, [r4, #1]
 800711c:	2b2a      	cmp	r3, #42	; 0x2a
 800711e:	d135      	bne.n	800718c <_svfiprintf_r+0x188>
 8007120:	9b03      	ldr	r3, [sp, #12]
 8007122:	1d1a      	adds	r2, r3, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	9203      	str	r2, [sp, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	bfb8      	it	lt
 800712c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007130:	3402      	adds	r4, #2
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007200 <_svfiprintf_r+0x1fc>
 8007138:	7821      	ldrb	r1, [r4, #0]
 800713a:	2203      	movs	r2, #3
 800713c:	4650      	mov	r0, sl
 800713e:	f7f9 f84f 	bl	80001e0 <memchr>
 8007142:	b140      	cbz	r0, 8007156 <_svfiprintf_r+0x152>
 8007144:	2340      	movs	r3, #64	; 0x40
 8007146:	eba0 000a 	sub.w	r0, r0, sl
 800714a:	fa03 f000 	lsl.w	r0, r3, r0
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	4303      	orrs	r3, r0
 8007152:	3401      	adds	r4, #1
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715a:	4826      	ldr	r0, [pc, #152]	; (80071f4 <_svfiprintf_r+0x1f0>)
 800715c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007160:	2206      	movs	r2, #6
 8007162:	f7f9 f83d 	bl	80001e0 <memchr>
 8007166:	2800      	cmp	r0, #0
 8007168:	d038      	beq.n	80071dc <_svfiprintf_r+0x1d8>
 800716a:	4b23      	ldr	r3, [pc, #140]	; (80071f8 <_svfiprintf_r+0x1f4>)
 800716c:	bb1b      	cbnz	r3, 80071b6 <_svfiprintf_r+0x1b2>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	3307      	adds	r3, #7
 8007172:	f023 0307 	bic.w	r3, r3, #7
 8007176:	3308      	adds	r3, #8
 8007178:	9303      	str	r3, [sp, #12]
 800717a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717c:	4433      	add	r3, r6
 800717e:	9309      	str	r3, [sp, #36]	; 0x24
 8007180:	e767      	b.n	8007052 <_svfiprintf_r+0x4e>
 8007182:	fb0c 3202 	mla	r2, ip, r2, r3
 8007186:	460c      	mov	r4, r1
 8007188:	2001      	movs	r0, #1
 800718a:	e7a5      	b.n	80070d8 <_svfiprintf_r+0xd4>
 800718c:	2300      	movs	r3, #0
 800718e:	3401      	adds	r4, #1
 8007190:	9305      	str	r3, [sp, #20]
 8007192:	4619      	mov	r1, r3
 8007194:	f04f 0c0a 	mov.w	ip, #10
 8007198:	4620      	mov	r0, r4
 800719a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800719e:	3a30      	subs	r2, #48	; 0x30
 80071a0:	2a09      	cmp	r2, #9
 80071a2:	d903      	bls.n	80071ac <_svfiprintf_r+0x1a8>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0c5      	beq.n	8007134 <_svfiprintf_r+0x130>
 80071a8:	9105      	str	r1, [sp, #20]
 80071aa:	e7c3      	b.n	8007134 <_svfiprintf_r+0x130>
 80071ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80071b0:	4604      	mov	r4, r0
 80071b2:	2301      	movs	r3, #1
 80071b4:	e7f0      	b.n	8007198 <_svfiprintf_r+0x194>
 80071b6:	ab03      	add	r3, sp, #12
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	462a      	mov	r2, r5
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <_svfiprintf_r+0x1f8>)
 80071be:	a904      	add	r1, sp, #16
 80071c0:	4638      	mov	r0, r7
 80071c2:	f7fd ffcb 	bl	800515c <_printf_float>
 80071c6:	1c42      	adds	r2, r0, #1
 80071c8:	4606      	mov	r6, r0
 80071ca:	d1d6      	bne.n	800717a <_svfiprintf_r+0x176>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	065b      	lsls	r3, r3, #25
 80071d0:	f53f af2c 	bmi.w	800702c <_svfiprintf_r+0x28>
 80071d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d6:	b01d      	add	sp, #116	; 0x74
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <_svfiprintf_r+0x1f8>)
 80071e4:	a904      	add	r1, sp, #16
 80071e6:	4638      	mov	r0, r7
 80071e8:	f7fe fa5c 	bl	80056a4 <_printf_i>
 80071ec:	e7eb      	b.n	80071c6 <_svfiprintf_r+0x1c2>
 80071ee:	bf00      	nop
 80071f0:	080080ec 	.word	0x080080ec
 80071f4:	080080f6 	.word	0x080080f6
 80071f8:	0800515d 	.word	0x0800515d
 80071fc:	08006f4d 	.word	0x08006f4d
 8007200:	080080f2 	.word	0x080080f2

08007204 <_sbrk_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4d06      	ldr	r5, [pc, #24]	; (8007220 <_sbrk_r+0x1c>)
 8007208:	2300      	movs	r3, #0
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	602b      	str	r3, [r5, #0]
 8007210:	f7fa fa4c 	bl	80016ac <_sbrk>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d102      	bne.n	800721e <_sbrk_r+0x1a>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	b103      	cbz	r3, 800721e <_sbrk_r+0x1a>
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	200003d0 	.word	0x200003d0

08007224 <__assert_func>:
 8007224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007226:	4614      	mov	r4, r2
 8007228:	461a      	mov	r2, r3
 800722a:	4b09      	ldr	r3, [pc, #36]	; (8007250 <__assert_func+0x2c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4605      	mov	r5, r0
 8007230:	68d8      	ldr	r0, [r3, #12]
 8007232:	b14c      	cbz	r4, 8007248 <__assert_func+0x24>
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <__assert_func+0x30>)
 8007236:	9100      	str	r1, [sp, #0]
 8007238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800723c:	4906      	ldr	r1, [pc, #24]	; (8007258 <__assert_func+0x34>)
 800723e:	462b      	mov	r3, r5
 8007240:	f000 f80e 	bl	8007260 <fiprintf>
 8007244:	f000 faac 	bl	80077a0 <abort>
 8007248:	4b04      	ldr	r3, [pc, #16]	; (800725c <__assert_func+0x38>)
 800724a:	461c      	mov	r4, r3
 800724c:	e7f3      	b.n	8007236 <__assert_func+0x12>
 800724e:	bf00      	nop
 8007250:	20000014 	.word	0x20000014
 8007254:	080080fd 	.word	0x080080fd
 8007258:	0800810a 	.word	0x0800810a
 800725c:	08008138 	.word	0x08008138

08007260 <fiprintf>:
 8007260:	b40e      	push	{r1, r2, r3}
 8007262:	b503      	push	{r0, r1, lr}
 8007264:	4601      	mov	r1, r0
 8007266:	ab03      	add	r3, sp, #12
 8007268:	4805      	ldr	r0, [pc, #20]	; (8007280 <fiprintf+0x20>)
 800726a:	f853 2b04 	ldr.w	r2, [r3], #4
 800726e:	6800      	ldr	r0, [r0, #0]
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	f000 f897 	bl	80073a4 <_vfiprintf_r>
 8007276:	b002      	add	sp, #8
 8007278:	f85d eb04 	ldr.w	lr, [sp], #4
 800727c:	b003      	add	sp, #12
 800727e:	4770      	bx	lr
 8007280:	20000014 	.word	0x20000014

08007284 <__ascii_mbtowc>:
 8007284:	b082      	sub	sp, #8
 8007286:	b901      	cbnz	r1, 800728a <__ascii_mbtowc+0x6>
 8007288:	a901      	add	r1, sp, #4
 800728a:	b142      	cbz	r2, 800729e <__ascii_mbtowc+0x1a>
 800728c:	b14b      	cbz	r3, 80072a2 <__ascii_mbtowc+0x1e>
 800728e:	7813      	ldrb	r3, [r2, #0]
 8007290:	600b      	str	r3, [r1, #0]
 8007292:	7812      	ldrb	r2, [r2, #0]
 8007294:	1e10      	subs	r0, r2, #0
 8007296:	bf18      	it	ne
 8007298:	2001      	movne	r0, #1
 800729a:	b002      	add	sp, #8
 800729c:	4770      	bx	lr
 800729e:	4610      	mov	r0, r2
 80072a0:	e7fb      	b.n	800729a <__ascii_mbtowc+0x16>
 80072a2:	f06f 0001 	mvn.w	r0, #1
 80072a6:	e7f8      	b.n	800729a <__ascii_mbtowc+0x16>

080072a8 <memmove>:
 80072a8:	4288      	cmp	r0, r1
 80072aa:	b510      	push	{r4, lr}
 80072ac:	eb01 0402 	add.w	r4, r1, r2
 80072b0:	d902      	bls.n	80072b8 <memmove+0x10>
 80072b2:	4284      	cmp	r4, r0
 80072b4:	4623      	mov	r3, r4
 80072b6:	d807      	bhi.n	80072c8 <memmove+0x20>
 80072b8:	1e43      	subs	r3, r0, #1
 80072ba:	42a1      	cmp	r1, r4
 80072bc:	d008      	beq.n	80072d0 <memmove+0x28>
 80072be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072c6:	e7f8      	b.n	80072ba <memmove+0x12>
 80072c8:	4402      	add	r2, r0
 80072ca:	4601      	mov	r1, r0
 80072cc:	428a      	cmp	r2, r1
 80072ce:	d100      	bne.n	80072d2 <memmove+0x2a>
 80072d0:	bd10      	pop	{r4, pc}
 80072d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072da:	e7f7      	b.n	80072cc <memmove+0x24>

080072dc <__malloc_lock>:
 80072dc:	4801      	ldr	r0, [pc, #4]	; (80072e4 <__malloc_lock+0x8>)
 80072de:	f000 bc1f 	b.w	8007b20 <__retarget_lock_acquire_recursive>
 80072e2:	bf00      	nop
 80072e4:	200003d4 	.word	0x200003d4

080072e8 <__malloc_unlock>:
 80072e8:	4801      	ldr	r0, [pc, #4]	; (80072f0 <__malloc_unlock+0x8>)
 80072ea:	f000 bc1a 	b.w	8007b22 <__retarget_lock_release_recursive>
 80072ee:	bf00      	nop
 80072f0:	200003d4 	.word	0x200003d4

080072f4 <_realloc_r>:
 80072f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f8:	4680      	mov	r8, r0
 80072fa:	4614      	mov	r4, r2
 80072fc:	460e      	mov	r6, r1
 80072fe:	b921      	cbnz	r1, 800730a <_realloc_r+0x16>
 8007300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007304:	4611      	mov	r1, r2
 8007306:	f7ff bdad 	b.w	8006e64 <_malloc_r>
 800730a:	b92a      	cbnz	r2, 8007318 <_realloc_r+0x24>
 800730c:	f7ff fd3e 	bl	8006d8c <_free_r>
 8007310:	4625      	mov	r5, r4
 8007312:	4628      	mov	r0, r5
 8007314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007318:	f000 fc6a 	bl	8007bf0 <_malloc_usable_size_r>
 800731c:	4284      	cmp	r4, r0
 800731e:	4607      	mov	r7, r0
 8007320:	d802      	bhi.n	8007328 <_realloc_r+0x34>
 8007322:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007326:	d812      	bhi.n	800734e <_realloc_r+0x5a>
 8007328:	4621      	mov	r1, r4
 800732a:	4640      	mov	r0, r8
 800732c:	f7ff fd9a 	bl	8006e64 <_malloc_r>
 8007330:	4605      	mov	r5, r0
 8007332:	2800      	cmp	r0, #0
 8007334:	d0ed      	beq.n	8007312 <_realloc_r+0x1e>
 8007336:	42bc      	cmp	r4, r7
 8007338:	4622      	mov	r2, r4
 800733a:	4631      	mov	r1, r6
 800733c:	bf28      	it	cs
 800733e:	463a      	movcs	r2, r7
 8007340:	f7ff f97c 	bl	800663c <memcpy>
 8007344:	4631      	mov	r1, r6
 8007346:	4640      	mov	r0, r8
 8007348:	f7ff fd20 	bl	8006d8c <_free_r>
 800734c:	e7e1      	b.n	8007312 <_realloc_r+0x1e>
 800734e:	4635      	mov	r5, r6
 8007350:	e7df      	b.n	8007312 <_realloc_r+0x1e>

08007352 <__sfputc_r>:
 8007352:	6893      	ldr	r3, [r2, #8]
 8007354:	3b01      	subs	r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	b410      	push	{r4}
 800735a:	6093      	str	r3, [r2, #8]
 800735c:	da08      	bge.n	8007370 <__sfputc_r+0x1e>
 800735e:	6994      	ldr	r4, [r2, #24]
 8007360:	42a3      	cmp	r3, r4
 8007362:	db01      	blt.n	8007368 <__sfputc_r+0x16>
 8007364:	290a      	cmp	r1, #10
 8007366:	d103      	bne.n	8007370 <__sfputc_r+0x1e>
 8007368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800736c:	f000 b94a 	b.w	8007604 <__swbuf_r>
 8007370:	6813      	ldr	r3, [r2, #0]
 8007372:	1c58      	adds	r0, r3, #1
 8007374:	6010      	str	r0, [r2, #0]
 8007376:	7019      	strb	r1, [r3, #0]
 8007378:	4608      	mov	r0, r1
 800737a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800737e:	4770      	bx	lr

08007380 <__sfputs_r>:
 8007380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007382:	4606      	mov	r6, r0
 8007384:	460f      	mov	r7, r1
 8007386:	4614      	mov	r4, r2
 8007388:	18d5      	adds	r5, r2, r3
 800738a:	42ac      	cmp	r4, r5
 800738c:	d101      	bne.n	8007392 <__sfputs_r+0x12>
 800738e:	2000      	movs	r0, #0
 8007390:	e007      	b.n	80073a2 <__sfputs_r+0x22>
 8007392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007396:	463a      	mov	r2, r7
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff ffda 	bl	8007352 <__sfputc_r>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d1f3      	bne.n	800738a <__sfputs_r+0xa>
 80073a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073a4 <_vfiprintf_r>:
 80073a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a8:	460d      	mov	r5, r1
 80073aa:	b09d      	sub	sp, #116	; 0x74
 80073ac:	4614      	mov	r4, r2
 80073ae:	4698      	mov	r8, r3
 80073b0:	4606      	mov	r6, r0
 80073b2:	b118      	cbz	r0, 80073bc <_vfiprintf_r+0x18>
 80073b4:	6983      	ldr	r3, [r0, #24]
 80073b6:	b90b      	cbnz	r3, 80073bc <_vfiprintf_r+0x18>
 80073b8:	f000 fb14 	bl	80079e4 <__sinit>
 80073bc:	4b89      	ldr	r3, [pc, #548]	; (80075e4 <_vfiprintf_r+0x240>)
 80073be:	429d      	cmp	r5, r3
 80073c0:	d11b      	bne.n	80073fa <_vfiprintf_r+0x56>
 80073c2:	6875      	ldr	r5, [r6, #4]
 80073c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073c6:	07d9      	lsls	r1, r3, #31
 80073c8:	d405      	bmi.n	80073d6 <_vfiprintf_r+0x32>
 80073ca:	89ab      	ldrh	r3, [r5, #12]
 80073cc:	059a      	lsls	r2, r3, #22
 80073ce:	d402      	bmi.n	80073d6 <_vfiprintf_r+0x32>
 80073d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073d2:	f000 fba5 	bl	8007b20 <__retarget_lock_acquire_recursive>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	071b      	lsls	r3, r3, #28
 80073da:	d501      	bpl.n	80073e0 <_vfiprintf_r+0x3c>
 80073dc:	692b      	ldr	r3, [r5, #16]
 80073de:	b9eb      	cbnz	r3, 800741c <_vfiprintf_r+0x78>
 80073e0:	4629      	mov	r1, r5
 80073e2:	4630      	mov	r0, r6
 80073e4:	f000 f96e 	bl	80076c4 <__swsetup_r>
 80073e8:	b1c0      	cbz	r0, 800741c <_vfiprintf_r+0x78>
 80073ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073ec:	07dc      	lsls	r4, r3, #31
 80073ee:	d50e      	bpl.n	800740e <_vfiprintf_r+0x6a>
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	b01d      	add	sp, #116	; 0x74
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	4b7b      	ldr	r3, [pc, #492]	; (80075e8 <_vfiprintf_r+0x244>)
 80073fc:	429d      	cmp	r5, r3
 80073fe:	d101      	bne.n	8007404 <_vfiprintf_r+0x60>
 8007400:	68b5      	ldr	r5, [r6, #8]
 8007402:	e7df      	b.n	80073c4 <_vfiprintf_r+0x20>
 8007404:	4b79      	ldr	r3, [pc, #484]	; (80075ec <_vfiprintf_r+0x248>)
 8007406:	429d      	cmp	r5, r3
 8007408:	bf08      	it	eq
 800740a:	68f5      	ldreq	r5, [r6, #12]
 800740c:	e7da      	b.n	80073c4 <_vfiprintf_r+0x20>
 800740e:	89ab      	ldrh	r3, [r5, #12]
 8007410:	0598      	lsls	r0, r3, #22
 8007412:	d4ed      	bmi.n	80073f0 <_vfiprintf_r+0x4c>
 8007414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007416:	f000 fb84 	bl	8007b22 <__retarget_lock_release_recursive>
 800741a:	e7e9      	b.n	80073f0 <_vfiprintf_r+0x4c>
 800741c:	2300      	movs	r3, #0
 800741e:	9309      	str	r3, [sp, #36]	; 0x24
 8007420:	2320      	movs	r3, #32
 8007422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007426:	f8cd 800c 	str.w	r8, [sp, #12]
 800742a:	2330      	movs	r3, #48	; 0x30
 800742c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075f0 <_vfiprintf_r+0x24c>
 8007430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007434:	f04f 0901 	mov.w	r9, #1
 8007438:	4623      	mov	r3, r4
 800743a:	469a      	mov	sl, r3
 800743c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007440:	b10a      	cbz	r2, 8007446 <_vfiprintf_r+0xa2>
 8007442:	2a25      	cmp	r2, #37	; 0x25
 8007444:	d1f9      	bne.n	800743a <_vfiprintf_r+0x96>
 8007446:	ebba 0b04 	subs.w	fp, sl, r4
 800744a:	d00b      	beq.n	8007464 <_vfiprintf_r+0xc0>
 800744c:	465b      	mov	r3, fp
 800744e:	4622      	mov	r2, r4
 8007450:	4629      	mov	r1, r5
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff ff94 	bl	8007380 <__sfputs_r>
 8007458:	3001      	adds	r0, #1
 800745a:	f000 80aa 	beq.w	80075b2 <_vfiprintf_r+0x20e>
 800745e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007460:	445a      	add	r2, fp
 8007462:	9209      	str	r2, [sp, #36]	; 0x24
 8007464:	f89a 3000 	ldrb.w	r3, [sl]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 80a2 	beq.w	80075b2 <_vfiprintf_r+0x20e>
 800746e:	2300      	movs	r3, #0
 8007470:	f04f 32ff 	mov.w	r2, #4294967295
 8007474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007478:	f10a 0a01 	add.w	sl, sl, #1
 800747c:	9304      	str	r3, [sp, #16]
 800747e:	9307      	str	r3, [sp, #28]
 8007480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007484:	931a      	str	r3, [sp, #104]	; 0x68
 8007486:	4654      	mov	r4, sl
 8007488:	2205      	movs	r2, #5
 800748a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748e:	4858      	ldr	r0, [pc, #352]	; (80075f0 <_vfiprintf_r+0x24c>)
 8007490:	f7f8 fea6 	bl	80001e0 <memchr>
 8007494:	9a04      	ldr	r2, [sp, #16]
 8007496:	b9d8      	cbnz	r0, 80074d0 <_vfiprintf_r+0x12c>
 8007498:	06d1      	lsls	r1, r2, #27
 800749a:	bf44      	itt	mi
 800749c:	2320      	movmi	r3, #32
 800749e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074a2:	0713      	lsls	r3, r2, #28
 80074a4:	bf44      	itt	mi
 80074a6:	232b      	movmi	r3, #43	; 0x2b
 80074a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ac:	f89a 3000 	ldrb.w	r3, [sl]
 80074b0:	2b2a      	cmp	r3, #42	; 0x2a
 80074b2:	d015      	beq.n	80074e0 <_vfiprintf_r+0x13c>
 80074b4:	9a07      	ldr	r2, [sp, #28]
 80074b6:	4654      	mov	r4, sl
 80074b8:	2000      	movs	r0, #0
 80074ba:	f04f 0c0a 	mov.w	ip, #10
 80074be:	4621      	mov	r1, r4
 80074c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074c4:	3b30      	subs	r3, #48	; 0x30
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d94e      	bls.n	8007568 <_vfiprintf_r+0x1c4>
 80074ca:	b1b0      	cbz	r0, 80074fa <_vfiprintf_r+0x156>
 80074cc:	9207      	str	r2, [sp, #28]
 80074ce:	e014      	b.n	80074fa <_vfiprintf_r+0x156>
 80074d0:	eba0 0308 	sub.w	r3, r0, r8
 80074d4:	fa09 f303 	lsl.w	r3, r9, r3
 80074d8:	4313      	orrs	r3, r2
 80074da:	9304      	str	r3, [sp, #16]
 80074dc:	46a2      	mov	sl, r4
 80074de:	e7d2      	b.n	8007486 <_vfiprintf_r+0xe2>
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	1d19      	adds	r1, r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	9103      	str	r1, [sp, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bfbb      	ittet	lt
 80074ec:	425b      	neglt	r3, r3
 80074ee:	f042 0202 	orrlt.w	r2, r2, #2
 80074f2:	9307      	strge	r3, [sp, #28]
 80074f4:	9307      	strlt	r3, [sp, #28]
 80074f6:	bfb8      	it	lt
 80074f8:	9204      	strlt	r2, [sp, #16]
 80074fa:	7823      	ldrb	r3, [r4, #0]
 80074fc:	2b2e      	cmp	r3, #46	; 0x2e
 80074fe:	d10c      	bne.n	800751a <_vfiprintf_r+0x176>
 8007500:	7863      	ldrb	r3, [r4, #1]
 8007502:	2b2a      	cmp	r3, #42	; 0x2a
 8007504:	d135      	bne.n	8007572 <_vfiprintf_r+0x1ce>
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	1d1a      	adds	r2, r3, #4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	9203      	str	r2, [sp, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	bfb8      	it	lt
 8007512:	f04f 33ff 	movlt.w	r3, #4294967295
 8007516:	3402      	adds	r4, #2
 8007518:	9305      	str	r3, [sp, #20]
 800751a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007600 <_vfiprintf_r+0x25c>
 800751e:	7821      	ldrb	r1, [r4, #0]
 8007520:	2203      	movs	r2, #3
 8007522:	4650      	mov	r0, sl
 8007524:	f7f8 fe5c 	bl	80001e0 <memchr>
 8007528:	b140      	cbz	r0, 800753c <_vfiprintf_r+0x198>
 800752a:	2340      	movs	r3, #64	; 0x40
 800752c:	eba0 000a 	sub.w	r0, r0, sl
 8007530:	fa03 f000 	lsl.w	r0, r3, r0
 8007534:	9b04      	ldr	r3, [sp, #16]
 8007536:	4303      	orrs	r3, r0
 8007538:	3401      	adds	r4, #1
 800753a:	9304      	str	r3, [sp, #16]
 800753c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007540:	482c      	ldr	r0, [pc, #176]	; (80075f4 <_vfiprintf_r+0x250>)
 8007542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007546:	2206      	movs	r2, #6
 8007548:	f7f8 fe4a 	bl	80001e0 <memchr>
 800754c:	2800      	cmp	r0, #0
 800754e:	d03f      	beq.n	80075d0 <_vfiprintf_r+0x22c>
 8007550:	4b29      	ldr	r3, [pc, #164]	; (80075f8 <_vfiprintf_r+0x254>)
 8007552:	bb1b      	cbnz	r3, 800759c <_vfiprintf_r+0x1f8>
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	3307      	adds	r3, #7
 8007558:	f023 0307 	bic.w	r3, r3, #7
 800755c:	3308      	adds	r3, #8
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007562:	443b      	add	r3, r7
 8007564:	9309      	str	r3, [sp, #36]	; 0x24
 8007566:	e767      	b.n	8007438 <_vfiprintf_r+0x94>
 8007568:	fb0c 3202 	mla	r2, ip, r2, r3
 800756c:	460c      	mov	r4, r1
 800756e:	2001      	movs	r0, #1
 8007570:	e7a5      	b.n	80074be <_vfiprintf_r+0x11a>
 8007572:	2300      	movs	r3, #0
 8007574:	3401      	adds	r4, #1
 8007576:	9305      	str	r3, [sp, #20]
 8007578:	4619      	mov	r1, r3
 800757a:	f04f 0c0a 	mov.w	ip, #10
 800757e:	4620      	mov	r0, r4
 8007580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007584:	3a30      	subs	r2, #48	; 0x30
 8007586:	2a09      	cmp	r2, #9
 8007588:	d903      	bls.n	8007592 <_vfiprintf_r+0x1ee>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0c5      	beq.n	800751a <_vfiprintf_r+0x176>
 800758e:	9105      	str	r1, [sp, #20]
 8007590:	e7c3      	b.n	800751a <_vfiprintf_r+0x176>
 8007592:	fb0c 2101 	mla	r1, ip, r1, r2
 8007596:	4604      	mov	r4, r0
 8007598:	2301      	movs	r3, #1
 800759a:	e7f0      	b.n	800757e <_vfiprintf_r+0x1da>
 800759c:	ab03      	add	r3, sp, #12
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	462a      	mov	r2, r5
 80075a2:	4b16      	ldr	r3, [pc, #88]	; (80075fc <_vfiprintf_r+0x258>)
 80075a4:	a904      	add	r1, sp, #16
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7fd fdd8 	bl	800515c <_printf_float>
 80075ac:	4607      	mov	r7, r0
 80075ae:	1c78      	adds	r0, r7, #1
 80075b0:	d1d6      	bne.n	8007560 <_vfiprintf_r+0x1bc>
 80075b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075b4:	07d9      	lsls	r1, r3, #31
 80075b6:	d405      	bmi.n	80075c4 <_vfiprintf_r+0x220>
 80075b8:	89ab      	ldrh	r3, [r5, #12]
 80075ba:	059a      	lsls	r2, r3, #22
 80075bc:	d402      	bmi.n	80075c4 <_vfiprintf_r+0x220>
 80075be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075c0:	f000 faaf 	bl	8007b22 <__retarget_lock_release_recursive>
 80075c4:	89ab      	ldrh	r3, [r5, #12]
 80075c6:	065b      	lsls	r3, r3, #25
 80075c8:	f53f af12 	bmi.w	80073f0 <_vfiprintf_r+0x4c>
 80075cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ce:	e711      	b.n	80073f4 <_vfiprintf_r+0x50>
 80075d0:	ab03      	add	r3, sp, #12
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	462a      	mov	r2, r5
 80075d6:	4b09      	ldr	r3, [pc, #36]	; (80075fc <_vfiprintf_r+0x258>)
 80075d8:	a904      	add	r1, sp, #16
 80075da:	4630      	mov	r0, r6
 80075dc:	f7fe f862 	bl	80056a4 <_printf_i>
 80075e0:	e7e4      	b.n	80075ac <_vfiprintf_r+0x208>
 80075e2:	bf00      	nop
 80075e4:	08008264 	.word	0x08008264
 80075e8:	08008284 	.word	0x08008284
 80075ec:	08008244 	.word	0x08008244
 80075f0:	080080ec 	.word	0x080080ec
 80075f4:	080080f6 	.word	0x080080f6
 80075f8:	0800515d 	.word	0x0800515d
 80075fc:	08007381 	.word	0x08007381
 8007600:	080080f2 	.word	0x080080f2

08007604 <__swbuf_r>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	460e      	mov	r6, r1
 8007608:	4614      	mov	r4, r2
 800760a:	4605      	mov	r5, r0
 800760c:	b118      	cbz	r0, 8007616 <__swbuf_r+0x12>
 800760e:	6983      	ldr	r3, [r0, #24]
 8007610:	b90b      	cbnz	r3, 8007616 <__swbuf_r+0x12>
 8007612:	f000 f9e7 	bl	80079e4 <__sinit>
 8007616:	4b21      	ldr	r3, [pc, #132]	; (800769c <__swbuf_r+0x98>)
 8007618:	429c      	cmp	r4, r3
 800761a:	d12b      	bne.n	8007674 <__swbuf_r+0x70>
 800761c:	686c      	ldr	r4, [r5, #4]
 800761e:	69a3      	ldr	r3, [r4, #24]
 8007620:	60a3      	str	r3, [r4, #8]
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	071a      	lsls	r2, r3, #28
 8007626:	d52f      	bpl.n	8007688 <__swbuf_r+0x84>
 8007628:	6923      	ldr	r3, [r4, #16]
 800762a:	b36b      	cbz	r3, 8007688 <__swbuf_r+0x84>
 800762c:	6923      	ldr	r3, [r4, #16]
 800762e:	6820      	ldr	r0, [r4, #0]
 8007630:	1ac0      	subs	r0, r0, r3
 8007632:	6963      	ldr	r3, [r4, #20]
 8007634:	b2f6      	uxtb	r6, r6
 8007636:	4283      	cmp	r3, r0
 8007638:	4637      	mov	r7, r6
 800763a:	dc04      	bgt.n	8007646 <__swbuf_r+0x42>
 800763c:	4621      	mov	r1, r4
 800763e:	4628      	mov	r0, r5
 8007640:	f000 f93c 	bl	80078bc <_fflush_r>
 8007644:	bb30      	cbnz	r0, 8007694 <__swbuf_r+0x90>
 8007646:	68a3      	ldr	r3, [r4, #8]
 8007648:	3b01      	subs	r3, #1
 800764a:	60a3      	str	r3, [r4, #8]
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	6022      	str	r2, [r4, #0]
 8007652:	701e      	strb	r6, [r3, #0]
 8007654:	6963      	ldr	r3, [r4, #20]
 8007656:	3001      	adds	r0, #1
 8007658:	4283      	cmp	r3, r0
 800765a:	d004      	beq.n	8007666 <__swbuf_r+0x62>
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	07db      	lsls	r3, r3, #31
 8007660:	d506      	bpl.n	8007670 <__swbuf_r+0x6c>
 8007662:	2e0a      	cmp	r6, #10
 8007664:	d104      	bne.n	8007670 <__swbuf_r+0x6c>
 8007666:	4621      	mov	r1, r4
 8007668:	4628      	mov	r0, r5
 800766a:	f000 f927 	bl	80078bc <_fflush_r>
 800766e:	b988      	cbnz	r0, 8007694 <__swbuf_r+0x90>
 8007670:	4638      	mov	r0, r7
 8007672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007674:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <__swbuf_r+0x9c>)
 8007676:	429c      	cmp	r4, r3
 8007678:	d101      	bne.n	800767e <__swbuf_r+0x7a>
 800767a:	68ac      	ldr	r4, [r5, #8]
 800767c:	e7cf      	b.n	800761e <__swbuf_r+0x1a>
 800767e:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <__swbuf_r+0xa0>)
 8007680:	429c      	cmp	r4, r3
 8007682:	bf08      	it	eq
 8007684:	68ec      	ldreq	r4, [r5, #12]
 8007686:	e7ca      	b.n	800761e <__swbuf_r+0x1a>
 8007688:	4621      	mov	r1, r4
 800768a:	4628      	mov	r0, r5
 800768c:	f000 f81a 	bl	80076c4 <__swsetup_r>
 8007690:	2800      	cmp	r0, #0
 8007692:	d0cb      	beq.n	800762c <__swbuf_r+0x28>
 8007694:	f04f 37ff 	mov.w	r7, #4294967295
 8007698:	e7ea      	b.n	8007670 <__swbuf_r+0x6c>
 800769a:	bf00      	nop
 800769c:	08008264 	.word	0x08008264
 80076a0:	08008284 	.word	0x08008284
 80076a4:	08008244 	.word	0x08008244

080076a8 <__ascii_wctomb>:
 80076a8:	b149      	cbz	r1, 80076be <__ascii_wctomb+0x16>
 80076aa:	2aff      	cmp	r2, #255	; 0xff
 80076ac:	bf85      	ittet	hi
 80076ae:	238a      	movhi	r3, #138	; 0x8a
 80076b0:	6003      	strhi	r3, [r0, #0]
 80076b2:	700a      	strbls	r2, [r1, #0]
 80076b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80076b8:	bf98      	it	ls
 80076ba:	2001      	movls	r0, #1
 80076bc:	4770      	bx	lr
 80076be:	4608      	mov	r0, r1
 80076c0:	4770      	bx	lr
	...

080076c4 <__swsetup_r>:
 80076c4:	4b32      	ldr	r3, [pc, #200]	; (8007790 <__swsetup_r+0xcc>)
 80076c6:	b570      	push	{r4, r5, r6, lr}
 80076c8:	681d      	ldr	r5, [r3, #0]
 80076ca:	4606      	mov	r6, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	b125      	cbz	r5, 80076da <__swsetup_r+0x16>
 80076d0:	69ab      	ldr	r3, [r5, #24]
 80076d2:	b913      	cbnz	r3, 80076da <__swsetup_r+0x16>
 80076d4:	4628      	mov	r0, r5
 80076d6:	f000 f985 	bl	80079e4 <__sinit>
 80076da:	4b2e      	ldr	r3, [pc, #184]	; (8007794 <__swsetup_r+0xd0>)
 80076dc:	429c      	cmp	r4, r3
 80076de:	d10f      	bne.n	8007700 <__swsetup_r+0x3c>
 80076e0:	686c      	ldr	r4, [r5, #4]
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076e8:	0719      	lsls	r1, r3, #28
 80076ea:	d42c      	bmi.n	8007746 <__swsetup_r+0x82>
 80076ec:	06dd      	lsls	r5, r3, #27
 80076ee:	d411      	bmi.n	8007714 <__swsetup_r+0x50>
 80076f0:	2309      	movs	r3, #9
 80076f2:	6033      	str	r3, [r6, #0]
 80076f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076f8:	81a3      	strh	r3, [r4, #12]
 80076fa:	f04f 30ff 	mov.w	r0, #4294967295
 80076fe:	e03e      	b.n	800777e <__swsetup_r+0xba>
 8007700:	4b25      	ldr	r3, [pc, #148]	; (8007798 <__swsetup_r+0xd4>)
 8007702:	429c      	cmp	r4, r3
 8007704:	d101      	bne.n	800770a <__swsetup_r+0x46>
 8007706:	68ac      	ldr	r4, [r5, #8]
 8007708:	e7eb      	b.n	80076e2 <__swsetup_r+0x1e>
 800770a:	4b24      	ldr	r3, [pc, #144]	; (800779c <__swsetup_r+0xd8>)
 800770c:	429c      	cmp	r4, r3
 800770e:	bf08      	it	eq
 8007710:	68ec      	ldreq	r4, [r5, #12]
 8007712:	e7e6      	b.n	80076e2 <__swsetup_r+0x1e>
 8007714:	0758      	lsls	r0, r3, #29
 8007716:	d512      	bpl.n	800773e <__swsetup_r+0x7a>
 8007718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800771a:	b141      	cbz	r1, 800772e <__swsetup_r+0x6a>
 800771c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007720:	4299      	cmp	r1, r3
 8007722:	d002      	beq.n	800772a <__swsetup_r+0x66>
 8007724:	4630      	mov	r0, r6
 8007726:	f7ff fb31 	bl	8006d8c <_free_r>
 800772a:	2300      	movs	r3, #0
 800772c:	6363      	str	r3, [r4, #52]	; 0x34
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007734:	81a3      	strh	r3, [r4, #12]
 8007736:	2300      	movs	r3, #0
 8007738:	6063      	str	r3, [r4, #4]
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	89a3      	ldrh	r3, [r4, #12]
 8007740:	f043 0308 	orr.w	r3, r3, #8
 8007744:	81a3      	strh	r3, [r4, #12]
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	b94b      	cbnz	r3, 800775e <__swsetup_r+0x9a>
 800774a:	89a3      	ldrh	r3, [r4, #12]
 800774c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007754:	d003      	beq.n	800775e <__swsetup_r+0x9a>
 8007756:	4621      	mov	r1, r4
 8007758:	4630      	mov	r0, r6
 800775a:	f000 fa09 	bl	8007b70 <__smakebuf_r>
 800775e:	89a0      	ldrh	r0, [r4, #12]
 8007760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007764:	f010 0301 	ands.w	r3, r0, #1
 8007768:	d00a      	beq.n	8007780 <__swsetup_r+0xbc>
 800776a:	2300      	movs	r3, #0
 800776c:	60a3      	str	r3, [r4, #8]
 800776e:	6963      	ldr	r3, [r4, #20]
 8007770:	425b      	negs	r3, r3
 8007772:	61a3      	str	r3, [r4, #24]
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	b943      	cbnz	r3, 800778a <__swsetup_r+0xc6>
 8007778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800777c:	d1ba      	bne.n	80076f4 <__swsetup_r+0x30>
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	0781      	lsls	r1, r0, #30
 8007782:	bf58      	it	pl
 8007784:	6963      	ldrpl	r3, [r4, #20]
 8007786:	60a3      	str	r3, [r4, #8]
 8007788:	e7f4      	b.n	8007774 <__swsetup_r+0xb0>
 800778a:	2000      	movs	r0, #0
 800778c:	e7f7      	b.n	800777e <__swsetup_r+0xba>
 800778e:	bf00      	nop
 8007790:	20000014 	.word	0x20000014
 8007794:	08008264 	.word	0x08008264
 8007798:	08008284 	.word	0x08008284
 800779c:	08008244 	.word	0x08008244

080077a0 <abort>:
 80077a0:	b508      	push	{r3, lr}
 80077a2:	2006      	movs	r0, #6
 80077a4:	f000 fa54 	bl	8007c50 <raise>
 80077a8:	2001      	movs	r0, #1
 80077aa:	f7f9 ff07 	bl	80015bc <_exit>
	...

080077b0 <__sflush_r>:
 80077b0:	898a      	ldrh	r2, [r1, #12]
 80077b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b6:	4605      	mov	r5, r0
 80077b8:	0710      	lsls	r0, r2, #28
 80077ba:	460c      	mov	r4, r1
 80077bc:	d458      	bmi.n	8007870 <__sflush_r+0xc0>
 80077be:	684b      	ldr	r3, [r1, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dc05      	bgt.n	80077d0 <__sflush_r+0x20>
 80077c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	dc02      	bgt.n	80077d0 <__sflush_r+0x20>
 80077ca:	2000      	movs	r0, #0
 80077cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077d2:	2e00      	cmp	r6, #0
 80077d4:	d0f9      	beq.n	80077ca <__sflush_r+0x1a>
 80077d6:	2300      	movs	r3, #0
 80077d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077dc:	682f      	ldr	r7, [r5, #0]
 80077de:	602b      	str	r3, [r5, #0]
 80077e0:	d032      	beq.n	8007848 <__sflush_r+0x98>
 80077e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	075a      	lsls	r2, r3, #29
 80077e8:	d505      	bpl.n	80077f6 <__sflush_r+0x46>
 80077ea:	6863      	ldr	r3, [r4, #4]
 80077ec:	1ac0      	subs	r0, r0, r3
 80077ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077f0:	b10b      	cbz	r3, 80077f6 <__sflush_r+0x46>
 80077f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077f4:	1ac0      	subs	r0, r0, r3
 80077f6:	2300      	movs	r3, #0
 80077f8:	4602      	mov	r2, r0
 80077fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077fc:	6a21      	ldr	r1, [r4, #32]
 80077fe:	4628      	mov	r0, r5
 8007800:	47b0      	blx	r6
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	d106      	bne.n	8007816 <__sflush_r+0x66>
 8007808:	6829      	ldr	r1, [r5, #0]
 800780a:	291d      	cmp	r1, #29
 800780c:	d82c      	bhi.n	8007868 <__sflush_r+0xb8>
 800780e:	4a2a      	ldr	r2, [pc, #168]	; (80078b8 <__sflush_r+0x108>)
 8007810:	40ca      	lsrs	r2, r1
 8007812:	07d6      	lsls	r6, r2, #31
 8007814:	d528      	bpl.n	8007868 <__sflush_r+0xb8>
 8007816:	2200      	movs	r2, #0
 8007818:	6062      	str	r2, [r4, #4]
 800781a:	04d9      	lsls	r1, r3, #19
 800781c:	6922      	ldr	r2, [r4, #16]
 800781e:	6022      	str	r2, [r4, #0]
 8007820:	d504      	bpl.n	800782c <__sflush_r+0x7c>
 8007822:	1c42      	adds	r2, r0, #1
 8007824:	d101      	bne.n	800782a <__sflush_r+0x7a>
 8007826:	682b      	ldr	r3, [r5, #0]
 8007828:	b903      	cbnz	r3, 800782c <__sflush_r+0x7c>
 800782a:	6560      	str	r0, [r4, #84]	; 0x54
 800782c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800782e:	602f      	str	r7, [r5, #0]
 8007830:	2900      	cmp	r1, #0
 8007832:	d0ca      	beq.n	80077ca <__sflush_r+0x1a>
 8007834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007838:	4299      	cmp	r1, r3
 800783a:	d002      	beq.n	8007842 <__sflush_r+0x92>
 800783c:	4628      	mov	r0, r5
 800783e:	f7ff faa5 	bl	8006d8c <_free_r>
 8007842:	2000      	movs	r0, #0
 8007844:	6360      	str	r0, [r4, #52]	; 0x34
 8007846:	e7c1      	b.n	80077cc <__sflush_r+0x1c>
 8007848:	6a21      	ldr	r1, [r4, #32]
 800784a:	2301      	movs	r3, #1
 800784c:	4628      	mov	r0, r5
 800784e:	47b0      	blx	r6
 8007850:	1c41      	adds	r1, r0, #1
 8007852:	d1c7      	bne.n	80077e4 <__sflush_r+0x34>
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0c4      	beq.n	80077e4 <__sflush_r+0x34>
 800785a:	2b1d      	cmp	r3, #29
 800785c:	d001      	beq.n	8007862 <__sflush_r+0xb2>
 800785e:	2b16      	cmp	r3, #22
 8007860:	d101      	bne.n	8007866 <__sflush_r+0xb6>
 8007862:	602f      	str	r7, [r5, #0]
 8007864:	e7b1      	b.n	80077ca <__sflush_r+0x1a>
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	e7ad      	b.n	80077cc <__sflush_r+0x1c>
 8007870:	690f      	ldr	r7, [r1, #16]
 8007872:	2f00      	cmp	r7, #0
 8007874:	d0a9      	beq.n	80077ca <__sflush_r+0x1a>
 8007876:	0793      	lsls	r3, r2, #30
 8007878:	680e      	ldr	r6, [r1, #0]
 800787a:	bf08      	it	eq
 800787c:	694b      	ldreq	r3, [r1, #20]
 800787e:	600f      	str	r7, [r1, #0]
 8007880:	bf18      	it	ne
 8007882:	2300      	movne	r3, #0
 8007884:	eba6 0807 	sub.w	r8, r6, r7
 8007888:	608b      	str	r3, [r1, #8]
 800788a:	f1b8 0f00 	cmp.w	r8, #0
 800788e:	dd9c      	ble.n	80077ca <__sflush_r+0x1a>
 8007890:	6a21      	ldr	r1, [r4, #32]
 8007892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007894:	4643      	mov	r3, r8
 8007896:	463a      	mov	r2, r7
 8007898:	4628      	mov	r0, r5
 800789a:	47b0      	blx	r6
 800789c:	2800      	cmp	r0, #0
 800789e:	dc06      	bgt.n	80078ae <__sflush_r+0xfe>
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	e78e      	b.n	80077cc <__sflush_r+0x1c>
 80078ae:	4407      	add	r7, r0
 80078b0:	eba8 0800 	sub.w	r8, r8, r0
 80078b4:	e7e9      	b.n	800788a <__sflush_r+0xda>
 80078b6:	bf00      	nop
 80078b8:	20400001 	.word	0x20400001

080078bc <_fflush_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	690b      	ldr	r3, [r1, #16]
 80078c0:	4605      	mov	r5, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	b913      	cbnz	r3, 80078cc <_fflush_r+0x10>
 80078c6:	2500      	movs	r5, #0
 80078c8:	4628      	mov	r0, r5
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	b118      	cbz	r0, 80078d6 <_fflush_r+0x1a>
 80078ce:	6983      	ldr	r3, [r0, #24]
 80078d0:	b90b      	cbnz	r3, 80078d6 <_fflush_r+0x1a>
 80078d2:	f000 f887 	bl	80079e4 <__sinit>
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <_fflush_r+0x6c>)
 80078d8:	429c      	cmp	r4, r3
 80078da:	d11b      	bne.n	8007914 <_fflush_r+0x58>
 80078dc:	686c      	ldr	r4, [r5, #4]
 80078de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0ef      	beq.n	80078c6 <_fflush_r+0xa>
 80078e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078e8:	07d0      	lsls	r0, r2, #31
 80078ea:	d404      	bmi.n	80078f6 <_fflush_r+0x3a>
 80078ec:	0599      	lsls	r1, r3, #22
 80078ee:	d402      	bmi.n	80078f6 <_fflush_r+0x3a>
 80078f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078f2:	f000 f915 	bl	8007b20 <__retarget_lock_acquire_recursive>
 80078f6:	4628      	mov	r0, r5
 80078f8:	4621      	mov	r1, r4
 80078fa:	f7ff ff59 	bl	80077b0 <__sflush_r>
 80078fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007900:	07da      	lsls	r2, r3, #31
 8007902:	4605      	mov	r5, r0
 8007904:	d4e0      	bmi.n	80078c8 <_fflush_r+0xc>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	059b      	lsls	r3, r3, #22
 800790a:	d4dd      	bmi.n	80078c8 <_fflush_r+0xc>
 800790c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800790e:	f000 f908 	bl	8007b22 <__retarget_lock_release_recursive>
 8007912:	e7d9      	b.n	80078c8 <_fflush_r+0xc>
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <_fflush_r+0x70>)
 8007916:	429c      	cmp	r4, r3
 8007918:	d101      	bne.n	800791e <_fflush_r+0x62>
 800791a:	68ac      	ldr	r4, [r5, #8]
 800791c:	e7df      	b.n	80078de <_fflush_r+0x22>
 800791e:	4b04      	ldr	r3, [pc, #16]	; (8007930 <_fflush_r+0x74>)
 8007920:	429c      	cmp	r4, r3
 8007922:	bf08      	it	eq
 8007924:	68ec      	ldreq	r4, [r5, #12]
 8007926:	e7da      	b.n	80078de <_fflush_r+0x22>
 8007928:	08008264 	.word	0x08008264
 800792c:	08008284 	.word	0x08008284
 8007930:	08008244 	.word	0x08008244

08007934 <std>:
 8007934:	2300      	movs	r3, #0
 8007936:	b510      	push	{r4, lr}
 8007938:	4604      	mov	r4, r0
 800793a:	e9c0 3300 	strd	r3, r3, [r0]
 800793e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007942:	6083      	str	r3, [r0, #8]
 8007944:	8181      	strh	r1, [r0, #12]
 8007946:	6643      	str	r3, [r0, #100]	; 0x64
 8007948:	81c2      	strh	r2, [r0, #14]
 800794a:	6183      	str	r3, [r0, #24]
 800794c:	4619      	mov	r1, r3
 800794e:	2208      	movs	r2, #8
 8007950:	305c      	adds	r0, #92	; 0x5c
 8007952:	f7fd fb5b 	bl	800500c <memset>
 8007956:	4b05      	ldr	r3, [pc, #20]	; (800796c <std+0x38>)
 8007958:	6263      	str	r3, [r4, #36]	; 0x24
 800795a:	4b05      	ldr	r3, [pc, #20]	; (8007970 <std+0x3c>)
 800795c:	62a3      	str	r3, [r4, #40]	; 0x28
 800795e:	4b05      	ldr	r3, [pc, #20]	; (8007974 <std+0x40>)
 8007960:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <std+0x44>)
 8007964:	6224      	str	r4, [r4, #32]
 8007966:	6323      	str	r3, [r4, #48]	; 0x30
 8007968:	bd10      	pop	{r4, pc}
 800796a:	bf00      	nop
 800796c:	08007c89 	.word	0x08007c89
 8007970:	08007cab 	.word	0x08007cab
 8007974:	08007ce3 	.word	0x08007ce3
 8007978:	08007d07 	.word	0x08007d07

0800797c <_cleanup_r>:
 800797c:	4901      	ldr	r1, [pc, #4]	; (8007984 <_cleanup_r+0x8>)
 800797e:	f000 b8af 	b.w	8007ae0 <_fwalk_reent>
 8007982:	bf00      	nop
 8007984:	080078bd 	.word	0x080078bd

08007988 <__sfmoreglue>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	2268      	movs	r2, #104	; 0x68
 800798c:	1e4d      	subs	r5, r1, #1
 800798e:	4355      	muls	r5, r2
 8007990:	460e      	mov	r6, r1
 8007992:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007996:	f7ff fa65 	bl	8006e64 <_malloc_r>
 800799a:	4604      	mov	r4, r0
 800799c:	b140      	cbz	r0, 80079b0 <__sfmoreglue+0x28>
 800799e:	2100      	movs	r1, #0
 80079a0:	e9c0 1600 	strd	r1, r6, [r0]
 80079a4:	300c      	adds	r0, #12
 80079a6:	60a0      	str	r0, [r4, #8]
 80079a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079ac:	f7fd fb2e 	bl	800500c <memset>
 80079b0:	4620      	mov	r0, r4
 80079b2:	bd70      	pop	{r4, r5, r6, pc}

080079b4 <__sfp_lock_acquire>:
 80079b4:	4801      	ldr	r0, [pc, #4]	; (80079bc <__sfp_lock_acquire+0x8>)
 80079b6:	f000 b8b3 	b.w	8007b20 <__retarget_lock_acquire_recursive>
 80079ba:	bf00      	nop
 80079bc:	200003d5 	.word	0x200003d5

080079c0 <__sfp_lock_release>:
 80079c0:	4801      	ldr	r0, [pc, #4]	; (80079c8 <__sfp_lock_release+0x8>)
 80079c2:	f000 b8ae 	b.w	8007b22 <__retarget_lock_release_recursive>
 80079c6:	bf00      	nop
 80079c8:	200003d5 	.word	0x200003d5

080079cc <__sinit_lock_acquire>:
 80079cc:	4801      	ldr	r0, [pc, #4]	; (80079d4 <__sinit_lock_acquire+0x8>)
 80079ce:	f000 b8a7 	b.w	8007b20 <__retarget_lock_acquire_recursive>
 80079d2:	bf00      	nop
 80079d4:	200003d6 	.word	0x200003d6

080079d8 <__sinit_lock_release>:
 80079d8:	4801      	ldr	r0, [pc, #4]	; (80079e0 <__sinit_lock_release+0x8>)
 80079da:	f000 b8a2 	b.w	8007b22 <__retarget_lock_release_recursive>
 80079de:	bf00      	nop
 80079e0:	200003d6 	.word	0x200003d6

080079e4 <__sinit>:
 80079e4:	b510      	push	{r4, lr}
 80079e6:	4604      	mov	r4, r0
 80079e8:	f7ff fff0 	bl	80079cc <__sinit_lock_acquire>
 80079ec:	69a3      	ldr	r3, [r4, #24]
 80079ee:	b11b      	cbz	r3, 80079f8 <__sinit+0x14>
 80079f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f4:	f7ff bff0 	b.w	80079d8 <__sinit_lock_release>
 80079f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079fc:	6523      	str	r3, [r4, #80]	; 0x50
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <__sinit+0x68>)
 8007a00:	4a13      	ldr	r2, [pc, #76]	; (8007a50 <__sinit+0x6c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a06:	42a3      	cmp	r3, r4
 8007a08:	bf04      	itt	eq
 8007a0a:	2301      	moveq	r3, #1
 8007a0c:	61a3      	streq	r3, [r4, #24]
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 f820 	bl	8007a54 <__sfp>
 8007a14:	6060      	str	r0, [r4, #4]
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 f81c 	bl	8007a54 <__sfp>
 8007a1c:	60a0      	str	r0, [r4, #8]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 f818 	bl	8007a54 <__sfp>
 8007a24:	2200      	movs	r2, #0
 8007a26:	60e0      	str	r0, [r4, #12]
 8007a28:	2104      	movs	r1, #4
 8007a2a:	6860      	ldr	r0, [r4, #4]
 8007a2c:	f7ff ff82 	bl	8007934 <std>
 8007a30:	68a0      	ldr	r0, [r4, #8]
 8007a32:	2201      	movs	r2, #1
 8007a34:	2109      	movs	r1, #9
 8007a36:	f7ff ff7d 	bl	8007934 <std>
 8007a3a:	68e0      	ldr	r0, [r4, #12]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	2112      	movs	r1, #18
 8007a40:	f7ff ff78 	bl	8007934 <std>
 8007a44:	2301      	movs	r3, #1
 8007a46:	61a3      	str	r3, [r4, #24]
 8007a48:	e7d2      	b.n	80079f0 <__sinit+0xc>
 8007a4a:	bf00      	nop
 8007a4c:	08007ec8 	.word	0x08007ec8
 8007a50:	0800797d 	.word	0x0800797d

08007a54 <__sfp>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	4607      	mov	r7, r0
 8007a58:	f7ff ffac 	bl	80079b4 <__sfp_lock_acquire>
 8007a5c:	4b1e      	ldr	r3, [pc, #120]	; (8007ad8 <__sfp+0x84>)
 8007a5e:	681e      	ldr	r6, [r3, #0]
 8007a60:	69b3      	ldr	r3, [r6, #24]
 8007a62:	b913      	cbnz	r3, 8007a6a <__sfp+0x16>
 8007a64:	4630      	mov	r0, r6
 8007a66:	f7ff ffbd 	bl	80079e4 <__sinit>
 8007a6a:	3648      	adds	r6, #72	; 0x48
 8007a6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	d503      	bpl.n	8007a7c <__sfp+0x28>
 8007a74:	6833      	ldr	r3, [r6, #0]
 8007a76:	b30b      	cbz	r3, 8007abc <__sfp+0x68>
 8007a78:	6836      	ldr	r6, [r6, #0]
 8007a7a:	e7f7      	b.n	8007a6c <__sfp+0x18>
 8007a7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a80:	b9d5      	cbnz	r5, 8007ab8 <__sfp+0x64>
 8007a82:	4b16      	ldr	r3, [pc, #88]	; (8007adc <__sfp+0x88>)
 8007a84:	60e3      	str	r3, [r4, #12]
 8007a86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a8a:	6665      	str	r5, [r4, #100]	; 0x64
 8007a8c:	f000 f847 	bl	8007b1e <__retarget_lock_init_recursive>
 8007a90:	f7ff ff96 	bl	80079c0 <__sfp_lock_release>
 8007a94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a9c:	6025      	str	r5, [r4, #0]
 8007a9e:	61a5      	str	r5, [r4, #24]
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007aa8:	f7fd fab0 	bl	800500c <memset>
 8007aac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab8:	3468      	adds	r4, #104	; 0x68
 8007aba:	e7d9      	b.n	8007a70 <__sfp+0x1c>
 8007abc:	2104      	movs	r1, #4
 8007abe:	4638      	mov	r0, r7
 8007ac0:	f7ff ff62 	bl	8007988 <__sfmoreglue>
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	6030      	str	r0, [r6, #0]
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d1d5      	bne.n	8007a78 <__sfp+0x24>
 8007acc:	f7ff ff78 	bl	80079c0 <__sfp_lock_release>
 8007ad0:	230c      	movs	r3, #12
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	e7ee      	b.n	8007ab4 <__sfp+0x60>
 8007ad6:	bf00      	nop
 8007ad8:	08007ec8 	.word	0x08007ec8
 8007adc:	ffff0001 	.word	0xffff0001

08007ae0 <_fwalk_reent>:
 8007ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	4688      	mov	r8, r1
 8007ae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007aec:	2700      	movs	r7, #0
 8007aee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007af2:	f1b9 0901 	subs.w	r9, r9, #1
 8007af6:	d505      	bpl.n	8007b04 <_fwalk_reent+0x24>
 8007af8:	6824      	ldr	r4, [r4, #0]
 8007afa:	2c00      	cmp	r4, #0
 8007afc:	d1f7      	bne.n	8007aee <_fwalk_reent+0xe>
 8007afe:	4638      	mov	r0, r7
 8007b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b04:	89ab      	ldrh	r3, [r5, #12]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d907      	bls.n	8007b1a <_fwalk_reent+0x3a>
 8007b0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	d003      	beq.n	8007b1a <_fwalk_reent+0x3a>
 8007b12:	4629      	mov	r1, r5
 8007b14:	4630      	mov	r0, r6
 8007b16:	47c0      	blx	r8
 8007b18:	4307      	orrs	r7, r0
 8007b1a:	3568      	adds	r5, #104	; 0x68
 8007b1c:	e7e9      	b.n	8007af2 <_fwalk_reent+0x12>

08007b1e <__retarget_lock_init_recursive>:
 8007b1e:	4770      	bx	lr

08007b20 <__retarget_lock_acquire_recursive>:
 8007b20:	4770      	bx	lr

08007b22 <__retarget_lock_release_recursive>:
 8007b22:	4770      	bx	lr

08007b24 <__swhatbuf_r>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	460e      	mov	r6, r1
 8007b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	b096      	sub	sp, #88	; 0x58
 8007b30:	4614      	mov	r4, r2
 8007b32:	461d      	mov	r5, r3
 8007b34:	da08      	bge.n	8007b48 <__swhatbuf_r+0x24>
 8007b36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	602a      	str	r2, [r5, #0]
 8007b3e:	061a      	lsls	r2, r3, #24
 8007b40:	d410      	bmi.n	8007b64 <__swhatbuf_r+0x40>
 8007b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b46:	e00e      	b.n	8007b66 <__swhatbuf_r+0x42>
 8007b48:	466a      	mov	r2, sp
 8007b4a:	f000 f903 	bl	8007d54 <_fstat_r>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	dbf1      	blt.n	8007b36 <__swhatbuf_r+0x12>
 8007b52:	9a01      	ldr	r2, [sp, #4]
 8007b54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b5c:	425a      	negs	r2, r3
 8007b5e:	415a      	adcs	r2, r3
 8007b60:	602a      	str	r2, [r5, #0]
 8007b62:	e7ee      	b.n	8007b42 <__swhatbuf_r+0x1e>
 8007b64:	2340      	movs	r3, #64	; 0x40
 8007b66:	2000      	movs	r0, #0
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	b016      	add	sp, #88	; 0x58
 8007b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b70 <__smakebuf_r>:
 8007b70:	898b      	ldrh	r3, [r1, #12]
 8007b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b74:	079d      	lsls	r5, r3, #30
 8007b76:	4606      	mov	r6, r0
 8007b78:	460c      	mov	r4, r1
 8007b7a:	d507      	bpl.n	8007b8c <__smakebuf_r+0x1c>
 8007b7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	6123      	str	r3, [r4, #16]
 8007b84:	2301      	movs	r3, #1
 8007b86:	6163      	str	r3, [r4, #20]
 8007b88:	b002      	add	sp, #8
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	ab01      	add	r3, sp, #4
 8007b8e:	466a      	mov	r2, sp
 8007b90:	f7ff ffc8 	bl	8007b24 <__swhatbuf_r>
 8007b94:	9900      	ldr	r1, [sp, #0]
 8007b96:	4605      	mov	r5, r0
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff f963 	bl	8006e64 <_malloc_r>
 8007b9e:	b948      	cbnz	r0, 8007bb4 <__smakebuf_r+0x44>
 8007ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ba4:	059a      	lsls	r2, r3, #22
 8007ba6:	d4ef      	bmi.n	8007b88 <__smakebuf_r+0x18>
 8007ba8:	f023 0303 	bic.w	r3, r3, #3
 8007bac:	f043 0302 	orr.w	r3, r3, #2
 8007bb0:	81a3      	strh	r3, [r4, #12]
 8007bb2:	e7e3      	b.n	8007b7c <__smakebuf_r+0xc>
 8007bb4:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <__smakebuf_r+0x7c>)
 8007bb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	6020      	str	r0, [r4, #0]
 8007bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	9b00      	ldr	r3, [sp, #0]
 8007bc4:	6163      	str	r3, [r4, #20]
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	6120      	str	r0, [r4, #16]
 8007bca:	b15b      	cbz	r3, 8007be4 <__smakebuf_r+0x74>
 8007bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f000 f8d1 	bl	8007d78 <_isatty_r>
 8007bd6:	b128      	cbz	r0, 8007be4 <__smakebuf_r+0x74>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f023 0303 	bic.w	r3, r3, #3
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	89a0      	ldrh	r0, [r4, #12]
 8007be6:	4305      	orrs	r5, r0
 8007be8:	81a5      	strh	r5, [r4, #12]
 8007bea:	e7cd      	b.n	8007b88 <__smakebuf_r+0x18>
 8007bec:	0800797d 	.word	0x0800797d

08007bf0 <_malloc_usable_size_r>:
 8007bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf4:	1f18      	subs	r0, r3, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfbc      	itt	lt
 8007bfa:	580b      	ldrlt	r3, [r1, r0]
 8007bfc:	18c0      	addlt	r0, r0, r3
 8007bfe:	4770      	bx	lr

08007c00 <_raise_r>:
 8007c00:	291f      	cmp	r1, #31
 8007c02:	b538      	push	{r3, r4, r5, lr}
 8007c04:	4604      	mov	r4, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	d904      	bls.n	8007c14 <_raise_r+0x14>
 8007c0a:	2316      	movs	r3, #22
 8007c0c:	6003      	str	r3, [r0, #0]
 8007c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c16:	b112      	cbz	r2, 8007c1e <_raise_r+0x1e>
 8007c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c1c:	b94b      	cbnz	r3, 8007c32 <_raise_r+0x32>
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f830 	bl	8007c84 <_getpid_r>
 8007c24:	462a      	mov	r2, r5
 8007c26:	4601      	mov	r1, r0
 8007c28:	4620      	mov	r0, r4
 8007c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c2e:	f000 b817 	b.w	8007c60 <_kill_r>
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d00a      	beq.n	8007c4c <_raise_r+0x4c>
 8007c36:	1c59      	adds	r1, r3, #1
 8007c38:	d103      	bne.n	8007c42 <_raise_r+0x42>
 8007c3a:	2316      	movs	r3, #22
 8007c3c:	6003      	str	r3, [r0, #0]
 8007c3e:	2001      	movs	r0, #1
 8007c40:	e7e7      	b.n	8007c12 <_raise_r+0x12>
 8007c42:	2400      	movs	r4, #0
 8007c44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c48:	4628      	mov	r0, r5
 8007c4a:	4798      	blx	r3
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e7e0      	b.n	8007c12 <_raise_r+0x12>

08007c50 <raise>:
 8007c50:	4b02      	ldr	r3, [pc, #8]	; (8007c5c <raise+0xc>)
 8007c52:	4601      	mov	r1, r0
 8007c54:	6818      	ldr	r0, [r3, #0]
 8007c56:	f7ff bfd3 	b.w	8007c00 <_raise_r>
 8007c5a:	bf00      	nop
 8007c5c:	20000014 	.word	0x20000014

08007c60 <_kill_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d07      	ldr	r5, [pc, #28]	; (8007c80 <_kill_r+0x20>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	f7f9 fc95 	bl	800159c <_kill>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	d102      	bne.n	8007c7c <_kill_r+0x1c>
 8007c76:	682b      	ldr	r3, [r5, #0]
 8007c78:	b103      	cbz	r3, 8007c7c <_kill_r+0x1c>
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	bd38      	pop	{r3, r4, r5, pc}
 8007c7e:	bf00      	nop
 8007c80:	200003d0 	.word	0x200003d0

08007c84 <_getpid_r>:
 8007c84:	f7f9 bc82 	b.w	800158c <_getpid>

08007c88 <__sread>:
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c90:	f000 f894 	bl	8007dbc <_read_r>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	bfab      	itete	ge
 8007c98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c9c:	181b      	addge	r3, r3, r0
 8007c9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ca2:	bfac      	ite	ge
 8007ca4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ca6:	81a3      	strhlt	r3, [r4, #12]
 8007ca8:	bd10      	pop	{r4, pc}

08007caa <__swrite>:
 8007caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cae:	461f      	mov	r7, r3
 8007cb0:	898b      	ldrh	r3, [r1, #12]
 8007cb2:	05db      	lsls	r3, r3, #23
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	4616      	mov	r6, r2
 8007cba:	d505      	bpl.n	8007cc8 <__swrite+0x1e>
 8007cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f000 f868 	bl	8007d98 <_lseek_r>
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	4628      	mov	r0, r5
 8007cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cde:	f000 b817 	b.w	8007d10 <_write_r>

08007ce2 <__sseek>:
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cea:	f000 f855 	bl	8007d98 <_lseek_r>
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	bf15      	itete	ne
 8007cf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cfe:	81a3      	strheq	r3, [r4, #12]
 8007d00:	bf18      	it	ne
 8007d02:	81a3      	strhne	r3, [r4, #12]
 8007d04:	bd10      	pop	{r4, pc}

08007d06 <__sclose>:
 8007d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0a:	f000 b813 	b.w	8007d34 <_close_r>
	...

08007d10 <_write_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d07      	ldr	r5, [pc, #28]	; (8007d30 <_write_r+0x20>)
 8007d14:	4604      	mov	r4, r0
 8007d16:	4608      	mov	r0, r1
 8007d18:	4611      	mov	r1, r2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	602a      	str	r2, [r5, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f7f9 fc73 	bl	800160a <_write>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_write_r+0x1e>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_write_r+0x1e>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	200003d0 	.word	0x200003d0

08007d34 <_close_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d06      	ldr	r5, [pc, #24]	; (8007d50 <_close_r+0x1c>)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	602b      	str	r3, [r5, #0]
 8007d40:	f7f9 fc7f 	bl	8001642 <_close>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d102      	bne.n	8007d4e <_close_r+0x1a>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	b103      	cbz	r3, 8007d4e <_close_r+0x1a>
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
 8007d50:	200003d0 	.word	0x200003d0

08007d54 <_fstat_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	4d07      	ldr	r5, [pc, #28]	; (8007d74 <_fstat_r+0x20>)
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	4611      	mov	r1, r2
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	f7f9 fc7a 	bl	800165a <_fstat>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	d102      	bne.n	8007d70 <_fstat_r+0x1c>
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	b103      	cbz	r3, 8007d70 <_fstat_r+0x1c>
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	bd38      	pop	{r3, r4, r5, pc}
 8007d72:	bf00      	nop
 8007d74:	200003d0 	.word	0x200003d0

08007d78 <_isatty_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d06      	ldr	r5, [pc, #24]	; (8007d94 <_isatty_r+0x1c>)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	f7f9 fc79 	bl	800167a <_isatty>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_isatty_r+0x1a>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_isatty_r+0x1a>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	200003d0 	.word	0x200003d0

08007d98 <_lseek_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4d07      	ldr	r5, [pc, #28]	; (8007db8 <_lseek_r+0x20>)
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	4608      	mov	r0, r1
 8007da0:	4611      	mov	r1, r2
 8007da2:	2200      	movs	r2, #0
 8007da4:	602a      	str	r2, [r5, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	f7f9 fc72 	bl	8001690 <_lseek>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d102      	bne.n	8007db6 <_lseek_r+0x1e>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	b103      	cbz	r3, 8007db6 <_lseek_r+0x1e>
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	200003d0 	.word	0x200003d0

08007dbc <_read_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	4d07      	ldr	r5, [pc, #28]	; (8007ddc <_read_r+0x20>)
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	4608      	mov	r0, r1
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	602a      	str	r2, [r5, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f7f9 fc00 	bl	80015d0 <_read>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d102      	bne.n	8007dda <_read_r+0x1e>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	b103      	cbz	r3, 8007dda <_read_r+0x1e>
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	200003d0 	.word	0x200003d0

08007de0 <_init>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr

08007dec <_fini>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	bf00      	nop
 8007df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df2:	bc08      	pop	{r3}
 8007df4:	469e      	mov	lr, r3
 8007df6:	4770      	bx	lr
